name: Publish Docs (GitHub Pages)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: docs-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build (Release) for DocC
        run: swift build -c release

      - name: Generate DocC static site (NearJsonRpcClient)
        env:
          BASE_PATH: ${{ github.event.repository.name }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf docs

          # Generar sitio DocC estático con base-path de Pages
          swift package --allow-writing-to-directory docs \
            generate-documentation \
            --target NearJsonRpcClient \
            --output-path docs \
            --transform-for-static-hosting \
            --hosting-base-path "${BASE_PATH}"

          # Si DocC anida el sitio en /NearJsonRpcClient/, aplánalo a /docs
          if [[ -d docs/NearJsonRpcClient && -f docs/NearJsonRpcClient/index.html ]]; then
            rsync -a "docs/NearJsonRpcClient/" "docs/"
            rm -rf "docs/NearJsonRpcClient"
          fi

          # Asegurar estructura mínima
          mkdir -p docs/data docs/data/documentation docs/index

          # Asegurar documentation.json en docs/data (algunas versiones lo dejan sólo en /data/documentation/*.json)
          if [[ ! -s docs/data/documentation.json ]]; then
            MOD_JSON=$(ls docs/data/documentation/*.json 2>/dev/null | head -n1 || true)
            if [[ -n "${MOD_JSON:-}" ]]; then
              cp "${MOD_JSON}" docs/data/documentation.json
            fi
          fi

          # ---- FIX CRÍTICO: linkable-entities.json vacío rompe el visor DocC ----
          # Si no existe o pesa < 10 bytes ({}), escribir un stub válido.
          if [[ ! -s docs/data/linkable-entities.json || $(wc -c < docs/data/linkable-entities.json | tr -d ' ') -lt 10 ]]; then
            cat > docs/data/linkable-entities.json <<'JSON'
{"interfaceLanguages":{"swift":{"symbols":[],"relationships":[],"overviews":[]}}}
JSON
          fi

          # Índice de búsqueda mínimo
          [[ -s docs/index/index.json ]] || printf '{"records":[]}\n' > docs/index/index.json

          # Evitar que GitHub Pages pase Jekyll
          touch docs/.nojekyll

          # 404 → index (suave)
          cat > docs/404.html <<'HTML'
<!doctype html><meta charset="utf-8"><meta http-equiv="refresh" content="0; url=./">
HTML

          # Diagnóstico y hard-gates (si algo está mal, fallar el job)
          echo "== DocC payload sizes =="
          test -f docs/index.html || { echo "::error ::missing docs/index.html"; exit 1; }
          test -s docs/data/documentation.json || { echo "::error ::missing docs/data/documentation.json"; exit 1; }
          test -s docs/data/linkable-entities.json || { echo "::error ::missing docs/data/linkable-entities.json"; exit 1; }
          LKSZ=$(wc -c < docs/data/linkable-entities.json | tr -d ' ')
          echo "linkable-entities.json size: ${LKSZ} bytes"
          if [[ "${LKSZ}" -lt 10 ]]; then
            echo "::error ::linkable-entities.json still too small"; exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
