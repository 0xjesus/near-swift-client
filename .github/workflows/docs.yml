name: Publish Docs (GitHub Pages)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: docs-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build (Release) for DocC
        run: swift build -c release

      - name: Generate DocC static site (NearJsonRpcClient)
        env:
          BASE_PATH: ${{ github.event.repository.name }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf docs

          # Genera sitio DocC estático con base path del repo
          swift package --allow-writing-to-directory docs \
            generate-documentation \
            --target NearJsonRpcClient \
            --output-path docs \
            --transform-for-static-hosting \
            --hosting-base-path "${BASE_PATH}"

          echo "== Tree tras generar =="
          (cd docs && find . -maxdepth 3 -print | sort)

          # Aplana si DocC dejó todo bajo docs/NearJsonRpcClient/
          if [[ -d docs/NearJsonRpcClient && -d docs/NearJsonRpcClient/data ]]; then
            echo "Flattening NearJsonRpcClient/ -> docs/"
            rsync -a "docs/NearJsonRpcClient/" "docs/"
            rm -rf "docs/NearJsonRpcClient"
          fi

          # Fallbacks: crea índices si faltan
          mkdir -p docs/data docs/data/documentation

          if [[ ! -f docs/data/documentation.json ]]; then
            MOD_JSON=$(ls docs/data/documentation/*.json 2>/dev/null | head -n1 || true)
            if [[ -n "${MOD_JSON:-}" ]]; then
              echo "Patching: ${MOD_JSON} -> docs/data/documentation.json"
              cp "${MOD_JSON}" docs/data/documentation.json
            fi
          fi

          if [[ ! -f docs/data/linkable-entities.json ]]; then
            echo "Patching: creating docs/data/linkable-entities.json"
            # Vacío es suficiente para que el viewer no truene; navegación avanzada puede faltar
            printf '{}' > docs/data/linkable-entities.json
          fi

          # Evita que GitHub Pages/Jekyll rompa assets DocC
          touch docs/.nojekyll

          # Sanity checks (fallan el job si algo clave no está)
          test -f docs/index.html
          test -f docs/data/documentation.json
          test -f docs/data/linkable-entities.json

          echo "== Tree final a publicar =="
          (cd docs && find . -maxdepth 3 -print | sort)

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
