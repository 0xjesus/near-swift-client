// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// [Deprecated] Returns changes for a given account, contract or contract code for given block height or hash. Consider using changes instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes/post(EXPERIMENTAL_changes)`.
    func EXPERIMENTAL_changes(_ input: Operations.EXPERIMENTAL_changes.Input) async throws -> Operations.EXPERIMENTAL_changes.Output
    /// [Deprecated] Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched. Consider using block_effects instead
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes_in_block`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes_in_block/post(EXPERIMENTAL_changes_in_block)`.
    func EXPERIMENTAL_changes_in_block(_ input: Operations.EXPERIMENTAL_changes_in_block.Input) async throws -> Operations.EXPERIMENTAL_changes_in_block.Output
    /// Queries the congestion level of a shard. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_congestion_level`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_congestion_level/post(EXPERIMENTAL_congestion_level)`.
    func EXPERIMENTAL_congestion_level(_ input: Operations.EXPERIMENTAL_congestion_level.Input) async throws -> Operations.EXPERIMENTAL_congestion_level.Output
    /// [Deprecated] Get initial state and parameters for the genesis block. Consider genesis_config instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_genesis_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_genesis_config/post(EXPERIMENTAL_genesis_config)`.
    func EXPERIMENTAL_genesis_config(_ input: Operations.EXPERIMENTAL_genesis_config.Input) async throws -> Operations.EXPERIMENTAL_genesis_config.Output
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_block_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_block_proof/post(EXPERIMENTAL_light_client_block_proof)`.
    func EXPERIMENTAL_light_client_block_proof(_ input: Operations.EXPERIMENTAL_light_client_block_proof.Input) async throws -> Operations.EXPERIMENTAL_light_client_block_proof.Output
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_proof/post(EXPERIMENTAL_light_client_proof)`.
    func EXPERIMENTAL_light_client_proof(_ input: Operations.EXPERIMENTAL_light_client_proof.Input) async throws -> Operations.EXPERIMENTAL_light_client_proof.Output
    /// [Deprecated] Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer. Consider using maintenance_windows instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_maintenance_windows`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_maintenance_windows/post(EXPERIMENTAL_maintenance_windows)`.
    func EXPERIMENTAL_maintenance_windows(_ input: Operations.EXPERIMENTAL_maintenance_windows.Input) async throws -> Operations.EXPERIMENTAL_maintenance_windows.Output
    /// A configuration that defines the protocol-level parameters such as gas/storage costs, limits, feature flags, other settings
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_protocol_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_protocol_config/post(EXPERIMENTAL_protocol_config)`.
    func EXPERIMENTAL_protocol_config(_ input: Operations.EXPERIMENTAL_protocol_config.Input) async throws -> Operations.EXPERIMENTAL_protocol_config.Output
    /// Fetches a receipt by its ID (as is, without a status or execution outcome)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_receipt`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_receipt/post(EXPERIMENTAL_receipt)`.
    func EXPERIMENTAL_receipt(_ input: Operations.EXPERIMENTAL_receipt.Input) async throws -> Operations.EXPERIMENTAL_receipt.Output
    /// Contains the split storage information. More info on split storage [here](https://near-nodes.io/archival/split-storage-archival)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_split_storage_info`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_split_storage_info/post(EXPERIMENTAL_split_storage_info)`.
    func EXPERIMENTAL_split_storage_info(_ input: Operations.EXPERIMENTAL_split_storage_info.Input) async throws -> Operations.EXPERIMENTAL_split_storage_info.Output
    /// Queries status of a transaction by hash, returning the final transaction result and details of all receipts.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_tx_status`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_tx_status/post(EXPERIMENTAL_tx_status)`.
    func EXPERIMENTAL_tx_status(_ input: Operations.EXPERIMENTAL_tx_status.Input) async throws -> Operations.EXPERIMENTAL_tx_status.Output
    /// Returns the current epoch validators ordered in the block producer order with repetition. This endpoint is solely used for bridge currently and is not intended for other external use cases.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_validators_ordered`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_validators_ordered/post(EXPERIMENTAL_validators_ordered)`.
    func EXPERIMENTAL_validators_ordered(_ input: Operations.EXPERIMENTAL_validators_ordered.Input) async throws -> Operations.EXPERIMENTAL_validators_ordered.Output
    /// Returns block details for given height or hash
    ///
    /// - Remark: HTTP `POST /block`.
    /// - Remark: Generated from `#/paths//block/post(block)`.
    func block(_ input: Operations.block.Input) async throws -> Operations.block.Output
    /// Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched.
    ///
    /// - Remark: HTTP `POST /block_effects`.
    /// - Remark: Generated from `#/paths//block_effects/post(block_effects)`.
    func block_effects(_ input: Operations.block_effects.Input) async throws -> Operations.block_effects.Output
    /// [Deprecated] Sends a transaction and immediately returns transaction hash. Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_async`.
    /// - Remark: Generated from `#/paths//broadcast_tx_async/post(broadcast_tx_async)`.
    func broadcast_tx_async(_ input: Operations.broadcast_tx_async.Input) async throws -> Operations.broadcast_tx_async.Output
    /// [Deprecated] Sends a transaction and waits until transaction is fully complete. (Has a 10 second timeout). Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_commit`.
    /// - Remark: Generated from `#/paths//broadcast_tx_commit/post(broadcast_tx_commit)`.
    func broadcast_tx_commit(_ input: Operations.broadcast_tx_commit.Input) async throws -> Operations.broadcast_tx_commit.Output
    /// Returns changes for a given account, contract or contract code for given block height or hash.
    ///
    /// - Remark: HTTP `POST /changes`.
    /// - Remark: Generated from `#/paths//changes/post(changes)`.
    func changes(_ input: Operations.changes.Input) async throws -> Operations.changes.Output
    /// Returns details of a specific chunk. You can run a block details query to get a valid chunk hash.
    ///
    /// - Remark: HTTP `POST /chunk`.
    /// - Remark: Generated from `#/paths//chunk/post(chunk)`.
    func chunk(_ input: Operations.chunk.Input) async throws -> Operations.chunk.Output
    /// Queries client node configuration
    ///
    /// - Remark: HTTP `POST /client_config`.
    /// - Remark: Generated from `#/paths//client_config/post(client_config)`.
    func client_config(_ input: Operations.client_config.Input) async throws -> Operations.client_config.Output
    /// Returns gas price for a specific block_height or block_hash. Using [null] will return the most recent block's gas price.
    ///
    /// - Remark: HTTP `POST /gas_price`.
    /// - Remark: Generated from `#/paths//gas_price/post(gas_price)`.
    func gas_price(_ input: Operations.gas_price.Input) async throws -> Operations.gas_price.Output
    /// Get initial state and parameters for the genesis block
    ///
    /// - Remark: HTTP `POST /genesis_config`.
    /// - Remark: Generated from `#/paths//genesis_config/post(genesis_config)`.
    func genesis_config(_ input: Operations.genesis_config.Input) async throws -> Operations.genesis_config.Output
    /// Returns the current health status of the RPC node the client connects to.
    ///
    /// - Remark: HTTP `POST /health`.
    /// - Remark: Generated from `#/paths//health/post(health)`.
    func health(_ input: Operations.health.Input) async throws -> Operations.health.Output
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /light_client_proof`.
    /// - Remark: Generated from `#/paths//light_client_proof/post(light_client_proof)`.
    func light_client_proof(_ input: Operations.light_client_proof.Input) async throws -> Operations.light_client_proof.Output
    /// Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer.
    ///
    /// - Remark: HTTP `POST /maintenance_windows`.
    /// - Remark: Generated from `#/paths//maintenance_windows/post(maintenance_windows)`.
    func maintenance_windows(_ input: Operations.maintenance_windows.Input) async throws -> Operations.maintenance_windows.Output
    /// Queries the current state of node network connections. This includes information about active peers, transmitted data, known producers, etc.
    ///
    /// - Remark: HTTP `POST /network_info`.
    /// - Remark: Generated from `#/paths//network_info/post(network_info)`.
    func network_info(_ input: Operations.network_info.Input) async throws -> Operations.network_info.Output
    /// Returns the next light client block.
    ///
    /// - Remark: HTTP `POST /next_light_client_block`.
    /// - Remark: Generated from `#/paths//next_light_client_block/post(next_light_client_block)`.
    func next_light_client_block(_ input: Operations.next_light_client_block.Input) async throws -> Operations.next_light_client_block.Output
    /// This module allows you to make generic requests to the network.
    ///
    /// The `RpcQueryRequest` struct takes in a [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html) and a [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
    ///
    /// The `BlockReference` enum allows you to specify a block by `Finality`, `BlockId` or `SyncCheckpoint`.
    ///
    /// The `QueryRequest` enum provides multiple variants for performing the following actions:
    ///  - View an account's details
    ///  - View a contract's code
    ///  - View the state of an account
    ///  - View the `AccessKey` of an account
    ///  - View the `AccessKeyList` of an account
    ///  - Call a function in a contract deployed on the network.
    ///
    /// - Remark: HTTP `POST /query`.
    /// - Remark: Generated from `#/paths//query/post(query)`.
    func query(_ input: Operations.query.Input) async throws -> Operations.query.Output
    /// Sends transaction. Returns the guaranteed execution status and the results the blockchain can provide at the moment.
    ///
    /// - Remark: HTTP `POST /send_tx`.
    /// - Remark: Generated from `#/paths//send_tx/post(send_tx)`.
    func send_tx(_ input: Operations.send_tx.Input) async throws -> Operations.send_tx.Output
    /// Requests the status of the connected RPC node. This includes information about sync status, nearcore node version, protocol version, the current set of validators, etc.
    ///
    /// - Remark: HTTP `POST /status`.
    /// - Remark: Generated from `#/paths//status/post(status)`.
    func status(_ input: Operations.status.Input) async throws -> Operations.status.Output
    /// Queries status of a transaction by hash and returns the final transaction result.
    ///
    /// - Remark: HTTP `POST /tx`.
    /// - Remark: Generated from `#/paths//tx/post(tx)`.
    func tx(_ input: Operations.tx.Input) async throws -> Operations.tx.Output
    /// Queries active validators on the network. Returns details and the state of validation on the blockchain.
    ///
    /// - Remark: HTTP `POST /validators`.
    /// - Remark: Generated from `#/paths//validators/post(validators)`.
    func validators(_ input: Operations.validators.Input) async throws -> Operations.validators.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// [Deprecated] Returns changes for a given account, contract or contract code for given block height or hash. Consider using changes instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes/post(EXPERIMENTAL_changes)`.
    public func EXPERIMENTAL_changes(
        headers: Operations.EXPERIMENTAL_changes.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_changes.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_changes.Output {
        try await EXPERIMENTAL_changes(Operations.EXPERIMENTAL_changes.Input(
            headers: headers,
            body: body
        ))
    }
    /// [Deprecated] Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched. Consider using block_effects instead
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes_in_block`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes_in_block/post(EXPERIMENTAL_changes_in_block)`.
    public func EXPERIMENTAL_changes_in_block(
        headers: Operations.EXPERIMENTAL_changes_in_block.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_changes_in_block.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_changes_in_block.Output {
        try await EXPERIMENTAL_changes_in_block(Operations.EXPERIMENTAL_changes_in_block.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries the congestion level of a shard. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_congestion_level`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_congestion_level/post(EXPERIMENTAL_congestion_level)`.
    public func EXPERIMENTAL_congestion_level(
        headers: Operations.EXPERIMENTAL_congestion_level.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_congestion_level.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_congestion_level.Output {
        try await EXPERIMENTAL_congestion_level(Operations.EXPERIMENTAL_congestion_level.Input(
            headers: headers,
            body: body
        ))
    }
    /// [Deprecated] Get initial state and parameters for the genesis block. Consider genesis_config instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_genesis_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_genesis_config/post(EXPERIMENTAL_genesis_config)`.
    public func EXPERIMENTAL_genesis_config(
        headers: Operations.EXPERIMENTAL_genesis_config.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_genesis_config.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_genesis_config.Output {
        try await EXPERIMENTAL_genesis_config(Operations.EXPERIMENTAL_genesis_config.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_block_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_block_proof/post(EXPERIMENTAL_light_client_block_proof)`.
    public func EXPERIMENTAL_light_client_block_proof(
        headers: Operations.EXPERIMENTAL_light_client_block_proof.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_light_client_block_proof.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_light_client_block_proof.Output {
        try await EXPERIMENTAL_light_client_block_proof(Operations.EXPERIMENTAL_light_client_block_proof.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_proof/post(EXPERIMENTAL_light_client_proof)`.
    public func EXPERIMENTAL_light_client_proof(
        headers: Operations.EXPERIMENTAL_light_client_proof.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_light_client_proof.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_light_client_proof.Output {
        try await EXPERIMENTAL_light_client_proof(Operations.EXPERIMENTAL_light_client_proof.Input(
            headers: headers,
            body: body
        ))
    }
    /// [Deprecated] Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer. Consider using maintenance_windows instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_maintenance_windows`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_maintenance_windows/post(EXPERIMENTAL_maintenance_windows)`.
    public func EXPERIMENTAL_maintenance_windows(
        headers: Operations.EXPERIMENTAL_maintenance_windows.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_maintenance_windows.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_maintenance_windows.Output {
        try await EXPERIMENTAL_maintenance_windows(Operations.EXPERIMENTAL_maintenance_windows.Input(
            headers: headers,
            body: body
        ))
    }
    /// A configuration that defines the protocol-level parameters such as gas/storage costs, limits, feature flags, other settings
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_protocol_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_protocol_config/post(EXPERIMENTAL_protocol_config)`.
    public func EXPERIMENTAL_protocol_config(
        headers: Operations.EXPERIMENTAL_protocol_config.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_protocol_config.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_protocol_config.Output {
        try await EXPERIMENTAL_protocol_config(Operations.EXPERIMENTAL_protocol_config.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetches a receipt by its ID (as is, without a status or execution outcome)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_receipt`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_receipt/post(EXPERIMENTAL_receipt)`.
    public func EXPERIMENTAL_receipt(
        headers: Operations.EXPERIMENTAL_receipt.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_receipt.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_receipt.Output {
        try await EXPERIMENTAL_receipt(Operations.EXPERIMENTAL_receipt.Input(
            headers: headers,
            body: body
        ))
    }
    /// Contains the split storage information. More info on split storage [here](https://near-nodes.io/archival/split-storage-archival)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_split_storage_info`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_split_storage_info/post(EXPERIMENTAL_split_storage_info)`.
    public func EXPERIMENTAL_split_storage_info(
        headers: Operations.EXPERIMENTAL_split_storage_info.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_split_storage_info.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_split_storage_info.Output {
        try await EXPERIMENTAL_split_storage_info(Operations.EXPERIMENTAL_split_storage_info.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries status of a transaction by hash, returning the final transaction result and details of all receipts.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_tx_status`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_tx_status/post(EXPERIMENTAL_tx_status)`.
    public func EXPERIMENTAL_tx_status(
        headers: Operations.EXPERIMENTAL_tx_status.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_tx_status.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_tx_status.Output {
        try await EXPERIMENTAL_tx_status(Operations.EXPERIMENTAL_tx_status.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the current epoch validators ordered in the block producer order with repetition. This endpoint is solely used for bridge currently and is not intended for other external use cases.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_validators_ordered`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_validators_ordered/post(EXPERIMENTAL_validators_ordered)`.
    public func EXPERIMENTAL_validators_ordered(
        headers: Operations.EXPERIMENTAL_validators_ordered.Input.Headers = .init(),
        body: Operations.EXPERIMENTAL_validators_ordered.Input.Body
    ) async throws -> Operations.EXPERIMENTAL_validators_ordered.Output {
        try await EXPERIMENTAL_validators_ordered(Operations.EXPERIMENTAL_validators_ordered.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns block details for given height or hash
    ///
    /// - Remark: HTTP `POST /block`.
    /// - Remark: Generated from `#/paths//block/post(block)`.
    public func block(
        headers: Operations.block.Input.Headers = .init(),
        body: Operations.block.Input.Body
    ) async throws -> Operations.block.Output {
        try await block(Operations.block.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched.
    ///
    /// - Remark: HTTP `POST /block_effects`.
    /// - Remark: Generated from `#/paths//block_effects/post(block_effects)`.
    public func block_effects(
        headers: Operations.block_effects.Input.Headers = .init(),
        body: Operations.block_effects.Input.Body
    ) async throws -> Operations.block_effects.Output {
        try await block_effects(Operations.block_effects.Input(
            headers: headers,
            body: body
        ))
    }
    /// [Deprecated] Sends a transaction and immediately returns transaction hash. Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_async`.
    /// - Remark: Generated from `#/paths//broadcast_tx_async/post(broadcast_tx_async)`.
    public func broadcast_tx_async(
        headers: Operations.broadcast_tx_async.Input.Headers = .init(),
        body: Operations.broadcast_tx_async.Input.Body
    ) async throws -> Operations.broadcast_tx_async.Output {
        try await broadcast_tx_async(Operations.broadcast_tx_async.Input(
            headers: headers,
            body: body
        ))
    }
    /// [Deprecated] Sends a transaction and waits until transaction is fully complete. (Has a 10 second timeout). Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_commit`.
    /// - Remark: Generated from `#/paths//broadcast_tx_commit/post(broadcast_tx_commit)`.
    public func broadcast_tx_commit(
        headers: Operations.broadcast_tx_commit.Input.Headers = .init(),
        body: Operations.broadcast_tx_commit.Input.Body
    ) async throws -> Operations.broadcast_tx_commit.Output {
        try await broadcast_tx_commit(Operations.broadcast_tx_commit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns changes for a given account, contract or contract code for given block height or hash.
    ///
    /// - Remark: HTTP `POST /changes`.
    /// - Remark: Generated from `#/paths//changes/post(changes)`.
    public func changes(
        headers: Operations.changes.Input.Headers = .init(),
        body: Operations.changes.Input.Body
    ) async throws -> Operations.changes.Output {
        try await changes(Operations.changes.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns details of a specific chunk. You can run a block details query to get a valid chunk hash.
    ///
    /// - Remark: HTTP `POST /chunk`.
    /// - Remark: Generated from `#/paths//chunk/post(chunk)`.
    public func chunk(
        headers: Operations.chunk.Input.Headers = .init(),
        body: Operations.chunk.Input.Body
    ) async throws -> Operations.chunk.Output {
        try await chunk(Operations.chunk.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries client node configuration
    ///
    /// - Remark: HTTP `POST /client_config`.
    /// - Remark: Generated from `#/paths//client_config/post(client_config)`.
    public func client_config(
        headers: Operations.client_config.Input.Headers = .init(),
        body: Operations.client_config.Input.Body
    ) async throws -> Operations.client_config.Output {
        try await client_config(Operations.client_config.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns gas price for a specific block_height or block_hash. Using [null] will return the most recent block's gas price.
    ///
    /// - Remark: HTTP `POST /gas_price`.
    /// - Remark: Generated from `#/paths//gas_price/post(gas_price)`.
    public func gas_price(
        headers: Operations.gas_price.Input.Headers = .init(),
        body: Operations.gas_price.Input.Body
    ) async throws -> Operations.gas_price.Output {
        try await gas_price(Operations.gas_price.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get initial state and parameters for the genesis block
    ///
    /// - Remark: HTTP `POST /genesis_config`.
    /// - Remark: Generated from `#/paths//genesis_config/post(genesis_config)`.
    public func genesis_config(
        headers: Operations.genesis_config.Input.Headers = .init(),
        body: Operations.genesis_config.Input.Body
    ) async throws -> Operations.genesis_config.Output {
        try await genesis_config(Operations.genesis_config.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the current health status of the RPC node the client connects to.
    ///
    /// - Remark: HTTP `POST /health`.
    /// - Remark: Generated from `#/paths//health/post(health)`.
    public func health(
        headers: Operations.health.Input.Headers = .init(),
        body: Operations.health.Input.Body
    ) async throws -> Operations.health.Output {
        try await health(Operations.health.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /light_client_proof`.
    /// - Remark: Generated from `#/paths//light_client_proof/post(light_client_proof)`.
    public func light_client_proof(
        headers: Operations.light_client_proof.Input.Headers = .init(),
        body: Operations.light_client_proof.Input.Body
    ) async throws -> Operations.light_client_proof.Output {
        try await light_client_proof(Operations.light_client_proof.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer.
    ///
    /// - Remark: HTTP `POST /maintenance_windows`.
    /// - Remark: Generated from `#/paths//maintenance_windows/post(maintenance_windows)`.
    public func maintenance_windows(
        headers: Operations.maintenance_windows.Input.Headers = .init(),
        body: Operations.maintenance_windows.Input.Body
    ) async throws -> Operations.maintenance_windows.Output {
        try await maintenance_windows(Operations.maintenance_windows.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries the current state of node network connections. This includes information about active peers, transmitted data, known producers, etc.
    ///
    /// - Remark: HTTP `POST /network_info`.
    /// - Remark: Generated from `#/paths//network_info/post(network_info)`.
    public func network_info(
        headers: Operations.network_info.Input.Headers = .init(),
        body: Operations.network_info.Input.Body
    ) async throws -> Operations.network_info.Output {
        try await network_info(Operations.network_info.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the next light client block.
    ///
    /// - Remark: HTTP `POST /next_light_client_block`.
    /// - Remark: Generated from `#/paths//next_light_client_block/post(next_light_client_block)`.
    public func next_light_client_block(
        headers: Operations.next_light_client_block.Input.Headers = .init(),
        body: Operations.next_light_client_block.Input.Body
    ) async throws -> Operations.next_light_client_block.Output {
        try await next_light_client_block(Operations.next_light_client_block.Input(
            headers: headers,
            body: body
        ))
    }
    /// This module allows you to make generic requests to the network.
    ///
    /// The `RpcQueryRequest` struct takes in a [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html) and a [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
    ///
    /// The `BlockReference` enum allows you to specify a block by `Finality`, `BlockId` or `SyncCheckpoint`.
    ///
    /// The `QueryRequest` enum provides multiple variants for performing the following actions:
    ///  - View an account's details
    ///  - View a contract's code
    ///  - View the state of an account
    ///  - View the `AccessKey` of an account
    ///  - View the `AccessKeyList` of an account
    ///  - Call a function in a contract deployed on the network.
    ///
    /// - Remark: HTTP `POST /query`.
    /// - Remark: Generated from `#/paths//query/post(query)`.
    public func query(
        headers: Operations.query.Input.Headers = .init(),
        body: Operations.query.Input.Body
    ) async throws -> Operations.query.Output {
        try await query(Operations.query.Input(
            headers: headers,
            body: body
        ))
    }
    /// Sends transaction. Returns the guaranteed execution status and the results the blockchain can provide at the moment.
    ///
    /// - Remark: HTTP `POST /send_tx`.
    /// - Remark: Generated from `#/paths//send_tx/post(send_tx)`.
    public func send_tx(
        headers: Operations.send_tx.Input.Headers = .init(),
        body: Operations.send_tx.Input.Body
    ) async throws -> Operations.send_tx.Output {
        try await send_tx(Operations.send_tx.Input(
            headers: headers,
            body: body
        ))
    }
    /// Requests the status of the connected RPC node. This includes information about sync status, nearcore node version, protocol version, the current set of validators, etc.
    ///
    /// - Remark: HTTP `POST /status`.
    /// - Remark: Generated from `#/paths//status/post(status)`.
    public func status(
        headers: Operations.status.Input.Headers = .init(),
        body: Operations.status.Input.Body
    ) async throws -> Operations.status.Output {
        try await status(Operations.status.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries status of a transaction by hash and returns the final transaction result.
    ///
    /// - Remark: HTTP `POST /tx`.
    /// - Remark: Generated from `#/paths//tx/post(tx)`.
    public func tx(
        headers: Operations.tx.Input.Headers = .init(),
        body: Operations.tx.Input.Body
    ) async throws -> Operations.tx.Output {
        try await tx(Operations.tx.Input(
            headers: headers,
            body: body
        ))
    }
    /// Queries active validators on the network. Returns details and the state of validation on the blockchain.
    ///
    /// - Remark: HTTP `POST /validators`.
    /// - Remark: Generated from `#/paths//validators/post(validators)`.
    public func validators(
        headers: Operations.validators.Input.Headers = .init(),
        body: Operations.validators.Input.Body
    ) async throws -> Operations.validators.Output {
        try await validators(Operations.validators.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Access key provides limited access to an account. Each access key belongs to some account and
        /// is identified by a unique (within the account) public key. One account may have large number of
        /// access keys. Access keys allow to act on behalf of the account by restricting transactions
        /// that can be issued.
        /// `account_id,public_key` is a key in the state
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKey`.
        public struct AccessKey: Codable, Hashable, Sendable {
            /// Nonce for this access key, used for tx nonce generation. When access key is created, nonce
            /// is set to `(block_height - 1) * 1e6` to avoid tx hash collision on access key re-creation.
            /// See <https://github.com/near/nearcore/issues/3779> for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKey/nonce`.
            public var nonce: Swift.Int
            /// Defines permissions for this access key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKey/permission`.
            public struct permissionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKey/permission/value1`.
                public var value1: Components.Schemas.AccessKeyPermission
                /// Creates a new `permissionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccessKeyPermission) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Defines permissions for this access key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKey/permission`.
            public var permission: Components.Schemas.AccessKey.permissionPayload
            /// Creates a new `AccessKey`.
            ///
            /// - Parameters:
            ///   - nonce: Nonce for this access key, used for tx nonce generation. When access key is created, nonce
            ///   - permission: Defines permissions for this access key.
            public init(
                nonce: Swift.Int,
                permission: Components.Schemas.AccessKey.permissionPayload
            ) {
                self.nonce = nonce
                self.permission = permission
            }
            public enum CodingKeys: String, CodingKey {
                case nonce
                case permission
            }
        }
        /// Describes the cost of creating an access key.
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView`.
        public struct AccessKeyCreationConfigView: Codable, Hashable, Sendable {
            /// Base cost of creating a full access access-key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/full_access_cost`.
            public struct full_access_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/full_access_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `full_access_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of creating a full access access-key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/full_access_cost`.
            public var full_access_cost: Components.Schemas.AccessKeyCreationConfigView.full_access_costPayload
            /// Base cost of creating an access-key restricted to specific functions.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost`.
            public struct function_call_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `function_call_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of creating an access-key restricted to specific functions.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost`.
            public var function_call_cost: Components.Schemas.AccessKeyCreationConfigView.function_call_costPayload
            /// Cost per byte of method_names of creating a restricted access-key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost_per_byte`.
            public struct function_call_cost_per_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost_per_byte/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `function_call_cost_per_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Cost per byte of method_names of creating a restricted access-key.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyCreationConfigView/function_call_cost_per_byte`.
            public var function_call_cost_per_byte: Components.Schemas.AccessKeyCreationConfigView.function_call_cost_per_bytePayload
            /// Creates a new `AccessKeyCreationConfigView`.
            ///
            /// - Parameters:
            ///   - full_access_cost: Base cost of creating a full access access-key.
            ///   - function_call_cost: Base cost of creating an access-key restricted to specific functions.
            ///   - function_call_cost_per_byte: Cost per byte of method_names of creating a restricted access-key.
            public init(
                full_access_cost: Components.Schemas.AccessKeyCreationConfigView.full_access_costPayload,
                function_call_cost: Components.Schemas.AccessKeyCreationConfigView.function_call_costPayload,
                function_call_cost_per_byte: Components.Schemas.AccessKeyCreationConfigView.function_call_cost_per_bytePayload
            ) {
                self.full_access_cost = full_access_cost
                self.function_call_cost = function_call_cost
                self.function_call_cost_per_byte = function_call_cost_per_byte
            }
            public enum CodingKeys: String, CodingKey {
                case full_access_cost
                case function_call_cost
                case function_call_cost_per_byte
            }
        }
        /// Describes information about an access key including the public key.
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyInfoView`.
        public struct AccessKeyInfoView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessKeyInfoView/access_key`.
            public var access_key: Components.Schemas.AccessKeyView
            /// - Remark: Generated from `#/components/schemas/AccessKeyInfoView/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// Creates a new `AccessKeyInfoView`.
            ///
            /// - Parameters:
            ///   - access_key:
            ///   - public_key:
            public init(
                access_key: Components.Schemas.AccessKeyView,
                public_key: Components.Schemas.PublicKey
            ) {
                self.access_key = access_key
                self.public_key = public_key
            }
            public enum CodingKeys: String, CodingKey {
                case access_key
                case public_key
            }
        }
        /// Lists access keys
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyList`.
        public struct AccessKeyList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessKeyList/keys`.
            public var keys: [Components.Schemas.AccessKeyInfoView]
            /// Creates a new `AccessKeyList`.
            ///
            /// - Parameters:
            ///   - keys:
            public init(keys: [Components.Schemas.AccessKeyInfoView]) {
                self.keys = keys
            }
            public enum CodingKeys: String, CodingKey {
                case keys
            }
        }
        /// Defines permissions for AccessKey
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyPermission`.
        @frozen public enum AccessKeyPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermission/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKeyPermission/case1/FunctionCall`.
                public var FunctionCall: Components.Schemas.FunctionCallPermission
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCall:
                public init(FunctionCall: Components.Schemas.FunctionCallPermission) {
                    self.FunctionCall = FunctionCall
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCall
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCall = try container.decode(
                        Components.Schemas.FunctionCallPermission.self,
                        forKey: .FunctionCall
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCall"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermission/case1`.
            case case1(Components.Schemas.AccessKeyPermission.Case1Payload)
            /// Grants full access to the account.
            /// NOTE: It's used to replace account-level public keys.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermission/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case FullAccess = "FullAccess"
            }
            /// Grants full access to the account.
            /// NOTE: It's used to replace account-level public keys.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermission/case2`.
            case case2(Components.Schemas.AccessKeyPermission.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Describes the permission scope for an access key. Whether it is a function call or a full access key.
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView`.
        @frozen public enum AccessKeyPermissionView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case FullAccess = "FullAccess"
            }
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case1`.
            case case1(Components.Schemas.AccessKeyPermissionView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall`.
                public struct FunctionCallPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/allowance`.
                    public struct allowancePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/allowance/value1`.
                        public var value1: Components.Schemas.NearToken?
                        /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/allowance/value2`.
                        public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                        /// Creates a new `allowancePayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.NearToken? = nil,
                            value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                            try self.value2?.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/allowance`.
                    public var allowance: Components.Schemas.AccessKeyPermissionView.Case2Payload.FunctionCallPayload.allowancePayload?
                    /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/method_names`.
                    public var method_names: [Swift.String]
                    /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall/receiver_id`.
                    public var receiver_id: Swift.String
                    /// Creates a new `FunctionCallPayload`.
                    ///
                    /// - Parameters:
                    ///   - allowance:
                    ///   - method_names:
                    ///   - receiver_id:
                    public init(
                        allowance: Components.Schemas.AccessKeyPermissionView.Case2Payload.FunctionCallPayload.allowancePayload? = nil,
                        method_names: [Swift.String],
                        receiver_id: Swift.String
                    ) {
                        self.allowance = allowance
                        self.method_names = method_names
                        self.receiver_id = receiver_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case allowance
                        case method_names
                        case receiver_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2/FunctionCall`.
                public var FunctionCall: Components.Schemas.AccessKeyPermissionView.Case2Payload.FunctionCallPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCall:
                public init(FunctionCall: Components.Schemas.AccessKeyPermissionView.Case2Payload.FunctionCallPayload) {
                    self.FunctionCall = FunctionCall
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCall
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCall = try container.decode(
                        Components.Schemas.AccessKeyPermissionView.Case2Payload.FunctionCallPayload.self,
                        forKey: .FunctionCall
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCall"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/AccessKeyPermissionView/case2`.
            case case2(Components.Schemas.AccessKeyPermissionView.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Describes access key permission scope and nonce.
        ///
        /// - Remark: Generated from `#/components/schemas/AccessKeyView`.
        public struct AccessKeyView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessKeyView/nonce`.
            public var nonce: Swift.Int
            /// - Remark: Generated from `#/components/schemas/AccessKeyView/permission`.
            public var permission: Components.Schemas.AccessKeyPermissionView
            /// Creates a new `AccessKeyView`.
            ///
            /// - Parameters:
            ///   - nonce:
            ///   - permission:
            public init(
                nonce: Swift.Int,
                permission: Components.Schemas.AccessKeyPermissionView
            ) {
                self.nonce = nonce
                self.permission = permission
            }
            public enum CodingKeys: String, CodingKey {
                case nonce
                case permission
            }
        }
        /// The structure describes configuration for creation of new accounts.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountCreationConfigView`.
        public struct AccountCreationConfigView: Codable, Hashable, Sendable {
            /// The minimum length of the top-level account ID that is allowed to be created by any account.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountCreationConfigView/min_allowed_top_level_account_length`.
            public var min_allowed_top_level_account_length: Swift.Int
            /// The account ID of the account registrar. This account ID allowed to create top-level
            /// accounts of any valid length.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountCreationConfigView/registrar_account_id`.
            public struct registrar_account_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccountCreationConfigView/registrar_account_id/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `registrar_account_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The account ID of the account registrar. This account ID allowed to create top-level
            /// accounts of any valid length.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountCreationConfigView/registrar_account_id`.
            public var registrar_account_id: Components.Schemas.AccountCreationConfigView.registrar_account_idPayload
            /// Creates a new `AccountCreationConfigView`.
            ///
            /// - Parameters:
            ///   - min_allowed_top_level_account_length: The minimum length of the top-level account ID that is allowed to be created by any account.
            ///   - registrar_account_id: The account ID of the account registrar. This account ID allowed to create top-level
            public init(
                min_allowed_top_level_account_length: Swift.Int,
                registrar_account_id: Components.Schemas.AccountCreationConfigView.registrar_account_idPayload
            ) {
                self.min_allowed_top_level_account_length = min_allowed_top_level_account_length
                self.registrar_account_id = registrar_account_id
            }
            public enum CodingKeys: String, CodingKey {
                case min_allowed_top_level_account_length
                case registrar_account_id
            }
        }
        /// AccountData is a piece of global state that a validator
        /// signs and broadcasts to the network.
        ///
        /// It is essentially the data that a validator wants to share with the network.
        /// All the nodes in the network are collecting the account data
        /// broadcasted by the validators.
        /// Since the number of the validators is bounded and their
        /// identity is known (and the maximal size of allowed AccountData is bounded)
        /// the global state that is distributed in the form of AccountData is bounded
        /// as well.
        /// Find more information in the docs [here](https://github.com/near/nearcore/blob/560f7fc8f4b3106e0d5d46050688610b1f104ac6/chain/client/src/client.rs#L2232)
        ///
        /// - Remark: Generated from `#/components/schemas/AccountDataView`.
        public struct AccountDataView: Codable, Hashable, Sendable {
            /// Account key of the validator signing this AccountData.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/account_key`.
            public struct account_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccountDataView/account_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `account_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Account key of the validator signing this AccountData.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/account_key`.
            public var account_key: Components.Schemas.AccountDataView.account_keyPayload
            /// ID of the node that handles the account key (aka validator key).
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/peer_id`.
            public struct peer_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccountDataView/peer_id/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `peer_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// ID of the node that handles the account key (aka validator key).
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/peer_id`.
            public var peer_id: Components.Schemas.AccountDataView.peer_idPayload
            /// Proxy nodes that are directly connected to the validator node
            /// (this list may include the validator node itself).
            /// TIER1 nodes should connect to one of the proxies to sent TIER1
            /// messages to the validator.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/proxies`.
            public var proxies: [Components.Schemas.Tier1ProxyView]
            /// UTC timestamp of when the AccountData has been signed.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountDataView/timestamp`.
            public var timestamp: Swift.String
            /// Creates a new `AccountDataView`.
            ///
            /// - Parameters:
            ///   - account_key: Account key of the validator signing this AccountData.
            ///   - peer_id: ID of the node that handles the account key (aka validator key).
            ///   - proxies: Proxy nodes that are directly connected to the validator node
            ///   - timestamp: UTC timestamp of when the AccountData has been signed.
            public init(
                account_key: Components.Schemas.AccountDataView.account_keyPayload,
                peer_id: Components.Schemas.AccountDataView.peer_idPayload,
                proxies: [Components.Schemas.Tier1ProxyView],
                timestamp: Swift.String
            ) {
                self.account_key = account_key
                self.peer_id = peer_id
                self.proxies = proxies
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case account_key
                case peer_id
                case proxies
                case timestamp
            }
        }
        /// NEAR Account Identifier.
        ///
        /// This is a unique, syntactically valid, human-readable account identifier on the NEAR network.
        ///
        /// [See the crate-level docs for information about validation.](index.html#account-id-rules)
        ///
        /// Also see [Error kind precedence](AccountId#error-kind-precedence).
        ///
        /// ## Examples
        ///
        /// ```
        /// use near_account_id::AccountId;
        ///
        /// let alice: AccountId = "alice.near".parse().unwrap();
        ///
        /// assert!("ƒelicia.near".parse::<AccountId>().is_err()); // (ƒ is not f)
        /// ```
        ///
        /// - Remark: Generated from `#/components/schemas/AccountId`.
        public typealias AccountId = Swift.String
        /// - Remark: Generated from `#/components/schemas/AccountIdValidityRulesVersion`.
        public typealias AccountIdValidityRulesVersion = Swift.Int
        /// Account info for validators
        ///
        /// - Remark: Generated from `#/components/schemas/AccountInfo`.
        public struct AccountInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountInfo/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/AccountInfo/amount`.
            public var amount: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/AccountInfo/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// Creates a new `AccountInfo`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - amount:
            ///   - public_key:
            public init(
                account_id: Components.Schemas.AccountId,
                amount: Components.Schemas.NearToken,
                public_key: Components.Schemas.PublicKey
            ) {
                self.account_id = account_id
                self.amount = amount
                self.public_key = public_key
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case amount
                case public_key
            }
        }
        /// A view of the account
        ///
        /// - Remark: Generated from `#/components/schemas/AccountView`.
        public struct AccountView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountView/amount`.
            public var amount: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/AccountView/code_hash`.
            public var code_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_account_id`.
            public struct global_contract_account_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_account_id/value1`.
                public var value1: Components.Schemas.AccountId?
                /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_account_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `global_contract_account_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AccountId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_account_id`.
            public var global_contract_account_id: Components.Schemas.AccountView.global_contract_account_idPayload?
            /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_hash`.
            public struct global_contract_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_hash/value1`.
                public var value1: Components.Schemas.CryptoHash?
                /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_hash/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `global_contract_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CryptoHash? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/AccountView/global_contract_hash`.
            public var global_contract_hash: Components.Schemas.AccountView.global_contract_hashPayload?
            /// - Remark: Generated from `#/components/schemas/AccountView/locked`.
            public var locked: Components.Schemas.NearToken
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountView/storage_paid_at`.
            public var storage_paid_at: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AccountView/storage_usage`.
            public var storage_usage: Swift.Int
            /// Creates a new `AccountView`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - code_hash:
            ///   - global_contract_account_id:
            ///   - global_contract_hash:
            ///   - locked:
            ///   - storage_paid_at: TODO(2271): deprecated.
            ///   - storage_usage:
            public init(
                amount: Components.Schemas.NearToken,
                code_hash: Components.Schemas.CryptoHash,
                global_contract_account_id: Components.Schemas.AccountView.global_contract_account_idPayload? = nil,
                global_contract_hash: Components.Schemas.AccountView.global_contract_hashPayload? = nil,
                locked: Components.Schemas.NearToken,
                storage_paid_at: Swift.Int? = nil,
                storage_usage: Swift.Int
            ) {
                self.amount = amount
                self.code_hash = code_hash
                self.global_contract_account_id = global_contract_account_id
                self.global_contract_hash = global_contract_hash
                self.locked = locked
                self.storage_paid_at = storage_paid_at
                self.storage_usage = storage_usage
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case code_hash
                case global_contract_account_id
                case global_contract_hash
                case locked
                case storage_paid_at
                case storage_usage
            }
        }
        /// Account ID with its public key.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountWithPublicKey`.
        public struct AccountWithPublicKey: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountWithPublicKey/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/AccountWithPublicKey/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// Creates a new `AccountWithPublicKey`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - public_key:
            public init(
                account_id: Components.Schemas.AccountId,
                public_key: Components.Schemas.PublicKey
            ) {
                self.account_id = account_id
                self.public_key = public_key
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case public_key
            }
        }
        /// Describes the cost of creating a specific action, `Action`. Includes all variants.
        ///
        /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView`.
        public struct ActionCreationConfigView: Codable, Hashable, Sendable {
            /// Base cost of adding a key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/add_key_cost`.
            public struct add_key_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/add_key_cost/value1`.
                public var value1: Components.Schemas.AccessKeyCreationConfigView
                /// Creates a new `add_key_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccessKeyCreationConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of adding a key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/add_key_cost`.
            public var add_key_cost: Components.Schemas.ActionCreationConfigView.add_key_costPayload
            /// Base cost of creating an account.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/create_account_cost`.
            public struct create_account_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/create_account_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `create_account_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of creating an account.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/create_account_cost`.
            public var create_account_cost: Components.Schemas.ActionCreationConfigView.create_account_costPayload
            /// Base cost for processing a delegate action.
            ///
            /// This is on top of the costs for the actions inside the delegate action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delegate_cost`.
            public struct delegate_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delegate_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `delegate_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost for processing a delegate action.
            ///
            /// This is on top of the costs for the actions inside the delegate action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delegate_cost`.
            public var delegate_cost: Components.Schemas.ActionCreationConfigView.delegate_costPayload
            /// Base cost of deleting an account.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_account_cost`.
            public struct delete_account_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_account_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `delete_account_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of deleting an account.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_account_cost`.
            public var delete_account_cost: Components.Schemas.ActionCreationConfigView.delete_account_costPayload
            /// Base cost of deleting a key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_key_cost`.
            public struct delete_key_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_key_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `delete_key_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of deleting a key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/delete_key_cost`.
            public var delete_key_cost: Components.Schemas.ActionCreationConfigView.delete_key_costPayload
            /// Base cost of deploying a contract.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost`.
            public struct deploy_contract_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `deploy_contract_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of deploying a contract.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost`.
            public var deploy_contract_cost: Components.Schemas.ActionCreationConfigView.deploy_contract_costPayload
            /// Cost per byte of deploying a contract.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost_per_byte`.
            public struct deploy_contract_cost_per_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost_per_byte/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `deploy_contract_cost_per_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Cost per byte of deploying a contract.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/deploy_contract_cost_per_byte`.
            public var deploy_contract_cost_per_byte: Components.Schemas.ActionCreationConfigView.deploy_contract_cost_per_bytePayload
            /// Base cost of calling a function.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost`.
            public struct function_call_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `function_call_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of calling a function.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost`.
            public var function_call_cost: Components.Schemas.ActionCreationConfigView.function_call_costPayload
            /// Cost per byte of method name and arguments of calling a function.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost_per_byte`.
            public struct function_call_cost_per_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost_per_byte/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `function_call_cost_per_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Cost per byte of method name and arguments of calling a function.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/function_call_cost_per_byte`.
            public var function_call_cost_per_byte: Components.Schemas.ActionCreationConfigView.function_call_cost_per_bytePayload
            /// Base cost of staking.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/stake_cost`.
            public struct stake_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/stake_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `stake_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of staking.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/stake_cost`.
            public var stake_cost: Components.Schemas.ActionCreationConfigView.stake_costPayload
            /// Base cost of making a transfer.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/transfer_cost`.
            public struct transfer_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/transfer_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `transfer_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of making a transfer.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionCreationConfigView/transfer_cost`.
            public var transfer_cost: Components.Schemas.ActionCreationConfigView.transfer_costPayload
            /// Creates a new `ActionCreationConfigView`.
            ///
            /// - Parameters:
            ///   - add_key_cost: Base cost of adding a key.
            ///   - create_account_cost: Base cost of creating an account.
            ///   - delegate_cost: Base cost for processing a delegate action.
            ///   - delete_account_cost: Base cost of deleting an account.
            ///   - delete_key_cost: Base cost of deleting a key.
            ///   - deploy_contract_cost: Base cost of deploying a contract.
            ///   - deploy_contract_cost_per_byte: Cost per byte of deploying a contract.
            ///   - function_call_cost: Base cost of calling a function.
            ///   - function_call_cost_per_byte: Cost per byte of method name and arguments of calling a function.
            ///   - stake_cost: Base cost of staking.
            ///   - transfer_cost: Base cost of making a transfer.
            public init(
                add_key_cost: Components.Schemas.ActionCreationConfigView.add_key_costPayload,
                create_account_cost: Components.Schemas.ActionCreationConfigView.create_account_costPayload,
                delegate_cost: Components.Schemas.ActionCreationConfigView.delegate_costPayload,
                delete_account_cost: Components.Schemas.ActionCreationConfigView.delete_account_costPayload,
                delete_key_cost: Components.Schemas.ActionCreationConfigView.delete_key_costPayload,
                deploy_contract_cost: Components.Schemas.ActionCreationConfigView.deploy_contract_costPayload,
                deploy_contract_cost_per_byte: Components.Schemas.ActionCreationConfigView.deploy_contract_cost_per_bytePayload,
                function_call_cost: Components.Schemas.ActionCreationConfigView.function_call_costPayload,
                function_call_cost_per_byte: Components.Schemas.ActionCreationConfigView.function_call_cost_per_bytePayload,
                stake_cost: Components.Schemas.ActionCreationConfigView.stake_costPayload,
                transfer_cost: Components.Schemas.ActionCreationConfigView.transfer_costPayload
            ) {
                self.add_key_cost = add_key_cost
                self.create_account_cost = create_account_cost
                self.delegate_cost = delegate_cost
                self.delete_account_cost = delete_account_cost
                self.delete_key_cost = delete_key_cost
                self.deploy_contract_cost = deploy_contract_cost
                self.deploy_contract_cost_per_byte = deploy_contract_cost_per_byte
                self.function_call_cost = function_call_cost
                self.function_call_cost_per_byte = function_call_cost_per_byte
                self.stake_cost = stake_cost
                self.transfer_cost = transfer_cost
            }
            public enum CodingKeys: String, CodingKey {
                case add_key_cost
                case create_account_cost
                case delegate_cost
                case delete_account_cost
                case delete_key_cost
                case deploy_contract_cost
                case deploy_contract_cost_per_byte
                case function_call_cost
                case function_call_cost_per_byte
                case stake_cost
                case transfer_cost
            }
        }
        /// An error happened during Action execution
        ///
        /// - Remark: Generated from `#/components/schemas/ActionError`.
        public struct ActionError: Codable, Hashable, Sendable {
            /// Index of the failed action in the transaction.
            /// Action index is not defined if ActionError.kind is `ActionErrorKind::LackBalanceForState`
            ///
            /// - Remark: Generated from `#/components/schemas/ActionError/index`.
            public var index: Swift.Int?
            /// The kind of ActionError happened
            ///
            /// - Remark: Generated from `#/components/schemas/ActionError/kind`.
            public struct kindPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionError/kind/value1`.
                public var value1: Components.Schemas.ActionErrorKind
                /// Creates a new `kindPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ActionErrorKind) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// The kind of ActionError happened
            ///
            /// - Remark: Generated from `#/components/schemas/ActionError/kind`.
            public var kind: Components.Schemas.ActionError.kindPayload
            /// Creates a new `ActionError`.
            ///
            /// - Parameters:
            ///   - index: Index of the failed action in the transaction.
            ///   - kind: The kind of ActionError happened
            public init(
                index: Swift.Int? = nil,
                kind: Components.Schemas.ActionError.kindPayload
            ) {
                self.index = index
                self.kind = kind
            }
            public enum CodingKeys: String, CodingKey {
                case index
                case kind
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActionErrorKind`.
        @frozen public enum ActionErrorKind: Codable, Hashable, Sendable {
            /// Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case1/AccountAlreadyExists`.
                public struct AccountAlreadyExistsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case1/AccountAlreadyExists/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `AccountAlreadyExistsPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case1/AccountAlreadyExists`.
                public var AccountAlreadyExists: Components.Schemas.ActionErrorKind.Case1Payload.AccountAlreadyExistsPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - AccountAlreadyExists:
                public init(AccountAlreadyExists: Components.Schemas.ActionErrorKind.Case1Payload.AccountAlreadyExistsPayload) {
                    self.AccountAlreadyExists = AccountAlreadyExists
                }
                public enum CodingKeys: String, CodingKey {
                    case AccountAlreadyExists
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AccountAlreadyExists = try container.decode(
                        Components.Schemas.ActionErrorKind.Case1Payload.AccountAlreadyExistsPayload.self,
                        forKey: .AccountAlreadyExists
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AccountAlreadyExists"
                    ])
                }
            }
            /// Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case1`.
            case case1(Components.Schemas.ActionErrorKind.Case1Payload)
            /// Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case2/AccountDoesNotExist`.
                public struct AccountDoesNotExistPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case2/AccountDoesNotExist/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `AccountDoesNotExistPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case2/AccountDoesNotExist`.
                public var AccountDoesNotExist: Components.Schemas.ActionErrorKind.Case2Payload.AccountDoesNotExistPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - AccountDoesNotExist:
                public init(AccountDoesNotExist: Components.Schemas.ActionErrorKind.Case2Payload.AccountDoesNotExistPayload) {
                    self.AccountDoesNotExist = AccountDoesNotExist
                }
                public enum CodingKeys: String, CodingKey {
                    case AccountDoesNotExist
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AccountDoesNotExist = try container.decode(
                        Components.Schemas.ActionErrorKind.Case2Payload.AccountDoesNotExistPayload.self,
                        forKey: .AccountDoesNotExist
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AccountDoesNotExist"
                    ])
                }
            }
            /// Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case2`.
            case case2(Components.Schemas.ActionErrorKind.Case2Payload)
            /// A top-level account ID can only be created by registrar.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3/CreateAccountOnlyByRegistrar`.
                public struct CreateAccountOnlyByRegistrarPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3/CreateAccountOnlyByRegistrar/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3/CreateAccountOnlyByRegistrar/predecessor_id`.
                    public var predecessor_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3/CreateAccountOnlyByRegistrar/registrar_account_id`.
                    public var registrar_account_id: Components.Schemas.AccountId
                    /// Creates a new `CreateAccountOnlyByRegistrarPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - predecessor_id:
                    ///   - registrar_account_id:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        predecessor_id: Components.Schemas.AccountId,
                        registrar_account_id: Components.Schemas.AccountId
                    ) {
                        self.account_id = account_id
                        self.predecessor_id = predecessor_id
                        self.registrar_account_id = registrar_account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case predecessor_id
                        case registrar_account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3/CreateAccountOnlyByRegistrar`.
                public var CreateAccountOnlyByRegistrar: Components.Schemas.ActionErrorKind.Case3Payload.CreateAccountOnlyByRegistrarPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - CreateAccountOnlyByRegistrar:
                public init(CreateAccountOnlyByRegistrar: Components.Schemas.ActionErrorKind.Case3Payload.CreateAccountOnlyByRegistrarPayload) {
                    self.CreateAccountOnlyByRegistrar = CreateAccountOnlyByRegistrar
                }
                public enum CodingKeys: String, CodingKey {
                    case CreateAccountOnlyByRegistrar
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CreateAccountOnlyByRegistrar = try container.decode(
                        Components.Schemas.ActionErrorKind.Case3Payload.CreateAccountOnlyByRegistrarPayload.self,
                        forKey: .CreateAccountOnlyByRegistrar
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CreateAccountOnlyByRegistrar"
                    ])
                }
            }
            /// A top-level account ID can only be created by registrar.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case3`.
            case case3(Components.Schemas.ActionErrorKind.Case3Payload)
            /// A newly created account must be under a namespace of the creator account
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4/CreateAccountNotAllowed`.
                public struct CreateAccountNotAllowedPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4/CreateAccountNotAllowed/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4/CreateAccountNotAllowed/predecessor_id`.
                    public var predecessor_id: Components.Schemas.AccountId
                    /// Creates a new `CreateAccountNotAllowedPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - predecessor_id:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        predecessor_id: Components.Schemas.AccountId
                    ) {
                        self.account_id = account_id
                        self.predecessor_id = predecessor_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case predecessor_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4/CreateAccountNotAllowed`.
                public var CreateAccountNotAllowed: Components.Schemas.ActionErrorKind.Case4Payload.CreateAccountNotAllowedPayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - CreateAccountNotAllowed:
                public init(CreateAccountNotAllowed: Components.Schemas.ActionErrorKind.Case4Payload.CreateAccountNotAllowedPayload) {
                    self.CreateAccountNotAllowed = CreateAccountNotAllowed
                }
                public enum CodingKeys: String, CodingKey {
                    case CreateAccountNotAllowed
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CreateAccountNotAllowed = try container.decode(
                        Components.Schemas.ActionErrorKind.Case4Payload.CreateAccountNotAllowedPayload.self,
                        forKey: .CreateAccountNotAllowed
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CreateAccountNotAllowed"
                    ])
                }
            }
            /// A newly created account must be under a namespace of the creator account
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case4`.
            case case4(Components.Schemas.ActionErrorKind.Case4Payload)
            /// Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver
            /// or the first TX action is a `CreateAccount` action
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5/ActorNoPermission`.
                public struct ActorNoPermissionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5/ActorNoPermission/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5/ActorNoPermission/actor_id`.
                    public var actor_id: Components.Schemas.AccountId
                    /// Creates a new `ActorNoPermissionPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - actor_id:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        actor_id: Components.Schemas.AccountId
                    ) {
                        self.account_id = account_id
                        self.actor_id = actor_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case actor_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5/ActorNoPermission`.
                public var ActorNoPermission: Components.Schemas.ActionErrorKind.Case5Payload.ActorNoPermissionPayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - ActorNoPermission:
                public init(ActorNoPermission: Components.Schemas.ActionErrorKind.Case5Payload.ActorNoPermissionPayload) {
                    self.ActorNoPermission = ActorNoPermission
                }
                public enum CodingKeys: String, CodingKey {
                    case ActorNoPermission
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ActorNoPermission = try container.decode(
                        Components.Schemas.ActionErrorKind.Case5Payload.ActorNoPermissionPayload.self,
                        forKey: .ActorNoPermission
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ActorNoPermission"
                    ])
                }
            }
            /// Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver
            /// or the first TX action is a `CreateAccount` action
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case5`.
            case case5(Components.Schemas.ActionErrorKind.Case5Payload)
            /// Account tries to remove an access key that doesn't exist
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6/DeleteKeyDoesNotExist`.
                public struct DeleteKeyDoesNotExistPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6/DeleteKeyDoesNotExist/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6/DeleteKeyDoesNotExist/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `DeleteKeyDoesNotExistPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6/DeleteKeyDoesNotExist`.
                public var DeleteKeyDoesNotExist: Components.Schemas.ActionErrorKind.Case6Payload.DeleteKeyDoesNotExistPayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - DeleteKeyDoesNotExist:
                public init(DeleteKeyDoesNotExist: Components.Schemas.ActionErrorKind.Case6Payload.DeleteKeyDoesNotExistPayload) {
                    self.DeleteKeyDoesNotExist = DeleteKeyDoesNotExist
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteKeyDoesNotExist
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteKeyDoesNotExist = try container.decode(
                        Components.Schemas.ActionErrorKind.Case6Payload.DeleteKeyDoesNotExistPayload.self,
                        forKey: .DeleteKeyDoesNotExist
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteKeyDoesNotExist"
                    ])
                }
            }
            /// Account tries to remove an access key that doesn't exist
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case6`.
            case case6(Components.Schemas.ActionErrorKind.Case6Payload)
            /// The public key is already used for an existing access key
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7/AddKeyAlreadyExists`.
                public struct AddKeyAlreadyExistsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7/AddKeyAlreadyExists/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7/AddKeyAlreadyExists/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `AddKeyAlreadyExistsPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7/AddKeyAlreadyExists`.
                public var AddKeyAlreadyExists: Components.Schemas.ActionErrorKind.Case7Payload.AddKeyAlreadyExistsPayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - AddKeyAlreadyExists:
                public init(AddKeyAlreadyExists: Components.Schemas.ActionErrorKind.Case7Payload.AddKeyAlreadyExistsPayload) {
                    self.AddKeyAlreadyExists = AddKeyAlreadyExists
                }
                public enum CodingKeys: String, CodingKey {
                    case AddKeyAlreadyExists
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AddKeyAlreadyExists = try container.decode(
                        Components.Schemas.ActionErrorKind.Case7Payload.AddKeyAlreadyExistsPayload.self,
                        forKey: .AddKeyAlreadyExists
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AddKeyAlreadyExists"
                    ])
                }
            }
            /// The public key is already used for an existing access key
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case7`.
            case case7(Components.Schemas.ActionErrorKind.Case7Payload)
            /// Account is staking and can not be deleted
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case8/DeleteAccountStaking`.
                public struct DeleteAccountStakingPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case8/DeleteAccountStaking/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `DeleteAccountStakingPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case8/DeleteAccountStaking`.
                public var DeleteAccountStaking: Components.Schemas.ActionErrorKind.Case8Payload.DeleteAccountStakingPayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - DeleteAccountStaking:
                public init(DeleteAccountStaking: Components.Schemas.ActionErrorKind.Case8Payload.DeleteAccountStakingPayload) {
                    self.DeleteAccountStaking = DeleteAccountStaking
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteAccountStaking
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteAccountStaking = try container.decode(
                        Components.Schemas.ActionErrorKind.Case8Payload.DeleteAccountStakingPayload.self,
                        forKey: .DeleteAccountStaking
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteAccountStaking"
                    ])
                }
            }
            /// Account is staking and can not be deleted
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case8`.
            case case8(Components.Schemas.ActionErrorKind.Case8Payload)
            /// ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState`.
                public struct LackBalanceForStatePayload: Codable, Hashable, Sendable {
                    /// An account which needs balance
                    ///
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/account_id`.
                    public struct account_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/account_id/value1`.
                        public var value1: Components.Schemas.AccountId
                        /// Creates a new `account_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Components.Schemas.AccountId) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeToSingleValueContainer(self.value1)
                        }
                    }
                    /// An account which needs balance
                    ///
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/account_id`.
                    public var account_id: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload.account_idPayload
                    /// Balance required to complete an action.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/amount`.
                    public struct amountPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/amount/value1`.
                        public var value1: Components.Schemas.NearToken
                        /// Creates a new `amountPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Components.Schemas.NearToken) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeToSingleValueContainer(self.value1)
                        }
                    }
                    /// Balance required to complete an action.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState/amount`.
                    public var amount: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload.amountPayload
                    /// Creates a new `LackBalanceForStatePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id: An account which needs balance
                    ///   - amount: Balance required to complete an action.
                    public init(
                        account_id: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload.account_idPayload,
                        amount: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload.amountPayload
                    ) {
                        self.account_id = account_id
                        self.amount = amount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case amount
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9/LackBalanceForState`.
                public var LackBalanceForState: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - LackBalanceForState:
                public init(LackBalanceForState: Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload) {
                    self.LackBalanceForState = LackBalanceForState
                }
                public enum CodingKeys: String, CodingKey {
                    case LackBalanceForState
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.LackBalanceForState = try container.decode(
                        Components.Schemas.ActionErrorKind.Case9Payload.LackBalanceForStatePayload.self,
                        forKey: .LackBalanceForState
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "LackBalanceForState"
                    ])
                }
            }
            /// ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case9`.
            case case9(Components.Schemas.ActionErrorKind.Case9Payload)
            /// Account is not yet staked, but tries to unstake
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case10/TriesToUnstake`.
                public struct TriesToUnstakePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case10/TriesToUnstake/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `TriesToUnstakePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case10/TriesToUnstake`.
                public var TriesToUnstake: Components.Schemas.ActionErrorKind.Case10Payload.TriesToUnstakePayload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - TriesToUnstake:
                public init(TriesToUnstake: Components.Schemas.ActionErrorKind.Case10Payload.TriesToUnstakePayload) {
                    self.TriesToUnstake = TriesToUnstake
                }
                public enum CodingKeys: String, CodingKey {
                    case TriesToUnstake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TriesToUnstake = try container.decode(
                        Components.Schemas.ActionErrorKind.Case10Payload.TriesToUnstakePayload.self,
                        forKey: .TriesToUnstake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TriesToUnstake"
                    ])
                }
            }
            /// Account is not yet staked, but tries to unstake
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case10`.
            case case10(Components.Schemas.ActionErrorKind.Case10Payload)
            /// The account doesn't have enough balance to increase the stake.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake`.
                public struct TriesToStakePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake/balance`.
                    public var balance: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake/locked`.
                    public var locked: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake/stake`.
                    public var stake: Components.Schemas.NearToken
                    /// Creates a new `TriesToStakePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - balance:
                    ///   - locked:
                    ///   - stake:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        balance: Components.Schemas.NearToken,
                        locked: Components.Schemas.NearToken,
                        stake: Components.Schemas.NearToken
                    ) {
                        self.account_id = account_id
                        self.balance = balance
                        self.locked = locked
                        self.stake = stake
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case balance
                        case locked
                        case stake
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11/TriesToStake`.
                public var TriesToStake: Components.Schemas.ActionErrorKind.Case11Payload.TriesToStakePayload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - TriesToStake:
                public init(TriesToStake: Components.Schemas.ActionErrorKind.Case11Payload.TriesToStakePayload) {
                    self.TriesToStake = TriesToStake
                }
                public enum CodingKeys: String, CodingKey {
                    case TriesToStake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TriesToStake = try container.decode(
                        Components.Schemas.ActionErrorKind.Case11Payload.TriesToStakePayload.self,
                        forKey: .TriesToStake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TriesToStake"
                    ])
                }
            }
            /// The account doesn't have enough balance to increase the stake.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case11`.
            case case11(Components.Schemas.ActionErrorKind.Case11Payload)
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12/InsufficientStake`.
                public struct InsufficientStakePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12/InsufficientStake/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12/InsufficientStake/minimum_stake`.
                    public var minimum_stake: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12/InsufficientStake/stake`.
                    public var stake: Components.Schemas.NearToken
                    /// Creates a new `InsufficientStakePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - minimum_stake:
                    ///   - stake:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        minimum_stake: Components.Schemas.NearToken,
                        stake: Components.Schemas.NearToken
                    ) {
                        self.account_id = account_id
                        self.minimum_stake = minimum_stake
                        self.stake = stake
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case minimum_stake
                        case stake
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12/InsufficientStake`.
                public var InsufficientStake: Components.Schemas.ActionErrorKind.Case12Payload.InsufficientStakePayload
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - InsufficientStake:
                public init(InsufficientStake: Components.Schemas.ActionErrorKind.Case12Payload.InsufficientStakePayload) {
                    self.InsufficientStake = InsufficientStake
                }
                public enum CodingKeys: String, CodingKey {
                    case InsufficientStake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InsufficientStake = try container.decode(
                        Components.Schemas.ActionErrorKind.Case12Payload.InsufficientStakePayload.self,
                        forKey: .InsufficientStake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InsufficientStake"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case12`.
            case case12(Components.Schemas.ActionErrorKind.Case12Payload)
            /// An error occurred during a `FunctionCall` Action, parameter is debug message.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case13/FunctionCallError`.
                public var FunctionCallError: Components.Schemas.FunctionCallError
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCallError:
                public init(FunctionCallError: Components.Schemas.FunctionCallError) {
                    self.FunctionCallError = FunctionCallError
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCallError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCallError = try container.decode(
                        Components.Schemas.FunctionCallError.self,
                        forKey: .FunctionCallError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCallError"
                    ])
                }
            }
            /// An error occurred during a `FunctionCall` Action, parameter is debug message.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case13`.
            case case13(Components.Schemas.ActionErrorKind.Case13Payload)
            /// Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails
            /// receipt validation.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case14/NewReceiptValidationError`.
                public var NewReceiptValidationError: Components.Schemas.ReceiptValidationError
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - NewReceiptValidationError:
                public init(NewReceiptValidationError: Components.Schemas.ReceiptValidationError) {
                    self.NewReceiptValidationError = NewReceiptValidationError
                }
                public enum CodingKeys: String, CodingKey {
                    case NewReceiptValidationError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NewReceiptValidationError = try container.decode(
                        Components.Schemas.ReceiptValidationError.self,
                        forKey: .NewReceiptValidationError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NewReceiptValidationError"
                    ])
                }
            }
            /// Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails
            /// receipt validation.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case14`.
            case case14(Components.Schemas.ActionErrorKind.Case14Payload)
            /// Error occurs when a `CreateAccount` action is called on a NEAR-implicit or ETH-implicit account.
            /// See NEAR-implicit account creation NEP: <https://github.com/nearprotocol/NEPs/pull/71>.
            /// Also, see ETH-implicit account creation NEP: <https://github.com/near/NEPs/issues/518>.
            ///
            /// TODO(#8598): This error is named very poorly. A better name would be
            /// `OnlyNamedAccountCreationAllowed`.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case15`.
            public struct Case15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case15/OnlyImplicitAccountCreationAllowed`.
                public struct OnlyImplicitAccountCreationAllowedPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case15/OnlyImplicitAccountCreationAllowed/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `OnlyImplicitAccountCreationAllowedPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case15/OnlyImplicitAccountCreationAllowed`.
                public var OnlyImplicitAccountCreationAllowed: Components.Schemas.ActionErrorKind.Case15Payload.OnlyImplicitAccountCreationAllowedPayload
                /// Creates a new `Case15Payload`.
                ///
                /// - Parameters:
                ///   - OnlyImplicitAccountCreationAllowed:
                public init(OnlyImplicitAccountCreationAllowed: Components.Schemas.ActionErrorKind.Case15Payload.OnlyImplicitAccountCreationAllowedPayload) {
                    self.OnlyImplicitAccountCreationAllowed = OnlyImplicitAccountCreationAllowed
                }
                public enum CodingKeys: String, CodingKey {
                    case OnlyImplicitAccountCreationAllowed
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.OnlyImplicitAccountCreationAllowed = try container.decode(
                        Components.Schemas.ActionErrorKind.Case15Payload.OnlyImplicitAccountCreationAllowedPayload.self,
                        forKey: .OnlyImplicitAccountCreationAllowed
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "OnlyImplicitAccountCreationAllowed"
                    ])
                }
            }
            /// Error occurs when a `CreateAccount` action is called on a NEAR-implicit or ETH-implicit account.
            /// See NEAR-implicit account creation NEP: <https://github.com/nearprotocol/NEPs/pull/71>.
            /// Also, see ETH-implicit account creation NEP: <https://github.com/near/NEPs/issues/518>.
            ///
            /// TODO(#8598): This error is named very poorly. A better name would be
            /// `OnlyNamedAccountCreationAllowed`.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case15`.
            case case15(Components.Schemas.ActionErrorKind.Case15Payload)
            /// Delete account whose state is large is temporarily banned.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case16/DeleteAccountWithLargeState`.
                public struct DeleteAccountWithLargeStatePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case16/DeleteAccountWithLargeState/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `DeleteAccountWithLargeStatePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case16/DeleteAccountWithLargeState`.
                public var DeleteAccountWithLargeState: Components.Schemas.ActionErrorKind.Case16Payload.DeleteAccountWithLargeStatePayload
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - DeleteAccountWithLargeState:
                public init(DeleteAccountWithLargeState: Components.Schemas.ActionErrorKind.Case16Payload.DeleteAccountWithLargeStatePayload) {
                    self.DeleteAccountWithLargeState = DeleteAccountWithLargeState
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteAccountWithLargeState
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteAccountWithLargeState = try container.decode(
                        Components.Schemas.ActionErrorKind.Case16Payload.DeleteAccountWithLargeStatePayload.self,
                        forKey: .DeleteAccountWithLargeState
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteAccountWithLargeState"
                    ])
                }
            }
            /// Delete account whose state is large is temporarily banned.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case16`.
            case case16(Components.Schemas.ActionErrorKind.Case16Payload)
            /// Signature does not match the provided actions and given signer public key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case17`.
            @frozen public enum Case17Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DelegateActionInvalidSignature = "DelegateActionInvalidSignature"
            }
            /// Signature does not match the provided actions and given signer public key.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case17`.
            case case17(Components.Schemas.ActionErrorKind.Case17Payload)
            /// Receiver of the transaction doesn't match Sender of the delegate action
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18`.
            public struct Case18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18/DelegateActionSenderDoesNotMatchTxReceiver`.
                public struct DelegateActionSenderDoesNotMatchTxReceiverPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18/DelegateActionSenderDoesNotMatchTxReceiver/receiver_id`.
                    public var receiver_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18/DelegateActionSenderDoesNotMatchTxReceiver/sender_id`.
                    public var sender_id: Components.Schemas.AccountId
                    /// Creates a new `DelegateActionSenderDoesNotMatchTxReceiverPayload`.
                    ///
                    /// - Parameters:
                    ///   - receiver_id:
                    ///   - sender_id:
                    public init(
                        receiver_id: Components.Schemas.AccountId,
                        sender_id: Components.Schemas.AccountId
                    ) {
                        self.receiver_id = receiver_id
                        self.sender_id = sender_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case receiver_id
                        case sender_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18/DelegateActionSenderDoesNotMatchTxReceiver`.
                public var DelegateActionSenderDoesNotMatchTxReceiver: Components.Schemas.ActionErrorKind.Case18Payload.DelegateActionSenderDoesNotMatchTxReceiverPayload
                /// Creates a new `Case18Payload`.
                ///
                /// - Parameters:
                ///   - DelegateActionSenderDoesNotMatchTxReceiver:
                public init(DelegateActionSenderDoesNotMatchTxReceiver: Components.Schemas.ActionErrorKind.Case18Payload.DelegateActionSenderDoesNotMatchTxReceiverPayload) {
                    self.DelegateActionSenderDoesNotMatchTxReceiver = DelegateActionSenderDoesNotMatchTxReceiver
                }
                public enum CodingKeys: String, CodingKey {
                    case DelegateActionSenderDoesNotMatchTxReceiver
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DelegateActionSenderDoesNotMatchTxReceiver = try container.decode(
                        Components.Schemas.ActionErrorKind.Case18Payload.DelegateActionSenderDoesNotMatchTxReceiverPayload.self,
                        forKey: .DelegateActionSenderDoesNotMatchTxReceiver
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DelegateActionSenderDoesNotMatchTxReceiver"
                    ])
                }
            }
            /// Receiver of the transaction doesn't match Sender of the delegate action
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case18`.
            case case18(Components.Schemas.ActionErrorKind.Case18Payload)
            /// Delegate action has expired. `max_block_height` is less than actual block height.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case19`.
            @frozen public enum Case19Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DelegateActionExpired = "DelegateActionExpired"
            }
            /// Delegate action has expired. `max_block_height` is less than actual block height.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case19`.
            case case19(Components.Schemas.ActionErrorKind.Case19Payload)
            /// The given public key doesn't exist for Sender account
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case20`.
            public struct Case20Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case20/DelegateActionAccessKeyError`.
                public var DelegateActionAccessKeyError: Components.Schemas.InvalidAccessKeyError
                /// Creates a new `Case20Payload`.
                ///
                /// - Parameters:
                ///   - DelegateActionAccessKeyError:
                public init(DelegateActionAccessKeyError: Components.Schemas.InvalidAccessKeyError) {
                    self.DelegateActionAccessKeyError = DelegateActionAccessKeyError
                }
                public enum CodingKeys: String, CodingKey {
                    case DelegateActionAccessKeyError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DelegateActionAccessKeyError = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.self,
                        forKey: .DelegateActionAccessKeyError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DelegateActionAccessKeyError"
                    ])
                }
            }
            /// The given public key doesn't exist for Sender account
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case20`.
            case case20(Components.Schemas.ActionErrorKind.Case20Payload)
            /// DelegateAction nonce must be greater sender[public_key].nonce
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21`.
            public struct Case21Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21/DelegateActionInvalidNonce`.
                public struct DelegateActionInvalidNoncePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21/DelegateActionInvalidNonce/ak_nonce`.
                    public var ak_nonce: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21/DelegateActionInvalidNonce/delegate_nonce`.
                    public var delegate_nonce: Swift.Int
                    /// Creates a new `DelegateActionInvalidNoncePayload`.
                    ///
                    /// - Parameters:
                    ///   - ak_nonce:
                    ///   - delegate_nonce:
                    public init(
                        ak_nonce: Swift.Int,
                        delegate_nonce: Swift.Int
                    ) {
                        self.ak_nonce = ak_nonce
                        self.delegate_nonce = delegate_nonce
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ak_nonce
                        case delegate_nonce
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21/DelegateActionInvalidNonce`.
                public var DelegateActionInvalidNonce: Components.Schemas.ActionErrorKind.Case21Payload.DelegateActionInvalidNoncePayload
                /// Creates a new `Case21Payload`.
                ///
                /// - Parameters:
                ///   - DelegateActionInvalidNonce:
                public init(DelegateActionInvalidNonce: Components.Schemas.ActionErrorKind.Case21Payload.DelegateActionInvalidNoncePayload) {
                    self.DelegateActionInvalidNonce = DelegateActionInvalidNonce
                }
                public enum CodingKeys: String, CodingKey {
                    case DelegateActionInvalidNonce
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DelegateActionInvalidNonce = try container.decode(
                        Components.Schemas.ActionErrorKind.Case21Payload.DelegateActionInvalidNoncePayload.self,
                        forKey: .DelegateActionInvalidNonce
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DelegateActionInvalidNonce"
                    ])
                }
            }
            /// DelegateAction nonce must be greater sender[public_key].nonce
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case21`.
            case case21(Components.Schemas.ActionErrorKind.Case21Payload)
            /// DelegateAction nonce is larger than the upper bound given by the block height
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22`.
            public struct Case22Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22/DelegateActionNonceTooLarge`.
                public struct DelegateActionNonceTooLargePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22/DelegateActionNonceTooLarge/delegate_nonce`.
                    public var delegate_nonce: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22/DelegateActionNonceTooLarge/upper_bound`.
                    public var upper_bound: Swift.Int
                    /// Creates a new `DelegateActionNonceTooLargePayload`.
                    ///
                    /// - Parameters:
                    ///   - delegate_nonce:
                    ///   - upper_bound:
                    public init(
                        delegate_nonce: Swift.Int,
                        upper_bound: Swift.Int
                    ) {
                        self.delegate_nonce = delegate_nonce
                        self.upper_bound = upper_bound
                    }
                    public enum CodingKeys: String, CodingKey {
                        case delegate_nonce
                        case upper_bound
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22/DelegateActionNonceTooLarge`.
                public var DelegateActionNonceTooLarge: Components.Schemas.ActionErrorKind.Case22Payload.DelegateActionNonceTooLargePayload
                /// Creates a new `Case22Payload`.
                ///
                /// - Parameters:
                ///   - DelegateActionNonceTooLarge:
                public init(DelegateActionNonceTooLarge: Components.Schemas.ActionErrorKind.Case22Payload.DelegateActionNonceTooLargePayload) {
                    self.DelegateActionNonceTooLarge = DelegateActionNonceTooLarge
                }
                public enum CodingKeys: String, CodingKey {
                    case DelegateActionNonceTooLarge
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DelegateActionNonceTooLarge = try container.decode(
                        Components.Schemas.ActionErrorKind.Case22Payload.DelegateActionNonceTooLargePayload.self,
                        forKey: .DelegateActionNonceTooLarge
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DelegateActionNonceTooLarge"
                    ])
                }
            }
            /// DelegateAction nonce is larger than the upper bound given by the block height
            ///
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case22`.
            case case22(Components.Schemas.ActionErrorKind.Case22Payload)
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case23`.
            public struct Case23Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case23/GlobalContractDoesNotExist`.
                public struct GlobalContractDoesNotExistPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case23/GlobalContractDoesNotExist/identifier`.
                    public var identifier: Components.Schemas.GlobalContractIdentifier
                    /// Creates a new `GlobalContractDoesNotExistPayload`.
                    ///
                    /// - Parameters:
                    ///   - identifier:
                    public init(identifier: Components.Schemas.GlobalContractIdentifier) {
                        self.identifier = identifier
                    }
                    public enum CodingKeys: String, CodingKey {
                        case identifier
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case23/GlobalContractDoesNotExist`.
                public var GlobalContractDoesNotExist: Components.Schemas.ActionErrorKind.Case23Payload.GlobalContractDoesNotExistPayload
                /// Creates a new `Case23Payload`.
                ///
                /// - Parameters:
                ///   - GlobalContractDoesNotExist:
                public init(GlobalContractDoesNotExist: Components.Schemas.ActionErrorKind.Case23Payload.GlobalContractDoesNotExistPayload) {
                    self.GlobalContractDoesNotExist = GlobalContractDoesNotExist
                }
                public enum CodingKeys: String, CodingKey {
                    case GlobalContractDoesNotExist
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.GlobalContractDoesNotExist = try container.decode(
                        Components.Schemas.ActionErrorKind.Case23Payload.GlobalContractDoesNotExistPayload.self,
                        forKey: .GlobalContractDoesNotExist
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "GlobalContractDoesNotExist"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionErrorKind/case23`.
            case case23(Components.Schemas.ActionErrorKind.Case23Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case19(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case20(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case21(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case22(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case23(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case18(value):
                    try value.encode(to: encoder)
                case let .case19(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case20(value):
                    try value.encode(to: encoder)
                case let .case21(value):
                    try value.encode(to: encoder)
                case let .case22(value):
                    try value.encode(to: encoder)
                case let .case23(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActionView`.
        @frozen public enum ActionView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActionView/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CreateAccount = "CreateAccount"
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case1`.
            case case1(Components.Schemas.ActionView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case2/DeployContract`.
                public struct DeployContractPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case2/DeployContract/code`.
                    public var code: Swift.String
                    /// Creates a new `DeployContractPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.String) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case2/DeployContract`.
                public var DeployContract: Components.Schemas.ActionView.Case2Payload.DeployContractPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - DeployContract:
                public init(DeployContract: Components.Schemas.ActionView.Case2Payload.DeployContractPayload) {
                    self.DeployContract = DeployContract
                }
                public enum CodingKeys: String, CodingKey {
                    case DeployContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeployContract = try container.decode(
                        Components.Schemas.ActionView.Case2Payload.DeployContractPayload.self,
                        forKey: .DeployContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeployContract"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case2`.
            case case2(Components.Schemas.ActionView.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall`.
                public struct FunctionCallPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall/args`.
                    public var args: Components.Schemas.FunctionArgs
                    /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall/deposit`.
                    public var deposit: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall/gas`.
                    public var gas: Components.Schemas.NearGas
                    /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall/method_name`.
                    public var method_name: Swift.String
                    /// Creates a new `FunctionCallPayload`.
                    ///
                    /// - Parameters:
                    ///   - args:
                    ///   - deposit:
                    ///   - gas:
                    ///   - method_name:
                    public init(
                        args: Components.Schemas.FunctionArgs,
                        deposit: Components.Schemas.NearToken,
                        gas: Components.Schemas.NearGas,
                        method_name: Swift.String
                    ) {
                        self.args = args
                        self.deposit = deposit
                        self.gas = gas
                        self.method_name = method_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case args
                        case deposit
                        case gas
                        case method_name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case3/FunctionCall`.
                public var FunctionCall: Components.Schemas.ActionView.Case3Payload.FunctionCallPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCall:
                public init(FunctionCall: Components.Schemas.ActionView.Case3Payload.FunctionCallPayload) {
                    self.FunctionCall = FunctionCall
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCall
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCall = try container.decode(
                        Components.Schemas.ActionView.Case3Payload.FunctionCallPayload.self,
                        forKey: .FunctionCall
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCall"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case3`.
            case case3(Components.Schemas.ActionView.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case4/Transfer`.
                public struct TransferPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case4/Transfer/deposit`.
                    public var deposit: Components.Schemas.NearToken
                    /// Creates a new `TransferPayload`.
                    ///
                    /// - Parameters:
                    ///   - deposit:
                    public init(deposit: Components.Schemas.NearToken) {
                        self.deposit = deposit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case deposit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case4/Transfer`.
                public var Transfer: Components.Schemas.ActionView.Case4Payload.TransferPayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - Transfer:
                public init(Transfer: Components.Schemas.ActionView.Case4Payload.TransferPayload) {
                    self.Transfer = Transfer
                }
                public enum CodingKeys: String, CodingKey {
                    case Transfer
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Transfer = try container.decode(
                        Components.Schemas.ActionView.Case4Payload.TransferPayload.self,
                        forKey: .Transfer
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Transfer"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case4`.
            case case4(Components.Schemas.ActionView.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case5/Stake`.
                public struct StakePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case5/Stake/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// - Remark: Generated from `#/components/schemas/ActionView/case5/Stake/stake`.
                    public var stake: Components.Schemas.NearToken
                    /// Creates a new `StakePayload`.
                    ///
                    /// - Parameters:
                    ///   - public_key:
                    ///   - stake:
                    public init(
                        public_key: Components.Schemas.PublicKey,
                        stake: Components.Schemas.NearToken
                    ) {
                        self.public_key = public_key
                        self.stake = stake
                    }
                    public enum CodingKeys: String, CodingKey {
                        case public_key
                        case stake
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case5/Stake`.
                public var Stake: Components.Schemas.ActionView.Case5Payload.StakePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - Stake:
                public init(Stake: Components.Schemas.ActionView.Case5Payload.StakePayload) {
                    self.Stake = Stake
                }
                public enum CodingKeys: String, CodingKey {
                    case Stake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Stake = try container.decode(
                        Components.Schemas.ActionView.Case5Payload.StakePayload.self,
                        forKey: .Stake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Stake"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case5`.
            case case5(Components.Schemas.ActionView.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case6/AddKey`.
                public struct AddKeyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case6/AddKey/access_key`.
                    public var access_key: Components.Schemas.AccessKeyView
                    /// - Remark: Generated from `#/components/schemas/ActionView/case6/AddKey/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `AddKeyPayload`.
                    ///
                    /// - Parameters:
                    ///   - access_key:
                    ///   - public_key:
                    public init(
                        access_key: Components.Schemas.AccessKeyView,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.access_key = access_key
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_key
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case6/AddKey`.
                public var AddKey: Components.Schemas.ActionView.Case6Payload.AddKeyPayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - AddKey:
                public init(AddKey: Components.Schemas.ActionView.Case6Payload.AddKeyPayload) {
                    self.AddKey = AddKey
                }
                public enum CodingKeys: String, CodingKey {
                    case AddKey
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AddKey = try container.decode(
                        Components.Schemas.ActionView.Case6Payload.AddKeyPayload.self,
                        forKey: .AddKey
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AddKey"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case6`.
            case case6(Components.Schemas.ActionView.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case7/DeleteKey`.
                public struct DeleteKeyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case7/DeleteKey/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `DeleteKeyPayload`.
                    ///
                    /// - Parameters:
                    ///   - public_key:
                    public init(public_key: Components.Schemas.PublicKey) {
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case7/DeleteKey`.
                public var DeleteKey: Components.Schemas.ActionView.Case7Payload.DeleteKeyPayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - DeleteKey:
                public init(DeleteKey: Components.Schemas.ActionView.Case7Payload.DeleteKeyPayload) {
                    self.DeleteKey = DeleteKey
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteKey
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteKey = try container.decode(
                        Components.Schemas.ActionView.Case7Payload.DeleteKeyPayload.self,
                        forKey: .DeleteKey
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteKey"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case7`.
            case case7(Components.Schemas.ActionView.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case8/DeleteAccount`.
                public struct DeleteAccountPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case8/DeleteAccount/beneficiary_id`.
                    public var beneficiary_id: Components.Schemas.AccountId
                    /// Creates a new `DeleteAccountPayload`.
                    ///
                    /// - Parameters:
                    ///   - beneficiary_id:
                    public init(beneficiary_id: Components.Schemas.AccountId) {
                        self.beneficiary_id = beneficiary_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case beneficiary_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case8/DeleteAccount`.
                public var DeleteAccount: Components.Schemas.ActionView.Case8Payload.DeleteAccountPayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - DeleteAccount:
                public init(DeleteAccount: Components.Schemas.ActionView.Case8Payload.DeleteAccountPayload) {
                    self.DeleteAccount = DeleteAccount
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteAccount
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteAccount = try container.decode(
                        Components.Schemas.ActionView.Case8Payload.DeleteAccountPayload.self,
                        forKey: .DeleteAccount
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteAccount"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case8`.
            case case8(Components.Schemas.ActionView.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case9/Delegate`.
                public struct DelegatePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case9/Delegate/delegate_action`.
                    public var delegate_action: Components.Schemas.DelegateAction
                    /// - Remark: Generated from `#/components/schemas/ActionView/case9/Delegate/signature`.
                    public var signature: Components.Schemas.Signature
                    /// Creates a new `DelegatePayload`.
                    ///
                    /// - Parameters:
                    ///   - delegate_action:
                    ///   - signature:
                    public init(
                        delegate_action: Components.Schemas.DelegateAction,
                        signature: Components.Schemas.Signature
                    ) {
                        self.delegate_action = delegate_action
                        self.signature = signature
                    }
                    public enum CodingKeys: String, CodingKey {
                        case delegate_action
                        case signature
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case9/Delegate`.
                public var Delegate: Components.Schemas.ActionView.Case9Payload.DelegatePayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - Delegate:
                public init(Delegate: Components.Schemas.ActionView.Case9Payload.DelegatePayload) {
                    self.Delegate = Delegate
                }
                public enum CodingKeys: String, CodingKey {
                    case Delegate
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Delegate = try container.decode(
                        Components.Schemas.ActionView.Case9Payload.DelegatePayload.self,
                        forKey: .Delegate
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Delegate"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case9`.
            case case9(Components.Schemas.ActionView.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case10/DeployGlobalContract`.
                public struct DeployGlobalContractPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case10/DeployGlobalContract/code`.
                    public var code: Swift.String
                    /// Creates a new `DeployGlobalContractPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.String) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case10/DeployGlobalContract`.
                public var DeployGlobalContract: Components.Schemas.ActionView.Case10Payload.DeployGlobalContractPayload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - DeployGlobalContract:
                public init(DeployGlobalContract: Components.Schemas.ActionView.Case10Payload.DeployGlobalContractPayload) {
                    self.DeployGlobalContract = DeployGlobalContract
                }
                public enum CodingKeys: String, CodingKey {
                    case DeployGlobalContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeployGlobalContract = try container.decode(
                        Components.Schemas.ActionView.Case10Payload.DeployGlobalContractPayload.self,
                        forKey: .DeployGlobalContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeployGlobalContract"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case10`.
            case case10(Components.Schemas.ActionView.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case11/DeployGlobalContractByAccountId`.
                public struct DeployGlobalContractByAccountIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case11/DeployGlobalContractByAccountId/code`.
                    public var code: Swift.String
                    /// Creates a new `DeployGlobalContractByAccountIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    public init(code: Swift.String) {
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case11/DeployGlobalContractByAccountId`.
                public var DeployGlobalContractByAccountId: Components.Schemas.ActionView.Case11Payload.DeployGlobalContractByAccountIdPayload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - DeployGlobalContractByAccountId:
                public init(DeployGlobalContractByAccountId: Components.Schemas.ActionView.Case11Payload.DeployGlobalContractByAccountIdPayload) {
                    self.DeployGlobalContractByAccountId = DeployGlobalContractByAccountId
                }
                public enum CodingKeys: String, CodingKey {
                    case DeployGlobalContractByAccountId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeployGlobalContractByAccountId = try container.decode(
                        Components.Schemas.ActionView.Case11Payload.DeployGlobalContractByAccountIdPayload.self,
                        forKey: .DeployGlobalContractByAccountId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeployGlobalContractByAccountId"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case11`.
            case case11(Components.Schemas.ActionView.Case11Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case12/UseGlobalContract`.
                public struct UseGlobalContractPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case12/UseGlobalContract/code_hash`.
                    public var code_hash: Components.Schemas.CryptoHash
                    /// Creates a new `UseGlobalContractPayload`.
                    ///
                    /// - Parameters:
                    ///   - code_hash:
                    public init(code_hash: Components.Schemas.CryptoHash) {
                        self.code_hash = code_hash
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code_hash
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case12/UseGlobalContract`.
                public var UseGlobalContract: Components.Schemas.ActionView.Case12Payload.UseGlobalContractPayload
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - UseGlobalContract:
                public init(UseGlobalContract: Components.Schemas.ActionView.Case12Payload.UseGlobalContractPayload) {
                    self.UseGlobalContract = UseGlobalContract
                }
                public enum CodingKeys: String, CodingKey {
                    case UseGlobalContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.UseGlobalContract = try container.decode(
                        Components.Schemas.ActionView.Case12Payload.UseGlobalContractPayload.self,
                        forKey: .UseGlobalContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "UseGlobalContract"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case12`.
            case case12(Components.Schemas.ActionView.Case12Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case13/UseGlobalContractByAccountId`.
                public struct UseGlobalContractByAccountIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case13/UseGlobalContractByAccountId/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `UseGlobalContractByAccountIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case13/UseGlobalContractByAccountId`.
                public var UseGlobalContractByAccountId: Components.Schemas.ActionView.Case13Payload.UseGlobalContractByAccountIdPayload
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - UseGlobalContractByAccountId:
                public init(UseGlobalContractByAccountId: Components.Schemas.ActionView.Case13Payload.UseGlobalContractByAccountIdPayload) {
                    self.UseGlobalContractByAccountId = UseGlobalContractByAccountId
                }
                public enum CodingKeys: String, CodingKey {
                    case UseGlobalContractByAccountId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.UseGlobalContractByAccountId = try container.decode(
                        Components.Schemas.ActionView.Case13Payload.UseGlobalContractByAccountIdPayload.self,
                        forKey: .UseGlobalContractByAccountId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "UseGlobalContractByAccountId"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case13`.
            case case13(Components.Schemas.ActionView.Case13Payload)
            /// - Remark: Generated from `#/components/schemas/ActionView/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit`.
                public struct DeterministicStateInitPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit/code`.
                    public var code: Components.Schemas.GlobalContractIdentifierView
                    /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit/data`.
                    public struct dataPayload: Codable, Hashable, Sendable {
                        /// A container of undocumented properties.
                        public var additionalProperties: [String: Swift.String]
                        /// Creates a new `dataPayload`.
                        ///
                        /// - Parameters:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(additionalProperties: [String: Swift.String] = .init()) {
                            self.additionalProperties = additionalProperties
                        }
                        public init(from decoder: any Decoder) throws {
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit/data`.
                    public var data: Components.Schemas.ActionView.Case14Payload.DeterministicStateInitPayload.dataPayload
                    /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit/deposit`.
                    public var deposit: Components.Schemas.NearToken
                    /// Creates a new `DeterministicStateInitPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - data:
                    ///   - deposit:
                    public init(
                        code: Components.Schemas.GlobalContractIdentifierView,
                        data: Components.Schemas.ActionView.Case14Payload.DeterministicStateInitPayload.dataPayload,
                        deposit: Components.Schemas.NearToken
                    ) {
                        self.code = code
                        self.data = data
                        self.deposit = deposit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case data
                        case deposit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionView/case14/DeterministicStateInit`.
                public var DeterministicStateInit: Components.Schemas.ActionView.Case14Payload.DeterministicStateInitPayload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - DeterministicStateInit:
                public init(DeterministicStateInit: Components.Schemas.ActionView.Case14Payload.DeterministicStateInitPayload) {
                    self.DeterministicStateInit = DeterministicStateInit
                }
                public enum CodingKeys: String, CodingKey {
                    case DeterministicStateInit
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeterministicStateInit = try container.decode(
                        Components.Schemas.ActionView.Case14Payload.DeterministicStateInitPayload.self,
                        forKey: .DeterministicStateInit
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeterministicStateInit"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionView/case14`.
            case case14(Components.Schemas.ActionView.Case14Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Describes the error for validating a list of actions.
        ///
        /// - Remark: Generated from `#/components/schemas/ActionsValidationError`.
        @frozen public enum ActionsValidationError: Codable, Hashable, Sendable {
            /// The delete action must be a final action in transaction
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DeleteActionMustBeFinal = "DeleteActionMustBeFinal"
            }
            /// The delete action must be a final action in transaction
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case1`.
            case case1(Components.Schemas.ActionsValidationError.Case1Payload)
            /// The total prepaid gas (for all given actions) exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2/TotalPrepaidGasExceeded`.
                public struct TotalPrepaidGasExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2/TotalPrepaidGasExceeded/limit`.
                    public var limit: Components.Schemas.NearGas
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2/TotalPrepaidGasExceeded/total_prepaid_gas`.
                    public var total_prepaid_gas: Components.Schemas.NearGas
                    /// Creates a new `TotalPrepaidGasExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - total_prepaid_gas:
                    public init(
                        limit: Components.Schemas.NearGas,
                        total_prepaid_gas: Components.Schemas.NearGas
                    ) {
                        self.limit = limit
                        self.total_prepaid_gas = total_prepaid_gas
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case total_prepaid_gas
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2/TotalPrepaidGasExceeded`.
                public var TotalPrepaidGasExceeded: Components.Schemas.ActionsValidationError.Case2Payload.TotalPrepaidGasExceededPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - TotalPrepaidGasExceeded:
                public init(TotalPrepaidGasExceeded: Components.Schemas.ActionsValidationError.Case2Payload.TotalPrepaidGasExceededPayload) {
                    self.TotalPrepaidGasExceeded = TotalPrepaidGasExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case TotalPrepaidGasExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TotalPrepaidGasExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case2Payload.TotalPrepaidGasExceededPayload.self,
                        forKey: .TotalPrepaidGasExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TotalPrepaidGasExceeded"
                    ])
                }
            }
            /// The total prepaid gas (for all given actions) exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case2`.
            case case2(Components.Schemas.ActionsValidationError.Case2Payload)
            /// The number of actions exceeded the given limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3/TotalNumberOfActionsExceeded`.
                public struct TotalNumberOfActionsExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3/TotalNumberOfActionsExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3/TotalNumberOfActionsExceeded/total_number_of_actions`.
                    public var total_number_of_actions: Swift.Int
                    /// Creates a new `TotalNumberOfActionsExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - total_number_of_actions:
                    public init(
                        limit: Swift.Int,
                        total_number_of_actions: Swift.Int
                    ) {
                        self.limit = limit
                        self.total_number_of_actions = total_number_of_actions
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case total_number_of_actions
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3/TotalNumberOfActionsExceeded`.
                public var TotalNumberOfActionsExceeded: Components.Schemas.ActionsValidationError.Case3Payload.TotalNumberOfActionsExceededPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - TotalNumberOfActionsExceeded:
                public init(TotalNumberOfActionsExceeded: Components.Schemas.ActionsValidationError.Case3Payload.TotalNumberOfActionsExceededPayload) {
                    self.TotalNumberOfActionsExceeded = TotalNumberOfActionsExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case TotalNumberOfActionsExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TotalNumberOfActionsExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case3Payload.TotalNumberOfActionsExceededPayload.self,
                        forKey: .TotalNumberOfActionsExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TotalNumberOfActionsExceeded"
                    ])
                }
            }
            /// The number of actions exceeded the given limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case3`.
            case case3(Components.Schemas.ActionsValidationError.Case3Payload)
            /// The total number of bytes of the method names exceeded the limit in a Add Key action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4/AddKeyMethodNamesNumberOfBytesExceeded`.
                public struct AddKeyMethodNamesNumberOfBytesExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4/AddKeyMethodNamesNumberOfBytesExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4/AddKeyMethodNamesNumberOfBytesExceeded/total_number_of_bytes`.
                    public var total_number_of_bytes: Swift.Int
                    /// Creates a new `AddKeyMethodNamesNumberOfBytesExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - total_number_of_bytes:
                    public init(
                        limit: Swift.Int,
                        total_number_of_bytes: Swift.Int
                    ) {
                        self.limit = limit
                        self.total_number_of_bytes = total_number_of_bytes
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case total_number_of_bytes
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4/AddKeyMethodNamesNumberOfBytesExceeded`.
                public var AddKeyMethodNamesNumberOfBytesExceeded: Components.Schemas.ActionsValidationError.Case4Payload.AddKeyMethodNamesNumberOfBytesExceededPayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - AddKeyMethodNamesNumberOfBytesExceeded:
                public init(AddKeyMethodNamesNumberOfBytesExceeded: Components.Schemas.ActionsValidationError.Case4Payload.AddKeyMethodNamesNumberOfBytesExceededPayload) {
                    self.AddKeyMethodNamesNumberOfBytesExceeded = AddKeyMethodNamesNumberOfBytesExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case AddKeyMethodNamesNumberOfBytesExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AddKeyMethodNamesNumberOfBytesExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case4Payload.AddKeyMethodNamesNumberOfBytesExceededPayload.self,
                        forKey: .AddKeyMethodNamesNumberOfBytesExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AddKeyMethodNamesNumberOfBytesExceeded"
                    ])
                }
            }
            /// The total number of bytes of the method names exceeded the limit in a Add Key action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case4`.
            case case4(Components.Schemas.ActionsValidationError.Case4Payload)
            /// The length of some method name exceeded the limit in a Add Key action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5/AddKeyMethodNameLengthExceeded`.
                public struct AddKeyMethodNameLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5/AddKeyMethodNameLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5/AddKeyMethodNameLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `AddKeyMethodNameLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5/AddKeyMethodNameLengthExceeded`.
                public var AddKeyMethodNameLengthExceeded: Components.Schemas.ActionsValidationError.Case5Payload.AddKeyMethodNameLengthExceededPayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - AddKeyMethodNameLengthExceeded:
                public init(AddKeyMethodNameLengthExceeded: Components.Schemas.ActionsValidationError.Case5Payload.AddKeyMethodNameLengthExceededPayload) {
                    self.AddKeyMethodNameLengthExceeded = AddKeyMethodNameLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case AddKeyMethodNameLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AddKeyMethodNameLengthExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case5Payload.AddKeyMethodNameLengthExceededPayload.self,
                        forKey: .AddKeyMethodNameLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AddKeyMethodNameLengthExceeded"
                    ])
                }
            }
            /// The length of some method name exceeded the limit in a Add Key action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case5`.
            case case5(Components.Schemas.ActionsValidationError.Case5Payload)
            /// Integer overflow during a compute.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case IntegerOverflow = "IntegerOverflow"
            }
            /// Integer overflow during a compute.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case6`.
            case case6(Components.Schemas.ActionsValidationError.Case6Payload)
            /// Invalid account ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case7/InvalidAccountId`.
                public struct InvalidAccountIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case7/InvalidAccountId/account_id`.
                    public var account_id: Swift.String
                    /// Creates a new `InvalidAccountIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Swift.String) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case7/InvalidAccountId`.
                public var InvalidAccountId: Components.Schemas.ActionsValidationError.Case7Payload.InvalidAccountIdPayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - InvalidAccountId:
                public init(InvalidAccountId: Components.Schemas.ActionsValidationError.Case7Payload.InvalidAccountIdPayload) {
                    self.InvalidAccountId = InvalidAccountId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidAccountId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidAccountId = try container.decode(
                        Components.Schemas.ActionsValidationError.Case7Payload.InvalidAccountIdPayload.self,
                        forKey: .InvalidAccountId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidAccountId"
                    ])
                }
            }
            /// Invalid account ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case7`.
            case case7(Components.Schemas.ActionsValidationError.Case7Payload)
            /// The size of the contract code exceeded the limit in a DeployContract action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8/ContractSizeExceeded`.
                public struct ContractSizeExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8/ContractSizeExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8/ContractSizeExceeded/size`.
                    public var size: Swift.Int
                    /// Creates a new `ContractSizeExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - size:
                    public init(
                        limit: Swift.Int,
                        size: Swift.Int
                    ) {
                        self.limit = limit
                        self.size = size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case size
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8/ContractSizeExceeded`.
                public var ContractSizeExceeded: Components.Schemas.ActionsValidationError.Case8Payload.ContractSizeExceededPayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - ContractSizeExceeded:
                public init(ContractSizeExceeded: Components.Schemas.ActionsValidationError.Case8Payload.ContractSizeExceededPayload) {
                    self.ContractSizeExceeded = ContractSizeExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ContractSizeExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ContractSizeExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case8Payload.ContractSizeExceededPayload.self,
                        forKey: .ContractSizeExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ContractSizeExceeded"
                    ])
                }
            }
            /// The size of the contract code exceeded the limit in a DeployContract action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case8`.
            case case8(Components.Schemas.ActionsValidationError.Case8Payload)
            /// The length of the method name exceeded the limit in a Function Call action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9/FunctionCallMethodNameLengthExceeded`.
                public struct FunctionCallMethodNameLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9/FunctionCallMethodNameLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9/FunctionCallMethodNameLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `FunctionCallMethodNameLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9/FunctionCallMethodNameLengthExceeded`.
                public var FunctionCallMethodNameLengthExceeded: Components.Schemas.ActionsValidationError.Case9Payload.FunctionCallMethodNameLengthExceededPayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCallMethodNameLengthExceeded:
                public init(FunctionCallMethodNameLengthExceeded: Components.Schemas.ActionsValidationError.Case9Payload.FunctionCallMethodNameLengthExceededPayload) {
                    self.FunctionCallMethodNameLengthExceeded = FunctionCallMethodNameLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCallMethodNameLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCallMethodNameLengthExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case9Payload.FunctionCallMethodNameLengthExceededPayload.self,
                        forKey: .FunctionCallMethodNameLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCallMethodNameLengthExceeded"
                    ])
                }
            }
            /// The length of the method name exceeded the limit in a Function Call action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case9`.
            case case9(Components.Schemas.ActionsValidationError.Case9Payload)
            /// The length of the arguments exceeded the limit in a Function Call action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10/FunctionCallArgumentsLengthExceeded`.
                public struct FunctionCallArgumentsLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10/FunctionCallArgumentsLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10/FunctionCallArgumentsLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `FunctionCallArgumentsLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10/FunctionCallArgumentsLengthExceeded`.
                public var FunctionCallArgumentsLengthExceeded: Components.Schemas.ActionsValidationError.Case10Payload.FunctionCallArgumentsLengthExceededPayload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCallArgumentsLengthExceeded:
                public init(FunctionCallArgumentsLengthExceeded: Components.Schemas.ActionsValidationError.Case10Payload.FunctionCallArgumentsLengthExceededPayload) {
                    self.FunctionCallArgumentsLengthExceeded = FunctionCallArgumentsLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCallArgumentsLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCallArgumentsLengthExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case10Payload.FunctionCallArgumentsLengthExceededPayload.self,
                        forKey: .FunctionCallArgumentsLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCallArgumentsLengthExceeded"
                    ])
                }
            }
            /// The length of the arguments exceeded the limit in a Function Call action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case10`.
            case case10(Components.Schemas.ActionsValidationError.Case10Payload)
            /// An attempt to stake with a public key that is not convertible to ristretto.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case11/UnsuitableStakingKey`.
                public struct UnsuitableStakingKeyPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case11/UnsuitableStakingKey/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `UnsuitableStakingKeyPayload`.
                    ///
                    /// - Parameters:
                    ///   - public_key:
                    public init(public_key: Components.Schemas.PublicKey) {
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case11/UnsuitableStakingKey`.
                public var UnsuitableStakingKey: Components.Schemas.ActionsValidationError.Case11Payload.UnsuitableStakingKeyPayload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - UnsuitableStakingKey:
                public init(UnsuitableStakingKey: Components.Schemas.ActionsValidationError.Case11Payload.UnsuitableStakingKeyPayload) {
                    self.UnsuitableStakingKey = UnsuitableStakingKey
                }
                public enum CodingKeys: String, CodingKey {
                    case UnsuitableStakingKey
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.UnsuitableStakingKey = try container.decode(
                        Components.Schemas.ActionsValidationError.Case11Payload.UnsuitableStakingKeyPayload.self,
                        forKey: .UnsuitableStakingKey
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "UnsuitableStakingKey"
                    ])
                }
            }
            /// An attempt to stake with a public key that is not convertible to ristretto.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case11`.
            case case11(Components.Schemas.ActionsValidationError.Case11Payload)
            /// The attached amount of gas in a FunctionCall action has to be a positive number.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case12`.
            @frozen public enum Case12Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case FunctionCallZeroAttachedGas = "FunctionCallZeroAttachedGas"
            }
            /// The attached amount of gas in a FunctionCall action has to be a positive number.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case12`.
            case case12(Components.Schemas.ActionsValidationError.Case12Payload)
            /// There should be the only one DelegateAction
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case13`.
            @frozen public enum Case13Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DelegateActionMustBeOnlyOne = "DelegateActionMustBeOnlyOne"
            }
            /// There should be the only one DelegateAction
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case13`.
            case case13(Components.Schemas.ActionsValidationError.Case13Payload)
            /// The transaction includes a feature that the current protocol version
            /// does not support.
            ///
            /// Note: we stringify the protocol feature name instead of using
            /// `ProtocolFeature` here because we don't want to leak the internals of
            /// that type into observable borsh serialization.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14/UnsupportedProtocolFeature`.
                public struct UnsupportedProtocolFeaturePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14/UnsupportedProtocolFeature/protocol_feature`.
                    public var protocol_feature: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14/UnsupportedProtocolFeature/version`.
                    public var version: Swift.Int
                    /// Creates a new `UnsupportedProtocolFeaturePayload`.
                    ///
                    /// - Parameters:
                    ///   - protocol_feature:
                    ///   - version:
                    public init(
                        protocol_feature: Swift.String,
                        version: Swift.Int
                    ) {
                        self.protocol_feature = protocol_feature
                        self.version = version
                    }
                    public enum CodingKeys: String, CodingKey {
                        case protocol_feature
                        case version
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14/UnsupportedProtocolFeature`.
                public var UnsupportedProtocolFeature: Components.Schemas.ActionsValidationError.Case14Payload.UnsupportedProtocolFeaturePayload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - UnsupportedProtocolFeature:
                public init(UnsupportedProtocolFeature: Components.Schemas.ActionsValidationError.Case14Payload.UnsupportedProtocolFeaturePayload) {
                    self.UnsupportedProtocolFeature = UnsupportedProtocolFeature
                }
                public enum CodingKeys: String, CodingKey {
                    case UnsupportedProtocolFeature
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.UnsupportedProtocolFeature = try container.decode(
                        Components.Schemas.ActionsValidationError.Case14Payload.UnsupportedProtocolFeaturePayload.self,
                        forKey: .UnsupportedProtocolFeature
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "UnsupportedProtocolFeature"
                    ])
                }
            }
            /// The transaction includes a feature that the current protocol version
            /// does not support.
            ///
            /// Note: we stringify the protocol feature name instead of using
            /// `ProtocolFeature` here because we don't want to leak the internals of
            /// that type into observable borsh serialization.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case14`.
            case case14(Components.Schemas.ActionsValidationError.Case14Payload)
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15`.
            public struct Case15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15/InvalidDeterministicStateInitReceiver`.
                public struct InvalidDeterministicStateInitReceiverPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15/InvalidDeterministicStateInitReceiver/derived_id`.
                    public var derived_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15/InvalidDeterministicStateInitReceiver/receiver_id`.
                    public var receiver_id: Components.Schemas.AccountId
                    /// Creates a new `InvalidDeterministicStateInitReceiverPayload`.
                    ///
                    /// - Parameters:
                    ///   - derived_id:
                    ///   - receiver_id:
                    public init(
                        derived_id: Components.Schemas.AccountId,
                        receiver_id: Components.Schemas.AccountId
                    ) {
                        self.derived_id = derived_id
                        self.receiver_id = receiver_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case derived_id
                        case receiver_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15/InvalidDeterministicStateInitReceiver`.
                public var InvalidDeterministicStateInitReceiver: Components.Schemas.ActionsValidationError.Case15Payload.InvalidDeterministicStateInitReceiverPayload
                /// Creates a new `Case15Payload`.
                ///
                /// - Parameters:
                ///   - InvalidDeterministicStateInitReceiver:
                public init(InvalidDeterministicStateInitReceiver: Components.Schemas.ActionsValidationError.Case15Payload.InvalidDeterministicStateInitReceiverPayload) {
                    self.InvalidDeterministicStateInitReceiver = InvalidDeterministicStateInitReceiver
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidDeterministicStateInitReceiver
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidDeterministicStateInitReceiver = try container.decode(
                        Components.Schemas.ActionsValidationError.Case15Payload.InvalidDeterministicStateInitReceiverPayload.self,
                        forKey: .InvalidDeterministicStateInitReceiver
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidDeterministicStateInitReceiver"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case15`.
            case case15(Components.Schemas.ActionsValidationError.Case15Payload)
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16/DeterministicStateInitKeyLengthExceeded`.
                public struct DeterministicStateInitKeyLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16/DeterministicStateInitKeyLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16/DeterministicStateInitKeyLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `DeterministicStateInitKeyLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16/DeterministicStateInitKeyLengthExceeded`.
                public var DeterministicStateInitKeyLengthExceeded: Components.Schemas.ActionsValidationError.Case16Payload.DeterministicStateInitKeyLengthExceededPayload
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - DeterministicStateInitKeyLengthExceeded:
                public init(DeterministicStateInitKeyLengthExceeded: Components.Schemas.ActionsValidationError.Case16Payload.DeterministicStateInitKeyLengthExceededPayload) {
                    self.DeterministicStateInitKeyLengthExceeded = DeterministicStateInitKeyLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case DeterministicStateInitKeyLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeterministicStateInitKeyLengthExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case16Payload.DeterministicStateInitKeyLengthExceededPayload.self,
                        forKey: .DeterministicStateInitKeyLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeterministicStateInitKeyLengthExceeded"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case16`.
            case case16(Components.Schemas.ActionsValidationError.Case16Payload)
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17/DeterministicStateInitValueLengthExceeded`.
                public struct DeterministicStateInitValueLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17/DeterministicStateInitValueLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17/DeterministicStateInitValueLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `DeterministicStateInitValueLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17/DeterministicStateInitValueLengthExceeded`.
                public var DeterministicStateInitValueLengthExceeded: Components.Schemas.ActionsValidationError.Case17Payload.DeterministicStateInitValueLengthExceededPayload
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - DeterministicStateInitValueLengthExceeded:
                public init(DeterministicStateInitValueLengthExceeded: Components.Schemas.ActionsValidationError.Case17Payload.DeterministicStateInitValueLengthExceededPayload) {
                    self.DeterministicStateInitValueLengthExceeded = DeterministicStateInitValueLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case DeterministicStateInitValueLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeterministicStateInitValueLengthExceeded = try container.decode(
                        Components.Schemas.ActionsValidationError.Case17Payload.DeterministicStateInitValueLengthExceededPayload.self,
                        forKey: .DeterministicStateInitValueLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeterministicStateInitValueLengthExceeded"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ActionsValidationError/case17`.
            case case17(Components.Schemas.ActionsValidationError.Case17Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case13(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// An action that adds key with public key associated
        ///
        /// - Remark: Generated from `#/components/schemas/AddKeyAction`.
        public struct AddKeyAction: Codable, Hashable, Sendable {
            /// An access key with the permission
            ///
            /// - Remark: Generated from `#/components/schemas/AddKeyAction/access_key`.
            public struct access_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AddKeyAction/access_key/value1`.
                public var value1: Components.Schemas.AccessKey
                /// Creates a new `access_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccessKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// An access key with the permission
            ///
            /// - Remark: Generated from `#/components/schemas/AddKeyAction/access_key`.
            public var access_key: Components.Schemas.AddKeyAction.access_keyPayload
            /// A public key which will be associated with an access_key
            ///
            /// - Remark: Generated from `#/components/schemas/AddKeyAction/public_key`.
            public struct public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AddKeyAction/public_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// A public key which will be associated with an access_key
            ///
            /// - Remark: Generated from `#/components/schemas/AddKeyAction/public_key`.
            public var public_key: Components.Schemas.AddKeyAction.public_keyPayload
            /// Creates a new `AddKeyAction`.
            ///
            /// - Parameters:
            ///   - access_key: An access key with the permission
            ///   - public_key: A public key which will be associated with an access_key
            public init(
                access_key: Components.Schemas.AddKeyAction.access_keyPayload,
                public_key: Components.Schemas.AddKeyAction.public_keyPayload
            ) {
                self.access_key = access_key
                self.public_key = public_key
            }
            public enum CodingKeys: String, CodingKey {
                case access_key
                case public_key
            }
        }
        /// `BandwidthRequest` describes the size of receipts that a shard would like to send to another shard.
        /// When a shard wants to send a lot of receipts to another shard, it needs to create a request and wait
        /// for a bandwidth grant from the bandwidth scheduler.
        ///
        /// - Remark: Generated from `#/components/schemas/BandwidthRequest`.
        public struct BandwidthRequest: Codable, Hashable, Sendable {
            /// Bitmap which describes what values of bandwidth are requested.
            ///
            /// - Remark: Generated from `#/components/schemas/BandwidthRequest/requested_values_bitmap`.
            public struct requested_values_bitmapPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BandwidthRequest/requested_values_bitmap/value1`.
                public var value1: Components.Schemas.BandwidthRequestBitmap
                /// Creates a new `requested_values_bitmapPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.BandwidthRequestBitmap) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Bitmap which describes what values of bandwidth are requested.
            ///
            /// - Remark: Generated from `#/components/schemas/BandwidthRequest/requested_values_bitmap`.
            public var requested_values_bitmap: Components.Schemas.BandwidthRequest.requested_values_bitmapPayload
            /// Requesting bandwidth to this shard.
            ///
            /// - Remark: Generated from `#/components/schemas/BandwidthRequest/to_shard`.
            public var to_shard: Swift.Int
            /// Creates a new `BandwidthRequest`.
            ///
            /// - Parameters:
            ///   - requested_values_bitmap: Bitmap which describes what values of bandwidth are requested.
            ///   - to_shard: Requesting bandwidth to this shard.
            public init(
                requested_values_bitmap: Components.Schemas.BandwidthRequest.requested_values_bitmapPayload,
                to_shard: Swift.Int
            ) {
                self.requested_values_bitmap = requested_values_bitmap
                self.to_shard = to_shard
            }
            public enum CodingKeys: String, CodingKey {
                case requested_values_bitmap
                case to_shard
            }
        }
        /// Bitmap which describes which values from the predefined list are being requested.
        /// The nth bit is set to 1 when the nth value from the list is being requested.
        ///
        /// - Remark: Generated from `#/components/schemas/BandwidthRequestBitmap`.
        public struct BandwidthRequestBitmap: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BandwidthRequestBitmap/data`.
            public var data: [Swift.Int]
            /// Creates a new `BandwidthRequestBitmap`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: [Swift.Int]) {
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case data
            }
        }
        /// A list of shard's bandwidth requests.
        /// Describes how much the shard would like to send to other shards.
        ///
        /// - Remark: Generated from `#/components/schemas/BandwidthRequests`.
        @frozen public enum BandwidthRequests: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BandwidthRequests/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BandwidthRequests/case1/V1`.
                public var V1: Components.Schemas.BandwidthRequestsV1
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - V1:
                public init(V1: Components.Schemas.BandwidthRequestsV1) {
                    self.V1 = V1
                }
                public enum CodingKeys: String, CodingKey {
                    case V1
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.V1 = try container.decode(
                        Components.Schemas.BandwidthRequestsV1.self,
                        forKey: .V1
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "V1"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/BandwidthRequests/case1`.
            case case1(Components.Schemas.BandwidthRequests.Case1Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Version 1 of [`BandwidthRequest`].
        ///
        /// - Remark: Generated from `#/components/schemas/BandwidthRequestsV1`.
        public struct BandwidthRequestsV1: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BandwidthRequestsV1/requests`.
            public var requests: [Components.Schemas.BandwidthRequest]
            /// Creates a new `BandwidthRequestsV1`.
            ///
            /// - Parameters:
            ///   - requests:
            public init(requests: [Components.Schemas.BandwidthRequest]) {
                self.requests = requests
            }
            public enum CodingKeys: String, CodingKey {
                case requests
            }
        }
        /// A part of a state for the current head of a light client. More info [here](https://nomicon.io/ChainSpec/LightClient).
        ///
        /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView`.
        public struct BlockHeaderInnerLiteView: Codable, Hashable, Sendable {
            /// The merkle root of all the block hashes
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/block_merkle_root`.
            public struct block_merkle_rootPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/block_merkle_root/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `block_merkle_rootPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The merkle root of all the block hashes
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/block_merkle_root`.
            public var block_merkle_root: Components.Schemas.BlockHeaderInnerLiteView.block_merkle_rootPayload
            /// The epoch to which the block that is the current known head belongs
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/epoch_id`.
            public struct epoch_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/epoch_id/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `epoch_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The epoch to which the block that is the current known head belongs
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/epoch_id`.
            public var epoch_id: Components.Schemas.BlockHeaderInnerLiteView.epoch_idPayload
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/height`.
            public var height: Swift.Int
            /// The hash of the block producers set for the next epoch
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_bp_hash`.
            public struct next_bp_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_bp_hash/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `next_bp_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The hash of the block producers set for the next epoch
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_bp_hash`.
            public var next_bp_hash: Components.Schemas.BlockHeaderInnerLiteView.next_bp_hashPayload
            /// The epoch that will follow the current epoch
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_epoch_id`.
            public struct next_epoch_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_epoch_id/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `next_epoch_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The epoch that will follow the current epoch
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/next_epoch_id`.
            public var next_epoch_id: Components.Schemas.BlockHeaderInnerLiteView.next_epoch_idPayload
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/outcome_root`.
            public var outcome_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/prev_state_root`.
            public var prev_state_root: Components.Schemas.CryptoHash
            /// Legacy json number. Should not be used.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/timestamp`.
            public var timestamp: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockHeaderInnerLiteView/timestamp_nanosec`.
            public var timestamp_nanosec: Swift.String
            /// Creates a new `BlockHeaderInnerLiteView`.
            ///
            /// - Parameters:
            ///   - block_merkle_root: The merkle root of all the block hashes
            ///   - epoch_id: The epoch to which the block that is the current known head belongs
            ///   - height:
            ///   - next_bp_hash: The hash of the block producers set for the next epoch
            ///   - next_epoch_id: The epoch that will follow the current epoch
            ///   - outcome_root:
            ///   - prev_state_root:
            ///   - timestamp: Legacy json number. Should not be used.
            ///   - timestamp_nanosec:
            public init(
                block_merkle_root: Components.Schemas.BlockHeaderInnerLiteView.block_merkle_rootPayload,
                epoch_id: Components.Schemas.BlockHeaderInnerLiteView.epoch_idPayload,
                height: Swift.Int,
                next_bp_hash: Components.Schemas.BlockHeaderInnerLiteView.next_bp_hashPayload,
                next_epoch_id: Components.Schemas.BlockHeaderInnerLiteView.next_epoch_idPayload,
                outcome_root: Components.Schemas.CryptoHash,
                prev_state_root: Components.Schemas.CryptoHash,
                timestamp: Swift.Int,
                timestamp_nanosec: Swift.String
            ) {
                self.block_merkle_root = block_merkle_root
                self.epoch_id = epoch_id
                self.height = height
                self.next_bp_hash = next_bp_hash
                self.next_epoch_id = next_epoch_id
                self.outcome_root = outcome_root
                self.prev_state_root = prev_state_root
                self.timestamp = timestamp
                self.timestamp_nanosec = timestamp_nanosec
            }
            public enum CodingKeys: String, CodingKey {
                case block_merkle_root
                case epoch_id
                case height
                case next_bp_hash
                case next_epoch_id
                case outcome_root
                case prev_state_root
                case timestamp
                case timestamp_nanosec
            }
        }
        /// Contains main info about the block.
        ///
        /// - Remark: Generated from `#/components/schemas/BlockHeaderView`.
        public struct BlockHeaderView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/approvalsPayload`.
            public struct approvalsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/approvalsPayload/value1`.
                public var value1: Components.Schemas.Signature?
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/approvalsPayload/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `approvalsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.Signature? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/approvals`.
            public typealias approvalsPayload = [Components.Schemas.BlockHeaderView.approvalsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/approvals`.
            public var approvals: Components.Schemas.BlockHeaderView.approvalsPayload
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_body_hash`.
            public struct block_body_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_body_hash/value1`.
                public var value1: Components.Schemas.CryptoHash?
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_body_hash/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `block_body_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CryptoHash? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_body_hash`.
            public var block_body_hash: Components.Schemas.BlockHeaderView.block_body_hashPayload?
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_merkle_root`.
            public var block_merkle_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/block_ordinal`.
            public var block_ordinal: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/challenges_result`.
            public var challenges_result: [Components.Schemas.SlashedValidator]
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/challenges_root`.
            public var challenges_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunk_endorsements`.
            public var chunk_endorsements: [[Swift.Int]]?
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunk_headers_root`.
            public var chunk_headers_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunk_mask`.
            public var chunk_mask: [Swift.Bool]
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunk_receipts_root`.
            public var chunk_receipts_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunk_tx_root`.
            public var chunk_tx_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/chunks_included`.
            public var chunks_included: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/epoch_id`.
            public var epoch_id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/epoch_sync_data_hash`.
            public struct epoch_sync_data_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/epoch_sync_data_hash/value1`.
                public var value1: Components.Schemas.CryptoHash?
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/epoch_sync_data_hash/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `epoch_sync_data_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CryptoHash? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/epoch_sync_data_hash`.
            public var epoch_sync_data_hash: Components.Schemas.BlockHeaderView.epoch_sync_data_hashPayload?
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/gas_price`.
            public var gas_price: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/height`.
            public var height: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/last_ds_final_block`.
            public var last_ds_final_block: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/last_final_block`.
            public var last_final_block: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/latest_protocol_version`.
            public var latest_protocol_version: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/next_bp_hash`.
            public var next_bp_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/next_epoch_id`.
            public var next_epoch_id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/outcome_root`.
            public var outcome_root: Components.Schemas.CryptoHash
            /// The hash of the previous Block
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/prev_hash`.
            public struct prev_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/prev_hash/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `prev_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The hash of the previous Block
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/prev_hash`.
            public var prev_hash: Components.Schemas.BlockHeaderView.prev_hashPayload
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/prev_height`.
            public var prev_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/prev_state_root`.
            public var prev_state_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/random_value`.
            public var random_value: Components.Schemas.CryptoHash
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/rent_paid`.
            public struct rent_paidPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/rent_paid/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `rent_paidPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/rent_paid`.
            public var rent_paid: Components.Schemas.BlockHeaderView.rent_paidPayload?
            /// Signature of the block producer.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/signature`.
            public struct signaturePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/signature/value1`.
                public var value1: Components.Schemas.Signature
                /// Creates a new `signaturePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Signature) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Signature of the block producer.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/signature`.
            public var signature: Components.Schemas.BlockHeaderView.signaturePayload
            /// Legacy json number. Should not be used.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/timestamp`.
            public var timestamp: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/timestamp_nanosec`.
            public var timestamp_nanosec: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/total_supply`.
            public var total_supply: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/validator_proposals`.
            public var validator_proposals: [Components.Schemas.ValidatorStakeView]
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/validator_reward`.
            public struct validator_rewardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockHeaderView/validator_reward/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `validator_rewardPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockHeaderView/validator_reward`.
            public var validator_reward: Components.Schemas.BlockHeaderView.validator_rewardPayload?
            /// Creates a new `BlockHeaderView`.
            ///
            /// - Parameters:
            ///   - approvals:
            ///   - block_body_hash:
            ///   - block_merkle_root:
            ///   - block_ordinal:
            ///   - challenges_result:
            ///   - challenges_root:
            ///   - chunk_endorsements:
            ///   - chunk_headers_root:
            ///   - chunk_mask:
            ///   - chunk_receipts_root:
            ///   - chunk_tx_root:
            ///   - chunks_included:
            ///   - epoch_id:
            ///   - epoch_sync_data_hash:
            ///   - gas_price:
            ///   - hash:
            ///   - height:
            ///   - last_ds_final_block:
            ///   - last_final_block:
            ///   - latest_protocol_version:
            ///   - next_bp_hash:
            ///   - next_epoch_id:
            ///   - outcome_root:
            ///   - prev_hash: The hash of the previous Block
            ///   - prev_height:
            ///   - prev_state_root:
            ///   - random_value:
            ///   - rent_paid: TODO(2271): deprecated.
            ///   - signature: Signature of the block producer.
            ///   - timestamp: Legacy json number. Should not be used.
            ///   - timestamp_nanosec:
            ///   - total_supply:
            ///   - validator_proposals:
            ///   - validator_reward: TODO(2271): deprecated.
            public init(
                approvals: Components.Schemas.BlockHeaderView.approvalsPayload,
                block_body_hash: Components.Schemas.BlockHeaderView.block_body_hashPayload? = nil,
                block_merkle_root: Components.Schemas.CryptoHash,
                block_ordinal: Swift.Int? = nil,
                challenges_result: [Components.Schemas.SlashedValidator],
                challenges_root: Components.Schemas.CryptoHash,
                chunk_endorsements: [[Swift.Int]]? = nil,
                chunk_headers_root: Components.Schemas.CryptoHash,
                chunk_mask: [Swift.Bool],
                chunk_receipts_root: Components.Schemas.CryptoHash,
                chunk_tx_root: Components.Schemas.CryptoHash,
                chunks_included: Swift.Int,
                epoch_id: Components.Schemas.CryptoHash,
                epoch_sync_data_hash: Components.Schemas.BlockHeaderView.epoch_sync_data_hashPayload? = nil,
                gas_price: Components.Schemas.NearToken,
                hash: Components.Schemas.CryptoHash,
                height: Swift.Int,
                last_ds_final_block: Components.Schemas.CryptoHash,
                last_final_block: Components.Schemas.CryptoHash,
                latest_protocol_version: Swift.Int,
                next_bp_hash: Components.Schemas.CryptoHash,
                next_epoch_id: Components.Schemas.CryptoHash,
                outcome_root: Components.Schemas.CryptoHash,
                prev_hash: Components.Schemas.BlockHeaderView.prev_hashPayload,
                prev_height: Swift.Int? = nil,
                prev_state_root: Components.Schemas.CryptoHash,
                random_value: Components.Schemas.CryptoHash,
                rent_paid: Components.Schemas.BlockHeaderView.rent_paidPayload? = nil,
                signature: Components.Schemas.BlockHeaderView.signaturePayload,
                timestamp: Swift.Int,
                timestamp_nanosec: Swift.String,
                total_supply: Components.Schemas.NearToken,
                validator_proposals: [Components.Schemas.ValidatorStakeView],
                validator_reward: Components.Schemas.BlockHeaderView.validator_rewardPayload? = nil
            ) {
                self.approvals = approvals
                self.block_body_hash = block_body_hash
                self.block_merkle_root = block_merkle_root
                self.block_ordinal = block_ordinal
                self.challenges_result = challenges_result
                self.challenges_root = challenges_root
                self.chunk_endorsements = chunk_endorsements
                self.chunk_headers_root = chunk_headers_root
                self.chunk_mask = chunk_mask
                self.chunk_receipts_root = chunk_receipts_root
                self.chunk_tx_root = chunk_tx_root
                self.chunks_included = chunks_included
                self.epoch_id = epoch_id
                self.epoch_sync_data_hash = epoch_sync_data_hash
                self.gas_price = gas_price
                self.hash = hash
                self.height = height
                self.last_ds_final_block = last_ds_final_block
                self.last_final_block = last_final_block
                self.latest_protocol_version = latest_protocol_version
                self.next_bp_hash = next_bp_hash
                self.next_epoch_id = next_epoch_id
                self.outcome_root = outcome_root
                self.prev_hash = prev_hash
                self.prev_height = prev_height
                self.prev_state_root = prev_state_root
                self.random_value = random_value
                self.rent_paid = rent_paid
                self.signature = signature
                self.timestamp = timestamp
                self.timestamp_nanosec = timestamp_nanosec
                self.total_supply = total_supply
                self.validator_proposals = validator_proposals
                self.validator_reward = validator_reward
            }
            public enum CodingKeys: String, CodingKey {
                case approvals
                case block_body_hash
                case block_merkle_root
                case block_ordinal
                case challenges_result
                case challenges_root
                case chunk_endorsements
                case chunk_headers_root
                case chunk_mask
                case chunk_receipts_root
                case chunk_tx_root
                case chunks_included
                case epoch_id
                case epoch_sync_data_hash
                case gas_price
                case hash
                case height
                case last_ds_final_block
                case last_final_block
                case latest_protocol_version
                case next_bp_hash
                case next_epoch_id
                case outcome_root
                case prev_hash
                case prev_height
                case prev_state_root
                case random_value
                case rent_paid
                case signature
                case timestamp
                case timestamp_nanosec
                case total_supply
                case validator_proposals
                case validator_reward
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockId`.
        public struct BlockId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockId/value1`.
            public var value1: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/BlockId/value2`.
            public var value2: Components.Schemas.CryptoHash?
            /// Creates a new `BlockId`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Swift.Int? = nil,
                value2: Components.Schemas.CryptoHash? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// Height and hash of a block
        ///
        /// - Remark: Generated from `#/components/schemas/BlockStatusView`.
        public struct BlockStatusView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockStatusView/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/BlockStatusView/height`.
            public var height: Swift.Int
            /// Creates a new `BlockStatusView`.
            ///
            /// - Parameters:
            ///   - hash:
            ///   - height:
            public init(
                hash: Components.Schemas.CryptoHash,
                height: Swift.Int
            ) {
                self.hash = hash
                self.height = height
            }
            public enum CodingKeys: String, CodingKey {
                case hash
                case height
            }
        }
        /// A result returned by contract method
        ///
        /// - Remark: Generated from `#/components/schemas/CallResult`.
        public struct CallResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CallResult/logs`.
            public var logs: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/CallResult/result`.
            public var result: [Swift.Int]
            /// Creates a new `CallResult`.
            ///
            /// - Parameters:
            ///   - logs:
            ///   - result:
            public init(
                logs: [Swift.String],
                result: [Swift.Int]
            ) {
                self.logs = logs
                self.result = result
            }
            public enum CodingKeys: String, CodingKey {
                case logs
                case result
            }
        }
        /// Status of the [catchup](https://near.github.io/nearcore/architecture/how/sync.html#catchup) process
        ///
        /// - Remark: Generated from `#/components/schemas/CatchupStatusView`.
        public struct CatchupStatusView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CatchupStatusView/blocks_to_catchup`.
            public var blocks_to_catchup: [Components.Schemas.BlockStatusView]
            /// - Remark: Generated from `#/components/schemas/CatchupStatusView/shard_sync_status`.
            public struct shard_sync_statusPayload: Codable, Hashable, Sendable {
                /// Creates a new `shard_sync_statusPayload`.
                public init() {}
                public init(from decoder: any Decoder) throws {
                    try decoder.ensureNoAdditionalProperties(knownKeys: [])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CatchupStatusView/shard_sync_status`.
            public var shard_sync_status: Components.Schemas.CatchupStatusView.shard_sync_statusPayload
            /// - Remark: Generated from `#/components/schemas/CatchupStatusView/sync_block_hash`.
            public var sync_block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/CatchupStatusView/sync_block_height`.
            public var sync_block_height: Swift.Int
            /// Creates a new `CatchupStatusView`.
            ///
            /// - Parameters:
            ///   - blocks_to_catchup:
            ///   - shard_sync_status:
            ///   - sync_block_hash:
            ///   - sync_block_height:
            public init(
                blocks_to_catchup: [Components.Schemas.BlockStatusView],
                shard_sync_status: Components.Schemas.CatchupStatusView.shard_sync_statusPayload,
                sync_block_hash: Components.Schemas.CryptoHash,
                sync_block_height: Swift.Int
            ) {
                self.blocks_to_catchup = blocks_to_catchup
                self.shard_sync_status = shard_sync_status
                self.sync_block_hash = sync_block_hash
                self.sync_block_height = sync_block_height
            }
            public enum CodingKeys: String, CodingKey {
                case blocks_to_catchup
                case shard_sync_status
                case sync_block_hash
                case sync_block_height
            }
        }
        /// Config for the Chunk Distribution Network feature.
        /// This allows nodes to push and pull chunks from a central stream.
        /// The two benefits of this approach are: (1) less request/response traffic
        /// on the peer-to-peer network and (2) lower latency for RPC nodes indexing the chain.
        ///
        /// - Remark: Generated from `#/components/schemas/ChunkDistributionNetworkConfig`.
        public struct ChunkDistributionNetworkConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChunkDistributionNetworkConfig/enabled`.
            public var enabled: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ChunkDistributionNetworkConfig/uris`.
            public var uris: Components.Schemas.ChunkDistributionUris
            /// Creates a new `ChunkDistributionNetworkConfig`.
            ///
            /// - Parameters:
            ///   - enabled:
            ///   - uris:
            public init(
                enabled: Swift.Bool,
                uris: Components.Schemas.ChunkDistributionUris
            ) {
                self.enabled = enabled
                self.uris = uris
            }
            public enum CodingKeys: String, CodingKey {
                case enabled
                case uris
            }
        }
        /// URIs for the Chunk Distribution Network feature.
        ///
        /// - Remark: Generated from `#/components/schemas/ChunkDistributionUris`.
        public struct ChunkDistributionUris: Codable, Hashable, Sendable {
            /// URI for pulling chunks from the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkDistributionUris/get`.
            public var get: Swift.String
            /// URI for publishing chunks to the stream.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkDistributionUris/set`.
            public var set: Swift.String
            /// Creates a new `ChunkDistributionUris`.
            ///
            /// - Parameters:
            ///   - get: URI for pulling chunks from the stream.
            ///   - set: URI for publishing chunks to the stream.
            public init(
                get: Swift.String,
                set: Swift.String
            ) {
                self.get = get
                self.set = set
            }
            public enum CodingKeys: String, CodingKey {
                case get
                case set
            }
        }
        /// Contains main info about the chunk.
        ///
        /// - Remark: Generated from `#/components/schemas/ChunkHeaderView`.
        public struct ChunkHeaderView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/balance_burnt`.
            public var balance_burnt: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/bandwidth_requests`.
            public struct bandwidth_requestsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/bandwidth_requests/value1`.
                public var value1: Components.Schemas.BandwidthRequests?
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/bandwidth_requests/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `bandwidth_requestsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.BandwidthRequests? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/bandwidth_requests`.
            public var bandwidth_requests: Components.Schemas.ChunkHeaderView.bandwidth_requestsPayload?
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/chunk_hash`.
            public var chunk_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/congestion_info`.
            public struct congestion_infoPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/congestion_info/value1`.
                public var value1: Components.Schemas.CongestionInfoView?
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/congestion_info/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `congestion_infoPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CongestionInfoView? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/congestion_info`.
            public var congestion_info: Components.Schemas.ChunkHeaderView.congestion_infoPayload?
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/encoded_length`.
            public var encoded_length: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/encoded_merkle_root`.
            public var encoded_merkle_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/gas_limit`.
            public var gas_limit: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/gas_used`.
            public var gas_used: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/height_created`.
            public var height_created: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/height_included`.
            public var height_included: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/outcome_root`.
            public var outcome_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/outgoing_receipts_root`.
            public var outgoing_receipts_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/prev_block_hash`.
            public var prev_block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/prev_state_root`.
            public var prev_state_root: Components.Schemas.CryptoHash
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/rent_paid`.
            public struct rent_paidPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/rent_paid/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `rent_paidPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/rent_paid`.
            public var rent_paid: Components.Schemas.ChunkHeaderView.rent_paidPayload?
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/shard_id`.
            public var shard_id: Components.Schemas.ShardId
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/signature`.
            public var signature: Components.Schemas.Signature
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/tx_root`.
            public var tx_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/validator_proposals`.
            public var validator_proposals: [Components.Schemas.ValidatorStakeView]
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/validator_reward`.
            public struct validator_rewardPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/validator_reward/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `validator_rewardPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// TODO(2271): deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/ChunkHeaderView/validator_reward`.
            public var validator_reward: Components.Schemas.ChunkHeaderView.validator_rewardPayload?
            /// Creates a new `ChunkHeaderView`.
            ///
            /// - Parameters:
            ///   - balance_burnt:
            ///   - bandwidth_requests:
            ///   - chunk_hash:
            ///   - congestion_info:
            ///   - encoded_length:
            ///   - encoded_merkle_root:
            ///   - gas_limit:
            ///   - gas_used:
            ///   - height_created:
            ///   - height_included:
            ///   - outcome_root:
            ///   - outgoing_receipts_root:
            ///   - prev_block_hash:
            ///   - prev_state_root:
            ///   - rent_paid: TODO(2271): deprecated.
            ///   - shard_id:
            ///   - signature:
            ///   - tx_root:
            ///   - validator_proposals:
            ///   - validator_reward: TODO(2271): deprecated.
            public init(
                balance_burnt: Components.Schemas.NearToken,
                bandwidth_requests: Components.Schemas.ChunkHeaderView.bandwidth_requestsPayload? = nil,
                chunk_hash: Components.Schemas.CryptoHash,
                congestion_info: Components.Schemas.ChunkHeaderView.congestion_infoPayload? = nil,
                encoded_length: Swift.Int,
                encoded_merkle_root: Components.Schemas.CryptoHash,
                gas_limit: Components.Schemas.NearGas,
                gas_used: Components.Schemas.NearGas,
                height_created: Swift.Int,
                height_included: Swift.Int,
                outcome_root: Components.Schemas.CryptoHash,
                outgoing_receipts_root: Components.Schemas.CryptoHash,
                prev_block_hash: Components.Schemas.CryptoHash,
                prev_state_root: Components.Schemas.CryptoHash,
                rent_paid: Components.Schemas.ChunkHeaderView.rent_paidPayload? = nil,
                shard_id: Components.Schemas.ShardId,
                signature: Components.Schemas.Signature,
                tx_root: Components.Schemas.CryptoHash,
                validator_proposals: [Components.Schemas.ValidatorStakeView],
                validator_reward: Components.Schemas.ChunkHeaderView.validator_rewardPayload? = nil
            ) {
                self.balance_burnt = balance_burnt
                self.bandwidth_requests = bandwidth_requests
                self.chunk_hash = chunk_hash
                self.congestion_info = congestion_info
                self.encoded_length = encoded_length
                self.encoded_merkle_root = encoded_merkle_root
                self.gas_limit = gas_limit
                self.gas_used = gas_used
                self.height_created = height_created
                self.height_included = height_included
                self.outcome_root = outcome_root
                self.outgoing_receipts_root = outgoing_receipts_root
                self.prev_block_hash = prev_block_hash
                self.prev_state_root = prev_state_root
                self.rent_paid = rent_paid
                self.shard_id = shard_id
                self.signature = signature
                self.tx_root = tx_root
                self.validator_proposals = validator_proposals
                self.validator_reward = validator_reward
            }
            public enum CodingKeys: String, CodingKey {
                case balance_burnt
                case bandwidth_requests
                case chunk_hash
                case congestion_info
                case encoded_length
                case encoded_merkle_root
                case gas_limit
                case gas_used
                case height_created
                case height_included
                case outcome_root
                case outgoing_receipts_root
                case prev_block_hash
                case prev_state_root
                case rent_paid
                case shard_id
                case signature
                case tx_root
                case validator_proposals
                case validator_reward
            }
        }
        /// Configuration for a cloud-based archival writer. If this config is present, the writer is enabled and
        /// writes chunk-related data based on the tracked shards. This config also controls additional archival
        /// behavior such as block data and polling interval.
        ///
        /// - Remark: Generated from `#/components/schemas/CloudArchivalWriterConfig`.
        public struct CloudArchivalWriterConfig: Codable, Hashable, Sendable {
            /// Determines whether block-related data should be written to cloud storage.
            ///
            /// - Remark: Generated from `#/components/schemas/CloudArchivalWriterConfig/archive_block_data`.
            public var archive_block_data: Swift.Bool?
            /// Interval at which the system checks for new blocks or chunks to archive.
            ///
            /// - Remark: Generated from `#/components/schemas/CloudArchivalWriterConfig/polling_interval`.
            public struct polling_intervalPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CloudArchivalWriterConfig/polling_interval/value1`.
                public var value1: Components.Schemas.DurationAsStdSchemaProvider
                /// Creates a new `polling_intervalPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.DurationAsStdSchemaProvider) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Interval at which the system checks for new blocks or chunks to archive.
            ///
            /// - Remark: Generated from `#/components/schemas/CloudArchivalWriterConfig/polling_interval`.
            public var polling_interval: Components.Schemas.CloudArchivalWriterConfig.polling_intervalPayload?
            /// Creates a new `CloudArchivalWriterConfig`.
            ///
            /// - Parameters:
            ///   - archive_block_data: Determines whether block-related data should be written to cloud storage.
            ///   - polling_interval: Interval at which the system checks for new blocks or chunks to archive.
            public init(
                archive_block_data: Swift.Bool? = nil,
                polling_interval: Components.Schemas.CloudArchivalWriterConfig.polling_intervalPayload? = nil
            ) {
                self.archive_block_data = archive_block_data
                self.polling_interval = polling_interval
            }
            public enum CodingKeys: String, CodingKey {
                case archive_block_data
                case polling_interval
            }
        }
        /// - Remark: Generated from `#/components/schemas/CompilationError`.
        @frozen public enum CompilationError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CompilationError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CompilationError/case1/CodeDoesNotExist`.
                public struct CodeDoesNotExistPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CompilationError/case1/CodeDoesNotExist/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `CodeDoesNotExistPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CompilationError/case1/CodeDoesNotExist`.
                public var CodeDoesNotExist: Components.Schemas.CompilationError.Case1Payload.CodeDoesNotExistPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - CodeDoesNotExist:
                public init(CodeDoesNotExist: Components.Schemas.CompilationError.Case1Payload.CodeDoesNotExistPayload) {
                    self.CodeDoesNotExist = CodeDoesNotExist
                }
                public enum CodingKeys: String, CodingKey {
                    case CodeDoesNotExist
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CodeDoesNotExist = try container.decode(
                        Components.Schemas.CompilationError.Case1Payload.CodeDoesNotExistPayload.self,
                        forKey: .CodeDoesNotExist
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CodeDoesNotExist"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CompilationError/case1`.
            case case1(Components.Schemas.CompilationError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/CompilationError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CompilationError/case2/PrepareError`.
                public var PrepareError: Components.Schemas.PrepareError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - PrepareError:
                public init(PrepareError: Components.Schemas.PrepareError) {
                    self.PrepareError = PrepareError
                }
                public enum CodingKeys: String, CodingKey {
                    case PrepareError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.PrepareError = try container.decode(
                        Components.Schemas.PrepareError.self,
                        forKey: .PrepareError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "PrepareError"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/CompilationError/case2`.
            case case2(Components.Schemas.CompilationError.Case2Payload)
            /// This is for defense in depth.
            /// We expect our runtime-independent preparation code to fully catch all invalid wasms,
            /// but, if it ever misses something we’ll emit this error
            ///
            /// - Remark: Generated from `#/components/schemas/CompilationError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CompilationError/case3/WasmerCompileError`.
                public struct WasmerCompileErrorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/CompilationError/case3/WasmerCompileError/msg`.
                    public var msg: Swift.String
                    /// Creates a new `WasmerCompileErrorPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    public init(msg: Swift.String) {
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/CompilationError/case3/WasmerCompileError`.
                public var WasmerCompileError: Components.Schemas.CompilationError.Case3Payload.WasmerCompileErrorPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - WasmerCompileError:
                public init(WasmerCompileError: Components.Schemas.CompilationError.Case3Payload.WasmerCompileErrorPayload) {
                    self.WasmerCompileError = WasmerCompileError
                }
                public enum CodingKeys: String, CodingKey {
                    case WasmerCompileError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.WasmerCompileError = try container.decode(
                        Components.Schemas.CompilationError.Case3Payload.WasmerCompileErrorPayload.self,
                        forKey: .WasmerCompileError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "WasmerCompileError"
                    ])
                }
            }
            /// This is for defense in depth.
            /// We expect our runtime-independent preparation code to fully catch all invalid wasms,
            /// but, if it ever misses something we’ll emit this error
            ///
            /// - Remark: Generated from `#/components/schemas/CompilationError/case3`.
            case case3(Components.Schemas.CompilationError.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// The configuration for congestion control. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
        ///
        /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView`.
        public struct CongestionControlConfigView: Codable, Hashable, Sendable {
            /// How much gas the chosen allowed shard can send to a 100% congested shard.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/allowed_shard_outgoing_gas`.
            public struct allowed_shard_outgoing_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/allowed_shard_outgoing_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `allowed_shard_outgoing_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// How much gas the chosen allowed shard can send to a 100% congested shard.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/allowed_shard_outgoing_gas`.
            public var allowed_shard_outgoing_gas: Components.Schemas.CongestionControlConfigView.allowed_shard_outgoing_gasPayload
            /// How much gas in delayed receipts of a shard is 100% incoming congestion.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_incoming_gas`.
            public struct max_congestion_incoming_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_incoming_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_congestion_incoming_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// How much gas in delayed receipts of a shard is 100% incoming congestion.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_incoming_gas`.
            public var max_congestion_incoming_gas: Components.Schemas.CongestionControlConfigView.max_congestion_incoming_gasPayload
            /// How much memory space of all delayed and buffered receipts in a shard is
            /// considered 100% congested.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_memory_consumption`.
            public var max_congestion_memory_consumption: Swift.Int
            /// How many missed chunks in a row in a shard is considered 100% congested.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_missed_chunks`.
            public var max_congestion_missed_chunks: Swift.Int
            /// How much gas in outgoing buffered receipts of a shard is 100% congested.
            ///
            /// Outgoing congestion contributes to overall congestion, which reduces how
            /// much other shards are allowed to forward to this shard.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_outgoing_gas`.
            public struct max_congestion_outgoing_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_outgoing_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_congestion_outgoing_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// How much gas in outgoing buffered receipts of a shard is 100% congested.
            ///
            /// Outgoing congestion contributes to overall congestion, which reduces how
            /// much other shards are allowed to forward to this shard.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_congestion_outgoing_gas`.
            public var max_congestion_outgoing_gas: Components.Schemas.CongestionControlConfigView.max_congestion_outgoing_gasPayload
            /// The maximum amount of gas attached to receipts a shard can forward to
            /// another shard per chunk.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_outgoing_gas`.
            public struct max_outgoing_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_outgoing_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_outgoing_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The maximum amount of gas attached to receipts a shard can forward to
            /// another shard per chunk.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_outgoing_gas`.
            public var max_outgoing_gas: Components.Schemas.CongestionControlConfigView.max_outgoing_gasPayload
            /// The maximum amount of gas in a chunk spent on converting new transactions to
            /// receipts.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_tx_gas`.
            public struct max_tx_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_tx_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_tx_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The maximum amount of gas in a chunk spent on converting new transactions to
            /// receipts.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/max_tx_gas`.
            public var max_tx_gas: Components.Schemas.CongestionControlConfigView.max_tx_gasPayload
            /// The minimum gas each shard can send to a shard that is not fully congested.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_outgoing_gas`.
            public struct min_outgoing_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_outgoing_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `min_outgoing_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The minimum gas each shard can send to a shard that is not fully congested.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_outgoing_gas`.
            public var min_outgoing_gas: Components.Schemas.CongestionControlConfigView.min_outgoing_gasPayload
            /// The minimum amount of gas in a chunk spent on converting new transactions
            /// to receipts, as long as the receiving shard is not congested.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_tx_gas`.
            public struct min_tx_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_tx_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `min_tx_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The minimum amount of gas in a chunk spent on converting new transactions
            /// to receipts, as long as the receiving shard is not congested.
            ///
            /// See [`CongestionControlConfig`] for more details.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/min_tx_gas`.
            public var min_tx_gas: Components.Schemas.CongestionControlConfigView.min_tx_gasPayload
            /// Large size limit for outgoing receipts to a shard, used when it's safe
            /// to send a lot of receipts without making the state witness too large.
            /// It limits the total sum of outgoing receipts, not individual receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/outgoing_receipts_big_size_limit`.
            public var outgoing_receipts_big_size_limit: Swift.Int
            /// The standard size limit for outgoing receipts aimed at a single shard.
            /// This limit is pretty small to keep the size of source_receipt_proofs under control.
            /// It limits the total sum of outgoing receipts, not individual receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/outgoing_receipts_usual_size_limit`.
            public var outgoing_receipts_usual_size_limit: Swift.Int
            /// How much congestion a shard can tolerate before it stops all shards from
            /// accepting new transactions with the receiver set to the congested shard.
            ///
            /// - Remark: Generated from `#/components/schemas/CongestionControlConfigView/reject_tx_congestion_threshold`.
            public var reject_tx_congestion_threshold: Swift.Double
            /// Creates a new `CongestionControlConfigView`.
            ///
            /// - Parameters:
            ///   - allowed_shard_outgoing_gas: How much gas the chosen allowed shard can send to a 100% congested shard.
            ///   - max_congestion_incoming_gas: How much gas in delayed receipts of a shard is 100% incoming congestion.
            ///   - max_congestion_memory_consumption: How much memory space of all delayed and buffered receipts in a shard is
            ///   - max_congestion_missed_chunks: How many missed chunks in a row in a shard is considered 100% congested.
            ///   - max_congestion_outgoing_gas: How much gas in outgoing buffered receipts of a shard is 100% congested.
            ///   - max_outgoing_gas: The maximum amount of gas attached to receipts a shard can forward to
            ///   - max_tx_gas: The maximum amount of gas in a chunk spent on converting new transactions to
            ///   - min_outgoing_gas: The minimum gas each shard can send to a shard that is not fully congested.
            ///   - min_tx_gas: The minimum amount of gas in a chunk spent on converting new transactions
            ///   - outgoing_receipts_big_size_limit: Large size limit for outgoing receipts to a shard, used when it's safe
            ///   - outgoing_receipts_usual_size_limit: The standard size limit for outgoing receipts aimed at a single shard.
            ///   - reject_tx_congestion_threshold: How much congestion a shard can tolerate before it stops all shards from
            public init(
                allowed_shard_outgoing_gas: Components.Schemas.CongestionControlConfigView.allowed_shard_outgoing_gasPayload,
                max_congestion_incoming_gas: Components.Schemas.CongestionControlConfigView.max_congestion_incoming_gasPayload,
                max_congestion_memory_consumption: Swift.Int,
                max_congestion_missed_chunks: Swift.Int,
                max_congestion_outgoing_gas: Components.Schemas.CongestionControlConfigView.max_congestion_outgoing_gasPayload,
                max_outgoing_gas: Components.Schemas.CongestionControlConfigView.max_outgoing_gasPayload,
                max_tx_gas: Components.Schemas.CongestionControlConfigView.max_tx_gasPayload,
                min_outgoing_gas: Components.Schemas.CongestionControlConfigView.min_outgoing_gasPayload,
                min_tx_gas: Components.Schemas.CongestionControlConfigView.min_tx_gasPayload,
                outgoing_receipts_big_size_limit: Swift.Int,
                outgoing_receipts_usual_size_limit: Swift.Int,
                reject_tx_congestion_threshold: Swift.Double
            ) {
                self.allowed_shard_outgoing_gas = allowed_shard_outgoing_gas
                self.max_congestion_incoming_gas = max_congestion_incoming_gas
                self.max_congestion_memory_consumption = max_congestion_memory_consumption
                self.max_congestion_missed_chunks = max_congestion_missed_chunks
                self.max_congestion_outgoing_gas = max_congestion_outgoing_gas
                self.max_outgoing_gas = max_outgoing_gas
                self.max_tx_gas = max_tx_gas
                self.min_outgoing_gas = min_outgoing_gas
                self.min_tx_gas = min_tx_gas
                self.outgoing_receipts_big_size_limit = outgoing_receipts_big_size_limit
                self.outgoing_receipts_usual_size_limit = outgoing_receipts_usual_size_limit
                self.reject_tx_congestion_threshold = reject_tx_congestion_threshold
            }
            public enum CodingKeys: String, CodingKey {
                case allowed_shard_outgoing_gas
                case max_congestion_incoming_gas
                case max_congestion_memory_consumption
                case max_congestion_missed_chunks
                case max_congestion_outgoing_gas
                case max_outgoing_gas
                case max_tx_gas
                case min_outgoing_gas
                case min_tx_gas
                case outgoing_receipts_big_size_limit
                case outgoing_receipts_usual_size_limit
                case reject_tx_congestion_threshold
            }
        }
        /// Stores the congestion level of a shard. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
        ///
        /// - Remark: Generated from `#/components/schemas/CongestionInfoView`.
        public struct CongestionInfoView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CongestionInfoView/allowed_shard`.
            public var allowed_shard: Swift.Int
            /// - Remark: Generated from `#/components/schemas/CongestionInfoView/buffered_receipts_gas`.
            public var buffered_receipts_gas: Swift.String
            /// - Remark: Generated from `#/components/schemas/CongestionInfoView/delayed_receipts_gas`.
            public var delayed_receipts_gas: Swift.String
            /// - Remark: Generated from `#/components/schemas/CongestionInfoView/receipt_bytes`.
            public var receipt_bytes: Swift.Int
            /// Creates a new `CongestionInfoView`.
            ///
            /// - Parameters:
            ///   - allowed_shard:
            ///   - buffered_receipts_gas:
            ///   - delayed_receipts_gas:
            ///   - receipt_bytes:
            public init(
                allowed_shard: Swift.Int,
                buffered_receipts_gas: Swift.String,
                delayed_receipts_gas: Swift.String,
                receipt_bytes: Swift.Int
            ) {
                self.allowed_shard = allowed_shard
                self.buffered_receipts_gas = buffered_receipts_gas
                self.delayed_receipts_gas = delayed_receipts_gas
                self.receipt_bytes = receipt_bytes
            }
            public enum CodingKeys: String, CodingKey {
                case allowed_shard
                case buffered_receipts_gas
                case delayed_receipts_gas
                case receipt_bytes
            }
        }
        /// A view of the contract code.
        ///
        /// - Remark: Generated from `#/components/schemas/ContractCodeView`.
        public struct ContractCodeView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContractCodeView/code_base64`.
            public var code_base64: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContractCodeView/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// Creates a new `ContractCodeView`.
            ///
            /// - Parameters:
            ///   - code_base64:
            ///   - hash:
            public init(
                code_base64: Swift.String,
                hash: Components.Schemas.CryptoHash
            ) {
                self.code_base64 = code_base64
                self.hash = hash
            }
            public enum CodingKeys: String, CodingKey {
                case code_base64
                case hash
            }
        }
        /// Shows gas profile. More info [here](https://near.github.io/nearcore/architecture/gas/gas_profile.html?highlight=WASM_HOST_COST#example-transaction-gas-profile).
        ///
        /// - Remark: Generated from `#/components/schemas/CostGasUsed`.
        public struct CostGasUsed: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CostGasUsed/cost`.
            public var cost: Swift.String
            /// Either ACTION_COST or WASM_HOST_COST.
            ///
            /// - Remark: Generated from `#/components/schemas/CostGasUsed/cost_category`.
            public var cost_category: Swift.String
            /// - Remark: Generated from `#/components/schemas/CostGasUsed/gas_used`.
            public var gas_used: Swift.String
            /// Creates a new `CostGasUsed`.
            ///
            /// - Parameters:
            ///   - cost:
            ///   - cost_category: Either ACTION_COST or WASM_HOST_COST.
            ///   - gas_used:
            public init(
                cost: Swift.String,
                cost_category: Swift.String,
                gas_used: Swift.String
            ) {
                self.cost = cost
                self.cost_category = cost_category
                self.gas_used = gas_used
            }
            public enum CodingKeys: String, CodingKey {
                case cost
                case cost_category
                case gas_used
            }
        }
        /// Create account action
        ///
        /// - Remark: Generated from `#/components/schemas/CreateAccountAction`.
        public typealias CreateAccountAction = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/CryptoHash`.
        public typealias CryptoHash = Swift.String
        /// Describes information about the current epoch validator
        ///
        /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo`.
        public struct CurrentEpochValidatorInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/is_slashed`.
            public var is_slashed: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_expected_blocks`.
            public var num_expected_blocks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_expected_chunks`.
            public var num_expected_chunks: Swift.Int?
            /// Number of chunks this validator was expected to produce in each shard.
            /// Each entry in the array corresponds to the shard in the `shards_produced` array.
            ///
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_expected_chunks_per_shard`.
            public var num_expected_chunks_per_shard: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_expected_endorsements`.
            public var num_expected_endorsements: Swift.Int?
            /// Number of chunks this validator was expected to validate and endorse in each shard.
            /// Each entry in the array corresponds to the shard in the `shards_endorsed` array.
            ///
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_expected_endorsements_per_shard`.
            public var num_expected_endorsements_per_shard: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_produced_blocks`.
            public var num_produced_blocks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_produced_chunks`.
            public var num_produced_chunks: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_produced_chunks_per_shard`.
            public var num_produced_chunks_per_shard: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_produced_endorsements`.
            public var num_produced_endorsements: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/num_produced_endorsements_per_shard`.
            public var num_produced_endorsements_per_shard: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// Shards this validator is assigned to as chunk producer in the current epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/shards`.
            public var shards: [Components.Schemas.ShardId]
            /// Shards this validator is assigned to as chunk validator in the current epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/shards_endorsed`.
            public var shards_endorsed: [Components.Schemas.ShardId]?
            /// - Remark: Generated from `#/components/schemas/CurrentEpochValidatorInfo/stake`.
            public var stake: Components.Schemas.NearToken
            /// Creates a new `CurrentEpochValidatorInfo`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - is_slashed:
            ///   - num_expected_blocks:
            ///   - num_expected_chunks:
            ///   - num_expected_chunks_per_shard: Number of chunks this validator was expected to produce in each shard.
            ///   - num_expected_endorsements:
            ///   - num_expected_endorsements_per_shard: Number of chunks this validator was expected to validate and endorse in each shard.
            ///   - num_produced_blocks:
            ///   - num_produced_chunks:
            ///   - num_produced_chunks_per_shard:
            ///   - num_produced_endorsements:
            ///   - num_produced_endorsements_per_shard:
            ///   - public_key:
            ///   - shards: Shards this validator is assigned to as chunk producer in the current epoch.
            ///   - shards_endorsed: Shards this validator is assigned to as chunk validator in the current epoch.
            ///   - stake:
            public init(
                account_id: Components.Schemas.AccountId,
                is_slashed: Swift.Bool,
                num_expected_blocks: Swift.Int,
                num_expected_chunks: Swift.Int? = nil,
                num_expected_chunks_per_shard: [Swift.Int]? = nil,
                num_expected_endorsements: Swift.Int? = nil,
                num_expected_endorsements_per_shard: [Swift.Int]? = nil,
                num_produced_blocks: Swift.Int,
                num_produced_chunks: Swift.Int? = nil,
                num_produced_chunks_per_shard: [Swift.Int]? = nil,
                num_produced_endorsements: Swift.Int? = nil,
                num_produced_endorsements_per_shard: [Swift.Int]? = nil,
                public_key: Components.Schemas.PublicKey,
                shards: [Components.Schemas.ShardId],
                shards_endorsed: [Components.Schemas.ShardId]? = nil,
                stake: Components.Schemas.NearToken
            ) {
                self.account_id = account_id
                self.is_slashed = is_slashed
                self.num_expected_blocks = num_expected_blocks
                self.num_expected_chunks = num_expected_chunks
                self.num_expected_chunks_per_shard = num_expected_chunks_per_shard
                self.num_expected_endorsements = num_expected_endorsements
                self.num_expected_endorsements_per_shard = num_expected_endorsements_per_shard
                self.num_produced_blocks = num_produced_blocks
                self.num_produced_chunks = num_produced_chunks
                self.num_produced_chunks_per_shard = num_produced_chunks_per_shard
                self.num_produced_endorsements = num_produced_endorsements
                self.num_produced_endorsements_per_shard = num_produced_endorsements_per_shard
                self.public_key = public_key
                self.shards = shards
                self.shards_endorsed = shards_endorsed
                self.stake = stake
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case is_slashed
                case num_expected_blocks
                case num_expected_chunks
                case num_expected_chunks_per_shard
                case num_expected_endorsements
                case num_expected_endorsements_per_shard
                case num_produced_blocks
                case num_produced_chunks
                case num_produced_chunks_per_shard
                case num_produced_endorsements
                case num_produced_endorsements_per_shard
                case public_key
                case shards
                case shards_endorsed
                case stake
            }
        }
        /// The fees settings for a data receipt creation
        ///
        /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView`.
        public struct DataReceiptCreationConfigView: Codable, Hashable, Sendable {
            /// Base cost of creating a data receipt.
            /// Both `send` and `exec` costs are burned when a new receipt has input dependencies. The gas
            /// is charged for each input dependency. The dependencies are specified when a receipt is
            /// created using `promise_then` and `promise_batch_then`.
            /// NOTE: Any receipt with output dependencies will produce data receipts. Even if it fails.
            /// Even if the last action is not a function call (in case of success it will return empty
            /// value).
            ///
            /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/base_cost`.
            public struct base_costPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/base_cost/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `base_costPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Base cost of creating a data receipt.
            /// Both `send` and `exec` costs are burned when a new receipt has input dependencies. The gas
            /// is charged for each input dependency. The dependencies are specified when a receipt is
            /// created using `promise_then` and `promise_batch_then`.
            /// NOTE: Any receipt with output dependencies will produce data receipts. Even if it fails.
            /// Even if the last action is not a function call (in case of success it will return empty
            /// value).
            ///
            /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/base_cost`.
            public var base_cost: Components.Schemas.DataReceiptCreationConfigView.base_costPayload
            /// Additional cost per byte sent.
            /// Both `send` and `exec` costs are burned when a function call finishes execution and returns
            /// `N` bytes of data to every output dependency. For each output dependency the cost is
            /// `(send(sir) + exec()) * N`.
            ///
            /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/cost_per_byte`.
            public struct cost_per_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/cost_per_byte/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `cost_per_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Additional cost per byte sent.
            /// Both `send` and `exec` costs are burned when a function call finishes execution and returns
            /// `N` bytes of data to every output dependency. For each output dependency the cost is
            /// `(send(sir) + exec()) * N`.
            ///
            /// - Remark: Generated from `#/components/schemas/DataReceiptCreationConfigView/cost_per_byte`.
            public var cost_per_byte: Components.Schemas.DataReceiptCreationConfigView.cost_per_bytePayload
            /// Creates a new `DataReceiptCreationConfigView`.
            ///
            /// - Parameters:
            ///   - base_cost: Base cost of creating a data receipt.
            ///   - cost_per_byte: Additional cost per byte sent.
            public init(
                base_cost: Components.Schemas.DataReceiptCreationConfigView.base_costPayload,
                cost_per_byte: Components.Schemas.DataReceiptCreationConfigView.cost_per_bytePayload
            ) {
                self.base_cost = base_cost
                self.cost_per_byte = cost_per_byte
            }
            public enum CodingKeys: String, CodingKey {
                case base_cost
                case cost_per_byte
            }
        }
        /// - Remark: Generated from `#/components/schemas/DataReceiverView`.
        public struct DataReceiverView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DataReceiverView/data_id`.
            public var data_id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/DataReceiverView/receiver_id`.
            public var receiver_id: Components.Schemas.AccountId
            /// Creates a new `DataReceiverView`.
            ///
            /// - Parameters:
            ///   - data_id:
            ///   - receiver_id:
            public init(
                data_id: Components.Schemas.CryptoHash,
                receiver_id: Components.Schemas.AccountId
            ) {
                self.data_id = data_id
                self.receiver_id = receiver_id
            }
            public enum CodingKeys: String, CodingKey {
                case data_id
                case receiver_id
            }
        }
        /// This action allows to execute the inner actions behalf of the defined sender.
        ///
        /// - Remark: Generated from `#/components/schemas/DelegateAction`.
        public struct DelegateAction: Codable, Hashable, Sendable {
            /// List of actions to be executed.
            ///
            /// With the meta transactions MVP defined in NEP-366, nested
            /// DelegateActions are not allowed. A separate type is used to enforce it.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/actions`.
            public var actions: [Components.Schemas.NonDelegateAction]
            /// The maximal height of the block in the blockchain below which the given DelegateAction is valid.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/max_block_height`.
            public var max_block_height: Swift.Int
            /// Nonce to ensure that the same delegate action is not sent twice by a
            /// relayer and should match for given account's `public_key`.
            /// After this action is processed it will increment.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/nonce`.
            public var nonce: Swift.Int
            /// Public key used to sign this delegated action.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/public_key`.
            public struct public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DelegateAction/public_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Public key used to sign this delegated action.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/public_key`.
            public var public_key: Components.Schemas.DelegateAction.public_keyPayload
            /// Receiver of the delegated actions.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/receiver_id`.
            public struct receiver_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DelegateAction/receiver_id/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `receiver_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Receiver of the delegated actions.
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/receiver_id`.
            public var receiver_id: Components.Schemas.DelegateAction.receiver_idPayload
            /// Signer of the delegated actions
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/sender_id`.
            public struct sender_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DelegateAction/sender_id/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `sender_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Signer of the delegated actions
            ///
            /// - Remark: Generated from `#/components/schemas/DelegateAction/sender_id`.
            public var sender_id: Components.Schemas.DelegateAction.sender_idPayload
            /// Creates a new `DelegateAction`.
            ///
            /// - Parameters:
            ///   - actions: List of actions to be executed.
            ///   - max_block_height: The maximal height of the block in the blockchain below which the given DelegateAction is valid.
            ///   - nonce: Nonce to ensure that the same delegate action is not sent twice by a
            ///   - public_key: Public key used to sign this delegated action.
            ///   - receiver_id: Receiver of the delegated actions.
            ///   - sender_id: Signer of the delegated actions
            public init(
                actions: [Components.Schemas.NonDelegateAction],
                max_block_height: Swift.Int,
                nonce: Swift.Int,
                public_key: Components.Schemas.DelegateAction.public_keyPayload,
                receiver_id: Components.Schemas.DelegateAction.receiver_idPayload,
                sender_id: Components.Schemas.DelegateAction.sender_idPayload
            ) {
                self.actions = actions
                self.max_block_height = max_block_height
                self.nonce = nonce
                self.public_key = public_key
                self.receiver_id = receiver_id
                self.sender_id = sender_id
            }
            public enum CodingKeys: String, CodingKey {
                case actions
                case max_block_height
                case nonce
                case public_key
                case receiver_id
                case sender_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteAccountAction`.
        public struct DeleteAccountAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteAccountAction/beneficiary_id`.
            public var beneficiary_id: Components.Schemas.AccountId
            /// Creates a new `DeleteAccountAction`.
            ///
            /// - Parameters:
            ///   - beneficiary_id:
            public init(beneficiary_id: Components.Schemas.AccountId) {
                self.beneficiary_id = beneficiary_id
            }
            public enum CodingKeys: String, CodingKey {
                case beneficiary_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteKeyAction`.
        public struct DeleteKeyAction: Codable, Hashable, Sendable {
            /// A public key associated with the access_key to be deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteKeyAction/public_key`.
            public struct public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeleteKeyAction/public_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// A public key associated with the access_key to be deleted.
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteKeyAction/public_key`.
            public var public_key: Components.Schemas.DeleteKeyAction.public_keyPayload
            /// Creates a new `DeleteKeyAction`.
            ///
            /// - Parameters:
            ///   - public_key: A public key associated with the access_key to be deleted.
            public init(public_key: Components.Schemas.DeleteKeyAction.public_keyPayload) {
                self.public_key = public_key
            }
            public enum CodingKeys: String, CodingKey {
                case public_key
            }
        }
        /// Deploy contract action
        ///
        /// - Remark: Generated from `#/components/schemas/DeployContractAction`.
        public struct DeployContractAction: Codable, Hashable, Sendable {
            /// WebAssembly binary
            ///
            /// - Remark: Generated from `#/components/schemas/DeployContractAction/code`.
            public var code: Swift.String
            /// Creates a new `DeployContractAction`.
            ///
            /// - Parameters:
            ///   - code: WebAssembly binary
            public init(code: Swift.String) {
                self.code = code
            }
            public enum CodingKeys: String, CodingKey {
                case code
            }
        }
        /// Deploy global contract action
        ///
        /// - Remark: Generated from `#/components/schemas/DeployGlobalContractAction`.
        public struct DeployGlobalContractAction: Codable, Hashable, Sendable {
            /// WebAssembly binary
            ///
            /// - Remark: Generated from `#/components/schemas/DeployGlobalContractAction/code`.
            public var code: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeployGlobalContractAction/deploy_mode`.
            public var deploy_mode: Components.Schemas.GlobalContractDeployMode
            /// Creates a new `DeployGlobalContractAction`.
            ///
            /// - Parameters:
            ///   - code: WebAssembly binary
            ///   - deploy_mode:
            public init(
                code: Swift.String,
                deploy_mode: Components.Schemas.GlobalContractDeployMode
            ) {
                self.code = code
                self.deploy_mode = deploy_mode
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case deploy_mode
            }
        }
        /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus`.
        public struct DetailedDebugStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/block_production_delay_millis`.
            public var block_production_delay_millis: Swift.Int
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/catchup_status`.
            public var catchup_status: [Components.Schemas.CatchupStatusView]
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/current_head_status`.
            public var current_head_status: Components.Schemas.BlockStatusView
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/current_header_head_status`.
            public var current_header_head_status: Components.Schemas.BlockStatusView
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/network_info`.
            public var network_info: Components.Schemas.NetworkInfoView
            /// - Remark: Generated from `#/components/schemas/DetailedDebugStatus/sync_status`.
            public var sync_status: Swift.String
            /// Creates a new `DetailedDebugStatus`.
            ///
            /// - Parameters:
            ///   - block_production_delay_millis:
            ///   - catchup_status:
            ///   - current_head_status:
            ///   - current_header_head_status:
            ///   - network_info:
            ///   - sync_status:
            public init(
                block_production_delay_millis: Swift.Int,
                catchup_status: [Components.Schemas.CatchupStatusView],
                current_head_status: Components.Schemas.BlockStatusView,
                current_header_head_status: Components.Schemas.BlockStatusView,
                network_info: Components.Schemas.NetworkInfoView,
                sync_status: Swift.String
            ) {
                self.block_production_delay_millis = block_production_delay_millis
                self.catchup_status = catchup_status
                self.current_head_status = current_head_status
                self.current_header_head_status = current_header_head_status
                self.network_info = network_info
                self.sync_status = sync_status
            }
            public enum CodingKeys: String, CodingKey {
                case block_production_delay_millis
                case catchup_status
                case current_head_status
                case current_header_head_status
                case network_info
                case sync_status
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInit`.
        @frozen public enum DeterministicAccountStateInit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInit/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInit/case1/V1`.
                public var V1: Components.Schemas.DeterministicAccountStateInitV1
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - V1:
                public init(V1: Components.Schemas.DeterministicAccountStateInitV1) {
                    self.V1 = V1
                }
                public enum CodingKeys: String, CodingKey {
                    case V1
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.V1 = try container.decode(
                        Components.Schemas.DeterministicAccountStateInitV1.self,
                        forKey: .V1
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "V1"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInit/case1`.
            case case1(Components.Schemas.DeterministicAccountStateInit.Case1Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInitV1`.
        public struct DeterministicAccountStateInitV1: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInitV1/code`.
            public var code: Components.Schemas.GlobalContractIdentifier
            /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInitV1/data`.
            public struct dataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/DeterministicAccountStateInitV1/data`.
            public var data: Components.Schemas.DeterministicAccountStateInitV1.dataPayload
            /// Creates a new `DeterministicAccountStateInitV1`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - data:
            public init(
                code: Components.Schemas.GlobalContractIdentifier,
                data: Components.Schemas.DeterministicAccountStateInitV1.dataPayload
            ) {
                self.code = code
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeterministicStateInitAction`.
        public struct DeterministicStateInitAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeterministicStateInitAction/deposit`.
            public var deposit: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/DeterministicStateInitAction/state_init`.
            public var state_init: Components.Schemas.DeterministicAccountStateInit
            /// Creates a new `DeterministicStateInitAction`.
            ///
            /// - Parameters:
            ///   - deposit:
            ///   - state_init:
            public init(
                deposit: Components.Schemas.NearToken,
                state_init: Components.Schemas.DeterministicAccountStateInit
            ) {
                self.deposit = deposit
                self.state_init = state_init
            }
            public enum CodingKeys: String, CodingKey {
                case deposit
                case state_init
            }
        }
        /// - Remark: Generated from `#/components/schemas/Direction`.
        @frozen public enum Direction: String, Codable, Hashable, Sendable, CaseIterable {
            case Left = "Left"
            case Right = "Right"
        }
        /// Configures how to dump state to external storage.
        ///
        /// - Remark: Generated from `#/components/schemas/DumpConfig`.
        public struct DumpConfig: Codable, Hashable, Sendable {
            /// Location of a json file with credentials allowing access to the bucket.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/credentials_file`.
            public var credentials_file: Swift.String?
            /// How often to check if a new epoch has started.
            /// Feel free to set to `None`, defaults are sensible.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/iteration_delay`.
            public struct iteration_delayPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DumpConfig/iteration_delay/value1`.
                public var value1: Components.Schemas.DurationAsStdSchemaProvider?
                /// - Remark: Generated from `#/components/schemas/DumpConfig/iteration_delay/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `iteration_delayPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.DurationAsStdSchemaProvider? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// How often to check if a new epoch has started.
            /// Feel free to set to `None`, defaults are sensible.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/iteration_delay`.
            public var iteration_delay: Components.Schemas.DumpConfig.iteration_delayPayload?
            /// Specifies where to write the obtained state parts.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/location`.
            public struct locationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DumpConfig/location/value1`.
                public var value1: Components.Schemas.ExternalStorageLocation
                /// Creates a new `locationPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExternalStorageLocation) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Specifies where to write the obtained state parts.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/location`.
            public var location: Components.Schemas.DumpConfig.locationPayload
            /// Use in case a node that dumps state to the external storage
            /// gets in trouble.
            ///
            /// - Remark: Generated from `#/components/schemas/DumpConfig/restart_dump_for_shards`.
            public var restart_dump_for_shards: [Components.Schemas.ShardId]?
            /// Creates a new `DumpConfig`.
            ///
            /// - Parameters:
            ///   - credentials_file: Location of a json file with credentials allowing access to the bucket.
            ///   - iteration_delay: How often to check if a new epoch has started.
            ///   - location: Specifies where to write the obtained state parts.
            ///   - restart_dump_for_shards: Use in case a node that dumps state to the external storage
            public init(
                credentials_file: Swift.String? = nil,
                iteration_delay: Components.Schemas.DumpConfig.iteration_delayPayload? = nil,
                location: Components.Schemas.DumpConfig.locationPayload,
                restart_dump_for_shards: [Components.Schemas.ShardId]? = nil
            ) {
                self.credentials_file = credentials_file
                self.iteration_delay = iteration_delay
                self.location = location
                self.restart_dump_for_shards = restart_dump_for_shards
            }
            public enum CodingKeys: String, CodingKey {
                case credentials_file
                case iteration_delay
                case location
                case restart_dump_for_shards
            }
        }
        /// - Remark: Generated from `#/components/schemas/DurationAsStdSchemaProvider`.
        public struct DurationAsStdSchemaProvider: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DurationAsStdSchemaProvider/nanos`.
            public var nanos: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/DurationAsStdSchemaProvider/secs`.
            public var secs: Swift.Int64
            /// Creates a new `DurationAsStdSchemaProvider`.
            ///
            /// - Parameters:
            ///   - nanos:
            ///   - secs:
            public init(
                nanos: Swift.Int32,
                secs: Swift.Int64
            ) {
                self.nanos = nanos
                self.secs = secs
            }
            public enum CodingKeys: String, CodingKey {
                case nanos
                case secs
            }
        }
        /// Epoch identifier -- wrapped hash, to make it easier to distinguish.
        /// EpochId of epoch T is the hash of last block in T-2
        /// EpochId of first two epochs is 0
        ///
        /// - Remark: Generated from `#/components/schemas/EpochId`.
        public struct EpochId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EpochId/value1`.
            public var value1: Components.Schemas.CryptoHash
            /// Creates a new `EpochId`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.CryptoHash) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(self.value1)
            }
        }
        /// - Remark: Generated from `#/components/schemas/EpochSyncConfig`.
        public struct EpochSyncConfig: Codable, Hashable, Sendable {
            /// If true, even if the node started from genesis, it will not perform epoch sync.
            /// There should be no reason to set this flag in production, because on both mainnet
            /// and testnet it would be infeasible to catch up from genesis without epoch sync.
            ///
            /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/disable_epoch_sync_for_bootstrapping`.
            public var disable_epoch_sync_for_bootstrapping: Swift.Bool?
            /// This serves as two purposes: (1) the node will not epoch sync and instead resort to
            /// header sync, if the genesis block is within this many blocks from the current block;
            /// (2) the node will reject an epoch sync proof if the provided proof is for an epoch
            /// that is more than this many blocks behind the current block.
            ///
            /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/epoch_sync_horizon`.
            public var epoch_sync_horizon: Swift.Int
            /// If true, the node will ignore epoch sync requests from the network. It is strongly
            /// recommended not to set this flag, because it will prevent other nodes from
            /// bootstrapping. This flag is only included as a kill-switch and may be removed in a
            /// future release. Please note that epoch sync requests are heavily rate limited and
            /// cached, and therefore should not affect the performance of the node or introduce
            /// any non-negligible increase in network traffic.
            ///
            /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/ignore_epoch_sync_network_requests`.
            public var ignore_epoch_sync_network_requests: Swift.Bool?
            /// Timeout for epoch sync requests. The node will continue retrying indefinitely even
            /// if this timeout is exceeded.
            ///
            /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/timeout_for_epoch_sync`.
            public struct timeout_for_epoch_syncPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/timeout_for_epoch_sync/value1`.
                public var value1: Components.Schemas.DurationAsStdSchemaProvider
                /// Creates a new `timeout_for_epoch_syncPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.DurationAsStdSchemaProvider) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Timeout for epoch sync requests. The node will continue retrying indefinitely even
            /// if this timeout is exceeded.
            ///
            /// - Remark: Generated from `#/components/schemas/EpochSyncConfig/timeout_for_epoch_sync`.
            public var timeout_for_epoch_sync: Components.Schemas.EpochSyncConfig.timeout_for_epoch_syncPayload
            /// Creates a new `EpochSyncConfig`.
            ///
            /// - Parameters:
            ///   - disable_epoch_sync_for_bootstrapping: If true, even if the node started from genesis, it will not perform epoch sync.
            ///   - epoch_sync_horizon: This serves as two purposes: (1) the node will not epoch sync and instead resort to
            ///   - ignore_epoch_sync_network_requests: If true, the node will ignore epoch sync requests from the network. It is strongly
            ///   - timeout_for_epoch_sync: Timeout for epoch sync requests. The node will continue retrying indefinitely even
            public init(
                disable_epoch_sync_for_bootstrapping: Swift.Bool? = nil,
                epoch_sync_horizon: Swift.Int,
                ignore_epoch_sync_network_requests: Swift.Bool? = nil,
                timeout_for_epoch_sync: Components.Schemas.EpochSyncConfig.timeout_for_epoch_syncPayload
            ) {
                self.disable_epoch_sync_for_bootstrapping = disable_epoch_sync_for_bootstrapping
                self.epoch_sync_horizon = epoch_sync_horizon
                self.ignore_epoch_sync_network_requests = ignore_epoch_sync_network_requests
                self.timeout_for_epoch_sync = timeout_for_epoch_sync
            }
            public enum CodingKeys: String, CodingKey {
                case disable_epoch_sync_for_bootstrapping
                case epoch_sync_horizon
                case ignore_epoch_sync_network_requests
                case timeout_for_epoch_sync
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExecutionMetadataView`.
        public struct ExecutionMetadataView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExecutionMetadataView/gas_profile`.
            public var gas_profile: [Components.Schemas.CostGasUsed]?
            /// - Remark: Generated from `#/components/schemas/ExecutionMetadataView/version`.
            public var version: Swift.Int
            /// Creates a new `ExecutionMetadataView`.
            ///
            /// - Parameters:
            ///   - gas_profile:
            ///   - version:
            public init(
                gas_profile: [Components.Schemas.CostGasUsed]? = nil,
                version: Swift.Int
            ) {
                self.gas_profile = gas_profile
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case gas_profile
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView`.
        public struct ExecutionOutcomeView: Codable, Hashable, Sendable {
            /// The id of the account on which the execution happens. For transaction this is signer_id,
            /// for receipt this is receiver_id.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/executor_id`.
            public struct executor_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/executor_id/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `executor_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The id of the account on which the execution happens. For transaction this is signer_id,
            /// for receipt this is receiver_id.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/executor_id`.
            public var executor_id: Components.Schemas.ExecutionOutcomeView.executor_idPayload
            /// The amount of the gas burnt by the given transaction or receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/gas_burnt`.
            public struct gas_burntPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/gas_burnt/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `gas_burntPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The amount of the gas burnt by the given transaction or receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/gas_burnt`.
            public var gas_burnt: Components.Schemas.ExecutionOutcomeView.gas_burntPayload
            /// Logs from this transaction or receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/logs`.
            public var logs: [Swift.String]
            /// Execution metadata, versioned
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/metadata/value1`.
                public var value1: Components.Schemas.ExecutionMetadataView
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExecutionMetadataView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Execution metadata, versioned
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/metadata`.
            public var metadata: Components.Schemas.ExecutionOutcomeView.metadataPayload?
            /// Receipt IDs generated by this transaction or receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/receipt_ids`.
            public var receipt_ids: [Components.Schemas.CryptoHash]
            /// Execution status. Contains the result in case of successful execution.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/status`.
            public struct statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/status/value1`.
                public var value1: Components.Schemas.ExecutionStatusView
                /// Creates a new `statusPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExecutionStatusView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Execution status. Contains the result in case of successful execution.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/status`.
            public var status: Components.Schemas.ExecutionOutcomeView.statusPayload
            /// The amount of tokens burnt corresponding to the burnt gas amount.
            /// This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because
            /// the prepaid gas price might be lower than the actual gas price and it creates a deficit.
            /// `tokens_burnt` also contains the penalty subtracted from refunds, while
            /// `gas_burnt` only contains the gas that we actually burn for the execution.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/tokens_burnt`.
            public struct tokens_burntPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/tokens_burnt/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `tokens_burntPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The amount of tokens burnt corresponding to the burnt gas amount.
            /// This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because
            /// the prepaid gas price might be lower than the actual gas price and it creates a deficit.
            /// `tokens_burnt` also contains the penalty subtracted from refunds, while
            /// `gas_burnt` only contains the gas that we actually burn for the execution.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeView/tokens_burnt`.
            public var tokens_burnt: Components.Schemas.ExecutionOutcomeView.tokens_burntPayload
            /// Creates a new `ExecutionOutcomeView`.
            ///
            /// - Parameters:
            ///   - executor_id: The id of the account on which the execution happens. For transaction this is signer_id,
            ///   - gas_burnt: The amount of the gas burnt by the given transaction or receipt.
            ///   - logs: Logs from this transaction or receipt.
            ///   - metadata: Execution metadata, versioned
            ///   - receipt_ids: Receipt IDs generated by this transaction or receipt.
            ///   - status: Execution status. Contains the result in case of successful execution.
            ///   - tokens_burnt: The amount of tokens burnt corresponding to the burnt gas amount.
            public init(
                executor_id: Components.Schemas.ExecutionOutcomeView.executor_idPayload,
                gas_burnt: Components.Schemas.ExecutionOutcomeView.gas_burntPayload,
                logs: [Swift.String],
                metadata: Components.Schemas.ExecutionOutcomeView.metadataPayload? = nil,
                receipt_ids: [Components.Schemas.CryptoHash],
                status: Components.Schemas.ExecutionOutcomeView.statusPayload,
                tokens_burnt: Components.Schemas.ExecutionOutcomeView.tokens_burntPayload
            ) {
                self.executor_id = executor_id
                self.gas_burnt = gas_burnt
                self.logs = logs
                self.metadata = metadata
                self.receipt_ids = receipt_ids
                self.status = status
                self.tokens_burnt = tokens_burnt
            }
            public enum CodingKeys: String, CodingKey {
                case executor_id
                case gas_burnt
                case logs
                case metadata
                case receipt_ids
                case status
                case tokens_burnt
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeWithIdView`.
        public struct ExecutionOutcomeWithIdView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeWithIdView/block_hash`.
            public var block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeWithIdView/id`.
            public var id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeWithIdView/outcome`.
            public var outcome: Components.Schemas.ExecutionOutcomeView
            /// - Remark: Generated from `#/components/schemas/ExecutionOutcomeWithIdView/proof`.
            public var proof: [Components.Schemas.MerklePathItem]
            /// Creates a new `ExecutionOutcomeWithIdView`.
            ///
            /// - Parameters:
            ///   - block_hash:
            ///   - id:
            ///   - outcome:
            ///   - proof:
            public init(
                block_hash: Components.Schemas.CryptoHash,
                id: Components.Schemas.CryptoHash,
                outcome: Components.Schemas.ExecutionOutcomeView,
                proof: [Components.Schemas.MerklePathItem]
            ) {
                self.block_hash = block_hash
                self.id = id
                self.outcome = outcome
                self.proof = proof
            }
            public enum CodingKeys: String, CodingKey {
                case block_hash
                case id
                case outcome
                case proof
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExecutionStatusView`.
        @frozen public enum ExecutionStatusView: Codable, Hashable, Sendable {
            /// The execution is pending or unknown.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Unknown = "Unknown"
            }
            /// The execution is pending or unknown.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case1`.
            case case1(Components.Schemas.ExecutionStatusView.Case1Payload)
            /// The execution has failed.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case2/Failure`.
                public var Failure: Components.Schemas.TxExecutionError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - Failure:
                public init(Failure: Components.Schemas.TxExecutionError) {
                    self.Failure = Failure
                }
                public enum CodingKeys: String, CodingKey {
                    case Failure
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Failure = try container.decode(
                        Components.Schemas.TxExecutionError.self,
                        forKey: .Failure
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Failure"
                    ])
                }
            }
            /// The execution has failed.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case2`.
            case case2(Components.Schemas.ExecutionStatusView.Case2Payload)
            /// The final action succeeded and returned some value or an empty vec encoded in base64.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case3/SuccessValue`.
                public var SuccessValue: Swift.String
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - SuccessValue:
                public init(SuccessValue: Swift.String) {
                    self.SuccessValue = SuccessValue
                }
                public enum CodingKeys: String, CodingKey {
                    case SuccessValue
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.SuccessValue = try container.decode(
                        Swift.String.self,
                        forKey: .SuccessValue
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "SuccessValue"
                    ])
                }
            }
            /// The final action succeeded and returned some value or an empty vec encoded in base64.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case3`.
            case case3(Components.Schemas.ExecutionStatusView.Case3Payload)
            /// The final action of the receipt returned a promise or the signed transaction was converted
            /// to a receipt. Contains the receipt_id of the generated receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case4/SuccessReceiptId`.
                public var SuccessReceiptId: Components.Schemas.CryptoHash
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - SuccessReceiptId:
                public init(SuccessReceiptId: Components.Schemas.CryptoHash) {
                    self.SuccessReceiptId = SuccessReceiptId
                }
                public enum CodingKeys: String, CodingKey {
                    case SuccessReceiptId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.SuccessReceiptId = try container.decode(
                        Components.Schemas.CryptoHash.self,
                        forKey: .SuccessReceiptId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "SuccessReceiptId"
                    ])
                }
            }
            /// The final action of the receipt returned a promise or the signed transaction was converted
            /// to a receipt. Contains the receipt_id of the generated receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionStatusView/case4`.
            case case4(Components.Schemas.ExecutionStatusView.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Typed view of ExtCostsConfig to preserve JSON output field names in protocol
        /// config RPC output.
        ///
        /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView`.
        public struct ExtCostsConfigView: Codable, Hashable, Sendable {
            /// Base cost for multiexp
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_base`.
            public struct alt_bn128_g1_multiexp_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_g1_multiexp_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for multiexp
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_base`.
            public var alt_bn128_g1_multiexp_base: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_multiexp_basePayload
            /// Per element cost for multiexp
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_element`.
            public struct alt_bn128_g1_multiexp_elementPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_element/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_g1_multiexp_elementPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Per element cost for multiexp
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_multiexp_element`.
            public var alt_bn128_g1_multiexp_element: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_multiexp_elementPayload
            /// Base cost for sum
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_base`.
            public struct alt_bn128_g1_sum_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_g1_sum_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for sum
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_base`.
            public var alt_bn128_g1_sum_base: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_sum_basePayload
            /// Per element cost for sum
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_element`.
            public struct alt_bn128_g1_sum_elementPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_element/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_g1_sum_elementPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Per element cost for sum
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_g1_sum_element`.
            public var alt_bn128_g1_sum_element: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_sum_elementPayload
            /// Base cost for pairing check
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_base`.
            public struct alt_bn128_pairing_check_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_pairing_check_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for pairing check
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_base`.
            public var alt_bn128_pairing_check_base: Components.Schemas.ExtCostsConfigView.alt_bn128_pairing_check_basePayload
            /// Per element cost for pairing check
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_element`.
            public struct alt_bn128_pairing_check_elementPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_element/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `alt_bn128_pairing_check_elementPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Per element cost for pairing check
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/alt_bn128_pairing_check_element`.
            public var alt_bn128_pairing_check_element: Components.Schemas.ExtCostsConfigView.alt_bn128_pairing_check_elementPayload
            /// Base cost for calling a host function.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/base`.
            public struct basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for calling a host function.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/base`.
            public var base: Components.Schemas.ExtCostsConfigView.basePayload
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_g1_multiexp_base`.
            public var bls12381_g1_multiexp_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_g1_multiexp_element`.
            public var bls12381_g1_multiexp_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_g2_multiexp_base`.
            public var bls12381_g2_multiexp_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_g2_multiexp_element`.
            public var bls12381_g2_multiexp_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_map_fp2_to_g2_base`.
            public var bls12381_map_fp2_to_g2_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_map_fp2_to_g2_element`.
            public var bls12381_map_fp2_to_g2_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_map_fp_to_g1_base`.
            public var bls12381_map_fp_to_g1_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_map_fp_to_g1_element`.
            public var bls12381_map_fp_to_g1_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p1_decompress_base`.
            public var bls12381_p1_decompress_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p1_decompress_element`.
            public var bls12381_p1_decompress_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p1_sum_base`.
            public var bls12381_p1_sum_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p1_sum_element`.
            public var bls12381_p1_sum_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p2_decompress_base`.
            public var bls12381_p2_decompress_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p2_decompress_element`.
            public var bls12381_p2_decompress_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p2_sum_base`.
            public var bls12381_p2_sum_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_p2_sum_element`.
            public var bls12381_p2_sum_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_pairing_base`.
            public var bls12381_pairing_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/bls12381_pairing_element`.
            public var bls12381_pairing_element: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_compile_base`.
            public var contract_compile_base: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_compile_bytes`.
            public var contract_compile_bytes: Components.Schemas.NearGas
            /// Base cost of loading a pre-compiled contract
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_base`.
            public struct contract_loading_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `contract_loading_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost of loading a pre-compiled contract
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_base`.
            public var contract_loading_base: Components.Schemas.ExtCostsConfigView.contract_loading_basePayload
            /// Cost per byte of loading a pre-compiled contract
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_bytes`.
            public struct contract_loading_bytesPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_bytes/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `contract_loading_bytesPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost per byte of loading a pre-compiled contract
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/contract_loading_bytes`.
            public var contract_loading_bytes: Components.Schemas.ExtCostsConfigView.contract_loading_bytesPayload
            /// Cost of calling ecrecover
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ecrecover_base`.
            public struct ecrecover_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ecrecover_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `ecrecover_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of calling ecrecover
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ecrecover_base`.
            public var ecrecover_base: Components.Schemas.ExtCostsConfigView.ecrecover_basePayload
            /// Cost of getting ed25519 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_base`.
            public struct ed25519_verify_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `ed25519_verify_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting ed25519 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_base`.
            public var ed25519_verify_base: Components.Schemas.ExtCostsConfigView.ed25519_verify_basePayload
            /// Cost of getting ed25519 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_byte`.
            public struct ed25519_verify_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `ed25519_verify_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting ed25519 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ed25519_verify_byte`.
            public var ed25519_verify_byte: Components.Schemas.ExtCostsConfigView.ed25519_verify_bytePayload
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_base`.
            public struct keccak256_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `keccak256_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_base`.
            public var keccak256_base: Components.Schemas.ExtCostsConfigView.keccak256_basePayload
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_byte`.
            public struct keccak256_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `keccak256_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak256_byte`.
            public var keccak256_byte: Components.Schemas.ExtCostsConfigView.keccak256_bytePayload
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_base`.
            public struct keccak512_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `keccak512_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_base`.
            public var keccak512_base: Components.Schemas.ExtCostsConfigView.keccak512_basePayload
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_byte`.
            public struct keccak512_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `keccak512_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/keccak512_byte`.
            public var keccak512_byte: Components.Schemas.ExtCostsConfigView.keccak512_bytePayload
            /// Cost for calling logging.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_base`.
            public struct log_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `log_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for calling logging.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_base`.
            public var log_base: Components.Schemas.ExtCostsConfigView.log_basePayload
            /// Cost for logging per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_byte`.
            public struct log_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `log_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for logging per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/log_byte`.
            public var log_byte: Components.Schemas.ExtCostsConfigView.log_bytePayload
            /// Cost for calling `promise_and`
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_base`.
            public struct promise_and_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `promise_and_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for calling `promise_and`
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_base`.
            public var promise_and_base: Components.Schemas.ExtCostsConfigView.promise_and_basePayload
            /// Cost for calling `promise_and` for each promise
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_per_promise`.
            public struct promise_and_per_promisePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_per_promise/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `promise_and_per_promisePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for calling `promise_and` for each promise
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_and_per_promise`.
            public var promise_and_per_promise: Components.Schemas.ExtCostsConfigView.promise_and_per_promisePayload
            /// Cost for calling `promise_return`
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_return`.
            public struct promise_returnPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_return/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `promise_returnPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for calling `promise_return`
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/promise_return`.
            public var promise_return: Components.Schemas.ExtCostsConfigView.promise_returnPayload
            /// Cost for reading trie node from memory
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_cached_trie_node`.
            public struct read_cached_trie_nodePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_cached_trie_node/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `read_cached_trie_nodePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for reading trie node from memory
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_cached_trie_node`.
            public var read_cached_trie_node: Components.Schemas.ExtCostsConfigView.read_cached_trie_nodePayload
            /// Base cost for guest memory read
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_base`.
            public struct read_memory_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `read_memory_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for guest memory read
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_base`.
            public var read_memory_base: Components.Schemas.ExtCostsConfigView.read_memory_basePayload
            /// Cost for guest memory read
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_byte`.
            public struct read_memory_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `read_memory_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for guest memory read
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_memory_byte`.
            public var read_memory_byte: Components.Schemas.ExtCostsConfigView.read_memory_bytePayload
            /// Base cost for reading from register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_base`.
            public struct read_register_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `read_register_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for reading from register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_base`.
            public var read_register_base: Components.Schemas.ExtCostsConfigView.read_register_basePayload
            /// Cost for reading byte from register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_byte`.
            public struct read_register_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `read_register_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for reading byte from register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/read_register_byte`.
            public var read_register_byte: Components.Schemas.ExtCostsConfigView.read_register_bytePayload
            /// Cost of getting ripemd160 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_base`.
            public struct ripemd160_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `ripemd160_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting ripemd160 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_base`.
            public var ripemd160_base: Components.Schemas.ExtCostsConfigView.ripemd160_basePayload
            /// Cost of getting ripemd160 per message block
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_block`.
            public struct ripemd160_blockPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_block/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `ripemd160_blockPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting ripemd160 per message block
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/ripemd160_block`.
            public var ripemd160_block: Components.Schemas.ExtCostsConfigView.ripemd160_blockPayload
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_base`.
            public struct sha256_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `sha256_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_base`.
            public var sha256_base: Components.Schemas.ExtCostsConfigView.sha256_basePayload
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_byte`.
            public struct sha256_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `sha256_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of getting sha256 per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/sha256_byte`.
            public var sha256_byte: Components.Schemas.ExtCostsConfigView.sha256_bytePayload
            /// Storage trie check for key existence cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_base`.
            public struct storage_has_key_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_has_key_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie check for key existence cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_base`.
            public var storage_has_key_base: Components.Schemas.ExtCostsConfigView.storage_has_key_basePayload
            /// Storage trie check for key existence per key byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_byte`.
            public struct storage_has_key_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_has_key_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie check for key existence per key byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_has_key_byte`.
            public var storage_has_key_byte: Components.Schemas.ExtCostsConfigView.storage_has_key_bytePayload
            /// Create trie range iterator cost per byte of from key.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_from_byte`.
            public struct storage_iter_create_from_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_from_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_create_from_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Create trie range iterator cost per byte of from key.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_from_byte`.
            public var storage_iter_create_from_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_from_bytePayload
            /// Create trie prefix iterator cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_base`.
            public struct storage_iter_create_prefix_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_create_prefix_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Create trie prefix iterator cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_base`.
            public var storage_iter_create_prefix_base: Components.Schemas.ExtCostsConfigView.storage_iter_create_prefix_basePayload
            /// Create trie prefix iterator cost per byte.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_byte`.
            public struct storage_iter_create_prefix_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_create_prefix_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Create trie prefix iterator cost per byte.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_prefix_byte`.
            public var storage_iter_create_prefix_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_prefix_bytePayload
            /// Create trie range iterator cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_range_base`.
            public struct storage_iter_create_range_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_range_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_create_range_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Create trie range iterator cost base
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_range_base`.
            public var storage_iter_create_range_base: Components.Schemas.ExtCostsConfigView.storage_iter_create_range_basePayload
            /// Create trie range iterator cost per byte of to key.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_to_byte`.
            public struct storage_iter_create_to_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_to_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_create_to_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Create trie range iterator cost per byte of to key.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_create_to_byte`.
            public var storage_iter_create_to_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_to_bytePayload
            /// Trie iterator per key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_base`.
            public struct storage_iter_next_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_next_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Trie iterator per key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_base`.
            public var storage_iter_next_base: Components.Schemas.ExtCostsConfigView.storage_iter_next_basePayload
            /// Trie iterator next key byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_key_byte`.
            public struct storage_iter_next_key_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_key_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_next_key_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Trie iterator next key byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_key_byte`.
            public var storage_iter_next_key_byte: Components.Schemas.ExtCostsConfigView.storage_iter_next_key_bytePayload
            /// Trie iterator next key byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_value_byte`.
            public struct storage_iter_next_value_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_value_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_iter_next_value_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Trie iterator next key byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_iter_next_value_byte`.
            public var storage_iter_next_value_byte: Components.Schemas.ExtCostsConfigView.storage_iter_next_value_bytePayload
            /// Storage trie read key overhead base cost, when doing large reads
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_base`.
            public struct storage_large_read_overhead_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_large_read_overhead_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie read key overhead base cost, when doing large reads
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_base`.
            public var storage_large_read_overhead_base: Components.Schemas.ExtCostsConfigView.storage_large_read_overhead_basePayload
            /// Storage trie read key overhead  per-byte cost, when doing large reads
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_byte`.
            public struct storage_large_read_overhead_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_large_read_overhead_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie read key overhead  per-byte cost, when doing large reads
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_large_read_overhead_byte`.
            public var storage_large_read_overhead_byte: Components.Schemas.ExtCostsConfigView.storage_large_read_overhead_bytePayload
            /// Storage trie read key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_base`.
            public struct storage_read_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_read_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie read key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_base`.
            public var storage_read_base: Components.Schemas.ExtCostsConfigView.storage_read_basePayload
            /// Storage trie read key per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_key_byte`.
            public struct storage_read_key_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_key_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_read_key_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie read key per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_key_byte`.
            public var storage_read_key_byte: Components.Schemas.ExtCostsConfigView.storage_read_key_bytePayload
            /// Storage trie read value cost per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_value_byte`.
            public struct storage_read_value_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_value_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_read_value_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie read value cost per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_read_value_byte`.
            public var storage_read_value_byte: Components.Schemas.ExtCostsConfigView.storage_read_value_bytePayload
            /// Remove key from trie base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_base`.
            public struct storage_remove_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_remove_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Remove key from trie base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_base`.
            public var storage_remove_base: Components.Schemas.ExtCostsConfigView.storage_remove_basePayload
            /// Remove key from trie per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_key_byte`.
            public struct storage_remove_key_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_key_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_remove_key_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Remove key from trie per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_key_byte`.
            public var storage_remove_key_byte: Components.Schemas.ExtCostsConfigView.storage_remove_key_bytePayload
            /// Remove key from trie ret value byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_ret_value_byte`.
            public struct storage_remove_ret_value_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_ret_value_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_remove_ret_value_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Remove key from trie ret value byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_remove_ret_value_byte`.
            public var storage_remove_ret_value_byte: Components.Schemas.ExtCostsConfigView.storage_remove_ret_value_bytePayload
            /// Storage trie write key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_base`.
            public struct storage_write_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_write_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie write key base cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_base`.
            public var storage_write_base: Components.Schemas.ExtCostsConfigView.storage_write_basePayload
            /// Storage trie write cost per byte of evicted value.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_evicted_byte`.
            public struct storage_write_evicted_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_evicted_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_write_evicted_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie write cost per byte of evicted value.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_evicted_byte`.
            public var storage_write_evicted_byte: Components.Schemas.ExtCostsConfigView.storage_write_evicted_bytePayload
            /// Storage trie write key per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_key_byte`.
            public struct storage_write_key_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_key_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_write_key_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie write key per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_key_byte`.
            public var storage_write_key_byte: Components.Schemas.ExtCostsConfigView.storage_write_key_bytePayload
            /// Storage trie write value per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_value_byte`.
            public struct storage_write_value_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_value_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `storage_write_value_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Storage trie write value per byte cost
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/storage_write_value_byte`.
            public var storage_write_value_byte: Components.Schemas.ExtCostsConfigView.storage_write_value_bytePayload
            /// Cost per reading trie node from DB
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/touching_trie_node`.
            public struct touching_trie_nodePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/touching_trie_node/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `touching_trie_nodePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost per reading trie node from DB
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/touching_trie_node`.
            public var touching_trie_node: Components.Schemas.ExtCostsConfigView.touching_trie_nodePayload
            /// Base cost of decoding utf16. It's used for `log_utf16`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_base`.
            public struct utf16_decoding_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `utf16_decoding_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost of decoding utf16. It's used for `log_utf16`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_base`.
            public var utf16_decoding_base: Components.Schemas.ExtCostsConfigView.utf16_decoding_basePayload
            /// Cost per byte of decoding utf16. It's used for `log_utf16`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_byte`.
            public struct utf16_decoding_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `utf16_decoding_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost per byte of decoding utf16. It's used for `log_utf16`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf16_decoding_byte`.
            public var utf16_decoding_byte: Components.Schemas.ExtCostsConfigView.utf16_decoding_bytePayload
            /// Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_base`.
            public struct utf8_decoding_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `utf8_decoding_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_base`.
            public var utf8_decoding_base: Components.Schemas.ExtCostsConfigView.utf8_decoding_basePayload
            /// Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_byte`.
            public struct utf8_decoding_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `utf8_decoding_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/utf8_decoding_byte`.
            public var utf8_decoding_byte: Components.Schemas.ExtCostsConfigView.utf8_decoding_bytePayload
            /// Cost of calling `validator_stake`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_stake_base`.
            public struct validator_stake_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_stake_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `validator_stake_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of calling `validator_stake`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_stake_base`.
            public var validator_stake_base: Components.Schemas.ExtCostsConfigView.validator_stake_basePayload
            /// Cost of calling `validator_total_stake`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_total_stake_base`.
            public struct validator_total_stake_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_total_stake_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `validator_total_stake_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost of calling `validator_total_stake`.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/validator_total_stake_base`.
            public var validator_total_stake_base: Components.Schemas.ExtCostsConfigView.validator_total_stake_basePayload
            /// Base cost for guest memory write
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_base`.
            public struct write_memory_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `write_memory_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for guest memory write
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_base`.
            public var write_memory_base: Components.Schemas.ExtCostsConfigView.write_memory_basePayload
            /// Cost for guest memory write per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_byte`.
            public struct write_memory_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `write_memory_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for guest memory write per byte
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_memory_byte`.
            public var write_memory_byte: Components.Schemas.ExtCostsConfigView.write_memory_bytePayload
            /// Base cost for writing into register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_base`.
            public struct write_register_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `write_register_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for writing into register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_base`.
            public var write_register_base: Components.Schemas.ExtCostsConfigView.write_register_basePayload
            /// Cost for writing byte into register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_byte`.
            public struct write_register_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `write_register_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Cost for writing byte into register
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/write_register_byte`.
            public var write_register_byte: Components.Schemas.ExtCostsConfigView.write_register_bytePayload
            /// Base cost for creating a yield promise.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_base`.
            public struct yield_create_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `yield_create_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for creating a yield promise.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_base`.
            public var yield_create_base: Components.Schemas.ExtCostsConfigView.yield_create_basePayload
            /// Per byte cost of arguments and method name.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_byte`.
            public struct yield_create_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `yield_create_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Per byte cost of arguments and method name.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_create_byte`.
            public var yield_create_byte: Components.Schemas.ExtCostsConfigView.yield_create_bytePayload
            /// Base cost for resuming a yield receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_base`.
            public struct yield_resume_basePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_base/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `yield_resume_basePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Base cost for resuming a yield receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_base`.
            public var yield_resume_base: Components.Schemas.ExtCostsConfigView.yield_resume_basePayload
            /// Per byte cost of resume payload.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_byte`.
            public struct yield_resume_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_byte/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `yield_resume_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Per byte cost of resume payload.
            ///
            /// - Remark: Generated from `#/components/schemas/ExtCostsConfigView/yield_resume_byte`.
            public var yield_resume_byte: Components.Schemas.ExtCostsConfigView.yield_resume_bytePayload
            /// Creates a new `ExtCostsConfigView`.
            ///
            /// - Parameters:
            ///   - alt_bn128_g1_multiexp_base: Base cost for multiexp
            ///   - alt_bn128_g1_multiexp_element: Per element cost for multiexp
            ///   - alt_bn128_g1_sum_base: Base cost for sum
            ///   - alt_bn128_g1_sum_element: Per element cost for sum
            ///   - alt_bn128_pairing_check_base: Base cost for pairing check
            ///   - alt_bn128_pairing_check_element: Per element cost for pairing check
            ///   - base: Base cost for calling a host function.
            ///   - bls12381_g1_multiexp_base:
            ///   - bls12381_g1_multiexp_element:
            ///   - bls12381_g2_multiexp_base:
            ///   - bls12381_g2_multiexp_element:
            ///   - bls12381_map_fp2_to_g2_base:
            ///   - bls12381_map_fp2_to_g2_element:
            ///   - bls12381_map_fp_to_g1_base:
            ///   - bls12381_map_fp_to_g1_element:
            ///   - bls12381_p1_decompress_base:
            ///   - bls12381_p1_decompress_element:
            ///   - bls12381_p1_sum_base:
            ///   - bls12381_p1_sum_element:
            ///   - bls12381_p2_decompress_base:
            ///   - bls12381_p2_decompress_element:
            ///   - bls12381_p2_sum_base:
            ///   - bls12381_p2_sum_element:
            ///   - bls12381_pairing_base:
            ///   - bls12381_pairing_element:
            ///   - contract_compile_base:
            ///   - contract_compile_bytes:
            ///   - contract_loading_base: Base cost of loading a pre-compiled contract
            ///   - contract_loading_bytes: Cost per byte of loading a pre-compiled contract
            ///   - ecrecover_base: Cost of calling ecrecover
            ///   - ed25519_verify_base: Cost of getting ed25519 base
            ///   - ed25519_verify_byte: Cost of getting ed25519 per byte
            ///   - keccak256_base: Cost of getting sha256 base
            ///   - keccak256_byte: Cost of getting sha256 per byte
            ///   - keccak512_base: Cost of getting sha256 base
            ///   - keccak512_byte: Cost of getting sha256 per byte
            ///   - log_base: Cost for calling logging.
            ///   - log_byte: Cost for logging per byte
            ///   - promise_and_base: Cost for calling `promise_and`
            ///   - promise_and_per_promise: Cost for calling `promise_and` for each promise
            ///   - promise_return: Cost for calling `promise_return`
            ///   - read_cached_trie_node: Cost for reading trie node from memory
            ///   - read_memory_base: Base cost for guest memory read
            ///   - read_memory_byte: Cost for guest memory read
            ///   - read_register_base: Base cost for reading from register
            ///   - read_register_byte: Cost for reading byte from register
            ///   - ripemd160_base: Cost of getting ripemd160 base
            ///   - ripemd160_block: Cost of getting ripemd160 per message block
            ///   - sha256_base: Cost of getting sha256 base
            ///   - sha256_byte: Cost of getting sha256 per byte
            ///   - storage_has_key_base: Storage trie check for key existence cost base
            ///   - storage_has_key_byte: Storage trie check for key existence per key byte
            ///   - storage_iter_create_from_byte: Create trie range iterator cost per byte of from key.
            ///   - storage_iter_create_prefix_base: Create trie prefix iterator cost base
            ///   - storage_iter_create_prefix_byte: Create trie prefix iterator cost per byte.
            ///   - storage_iter_create_range_base: Create trie range iterator cost base
            ///   - storage_iter_create_to_byte: Create trie range iterator cost per byte of to key.
            ///   - storage_iter_next_base: Trie iterator per key base cost
            ///   - storage_iter_next_key_byte: Trie iterator next key byte cost
            ///   - storage_iter_next_value_byte: Trie iterator next key byte cost
            ///   - storage_large_read_overhead_base: Storage trie read key overhead base cost, when doing large reads
            ///   - storage_large_read_overhead_byte: Storage trie read key overhead  per-byte cost, when doing large reads
            ///   - storage_read_base: Storage trie read key base cost
            ///   - storage_read_key_byte: Storage trie read key per byte cost
            ///   - storage_read_value_byte: Storage trie read value cost per byte cost
            ///   - storage_remove_base: Remove key from trie base cost
            ///   - storage_remove_key_byte: Remove key from trie per byte cost
            ///   - storage_remove_ret_value_byte: Remove key from trie ret value byte cost
            ///   - storage_write_base: Storage trie write key base cost
            ///   - storage_write_evicted_byte: Storage trie write cost per byte of evicted value.
            ///   - storage_write_key_byte: Storage trie write key per byte cost
            ///   - storage_write_value_byte: Storage trie write value per byte cost
            ///   - touching_trie_node: Cost per reading trie node from DB
            ///   - utf16_decoding_base: Base cost of decoding utf16. It's used for `log_utf16`.
            ///   - utf16_decoding_byte: Cost per byte of decoding utf16. It's used for `log_utf16`.
            ///   - utf8_decoding_base: Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///   - utf8_decoding_byte: Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
            ///   - validator_stake_base: Cost of calling `validator_stake`.
            ///   - validator_total_stake_base: Cost of calling `validator_total_stake`.
            ///   - write_memory_base: Base cost for guest memory write
            ///   - write_memory_byte: Cost for guest memory write per byte
            ///   - write_register_base: Base cost for writing into register
            ///   - write_register_byte: Cost for writing byte into register
            ///   - yield_create_base: Base cost for creating a yield promise.
            ///   - yield_create_byte: Per byte cost of arguments and method name.
            ///   - yield_resume_base: Base cost for resuming a yield receipt.
            ///   - yield_resume_byte: Per byte cost of resume payload.
            public init(
                alt_bn128_g1_multiexp_base: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_multiexp_basePayload,
                alt_bn128_g1_multiexp_element: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_multiexp_elementPayload,
                alt_bn128_g1_sum_base: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_sum_basePayload,
                alt_bn128_g1_sum_element: Components.Schemas.ExtCostsConfigView.alt_bn128_g1_sum_elementPayload,
                alt_bn128_pairing_check_base: Components.Schemas.ExtCostsConfigView.alt_bn128_pairing_check_basePayload,
                alt_bn128_pairing_check_element: Components.Schemas.ExtCostsConfigView.alt_bn128_pairing_check_elementPayload,
                base: Components.Schemas.ExtCostsConfigView.basePayload,
                bls12381_g1_multiexp_base: Components.Schemas.NearGas,
                bls12381_g1_multiexp_element: Components.Schemas.NearGas,
                bls12381_g2_multiexp_base: Components.Schemas.NearGas,
                bls12381_g2_multiexp_element: Components.Schemas.NearGas,
                bls12381_map_fp2_to_g2_base: Components.Schemas.NearGas,
                bls12381_map_fp2_to_g2_element: Components.Schemas.NearGas,
                bls12381_map_fp_to_g1_base: Components.Schemas.NearGas,
                bls12381_map_fp_to_g1_element: Components.Schemas.NearGas,
                bls12381_p1_decompress_base: Components.Schemas.NearGas,
                bls12381_p1_decompress_element: Components.Schemas.NearGas,
                bls12381_p1_sum_base: Components.Schemas.NearGas,
                bls12381_p1_sum_element: Components.Schemas.NearGas,
                bls12381_p2_decompress_base: Components.Schemas.NearGas,
                bls12381_p2_decompress_element: Components.Schemas.NearGas,
                bls12381_p2_sum_base: Components.Schemas.NearGas,
                bls12381_p2_sum_element: Components.Schemas.NearGas,
                bls12381_pairing_base: Components.Schemas.NearGas,
                bls12381_pairing_element: Components.Schemas.NearGas,
                contract_compile_base: Components.Schemas.NearGas,
                contract_compile_bytes: Components.Schemas.NearGas,
                contract_loading_base: Components.Schemas.ExtCostsConfigView.contract_loading_basePayload,
                contract_loading_bytes: Components.Schemas.ExtCostsConfigView.contract_loading_bytesPayload,
                ecrecover_base: Components.Schemas.ExtCostsConfigView.ecrecover_basePayload,
                ed25519_verify_base: Components.Schemas.ExtCostsConfigView.ed25519_verify_basePayload,
                ed25519_verify_byte: Components.Schemas.ExtCostsConfigView.ed25519_verify_bytePayload,
                keccak256_base: Components.Schemas.ExtCostsConfigView.keccak256_basePayload,
                keccak256_byte: Components.Schemas.ExtCostsConfigView.keccak256_bytePayload,
                keccak512_base: Components.Schemas.ExtCostsConfigView.keccak512_basePayload,
                keccak512_byte: Components.Schemas.ExtCostsConfigView.keccak512_bytePayload,
                log_base: Components.Schemas.ExtCostsConfigView.log_basePayload,
                log_byte: Components.Schemas.ExtCostsConfigView.log_bytePayload,
                promise_and_base: Components.Schemas.ExtCostsConfigView.promise_and_basePayload,
                promise_and_per_promise: Components.Schemas.ExtCostsConfigView.promise_and_per_promisePayload,
                promise_return: Components.Schemas.ExtCostsConfigView.promise_returnPayload,
                read_cached_trie_node: Components.Schemas.ExtCostsConfigView.read_cached_trie_nodePayload,
                read_memory_base: Components.Schemas.ExtCostsConfigView.read_memory_basePayload,
                read_memory_byte: Components.Schemas.ExtCostsConfigView.read_memory_bytePayload,
                read_register_base: Components.Schemas.ExtCostsConfigView.read_register_basePayload,
                read_register_byte: Components.Schemas.ExtCostsConfigView.read_register_bytePayload,
                ripemd160_base: Components.Schemas.ExtCostsConfigView.ripemd160_basePayload,
                ripemd160_block: Components.Schemas.ExtCostsConfigView.ripemd160_blockPayload,
                sha256_base: Components.Schemas.ExtCostsConfigView.sha256_basePayload,
                sha256_byte: Components.Schemas.ExtCostsConfigView.sha256_bytePayload,
                storage_has_key_base: Components.Schemas.ExtCostsConfigView.storage_has_key_basePayload,
                storage_has_key_byte: Components.Schemas.ExtCostsConfigView.storage_has_key_bytePayload,
                storage_iter_create_from_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_from_bytePayload,
                storage_iter_create_prefix_base: Components.Schemas.ExtCostsConfigView.storage_iter_create_prefix_basePayload,
                storage_iter_create_prefix_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_prefix_bytePayload,
                storage_iter_create_range_base: Components.Schemas.ExtCostsConfigView.storage_iter_create_range_basePayload,
                storage_iter_create_to_byte: Components.Schemas.ExtCostsConfigView.storage_iter_create_to_bytePayload,
                storage_iter_next_base: Components.Schemas.ExtCostsConfigView.storage_iter_next_basePayload,
                storage_iter_next_key_byte: Components.Schemas.ExtCostsConfigView.storage_iter_next_key_bytePayload,
                storage_iter_next_value_byte: Components.Schemas.ExtCostsConfigView.storage_iter_next_value_bytePayload,
                storage_large_read_overhead_base: Components.Schemas.ExtCostsConfigView.storage_large_read_overhead_basePayload,
                storage_large_read_overhead_byte: Components.Schemas.ExtCostsConfigView.storage_large_read_overhead_bytePayload,
                storage_read_base: Components.Schemas.ExtCostsConfigView.storage_read_basePayload,
                storage_read_key_byte: Components.Schemas.ExtCostsConfigView.storage_read_key_bytePayload,
                storage_read_value_byte: Components.Schemas.ExtCostsConfigView.storage_read_value_bytePayload,
                storage_remove_base: Components.Schemas.ExtCostsConfigView.storage_remove_basePayload,
                storage_remove_key_byte: Components.Schemas.ExtCostsConfigView.storage_remove_key_bytePayload,
                storage_remove_ret_value_byte: Components.Schemas.ExtCostsConfigView.storage_remove_ret_value_bytePayload,
                storage_write_base: Components.Schemas.ExtCostsConfigView.storage_write_basePayload,
                storage_write_evicted_byte: Components.Schemas.ExtCostsConfigView.storage_write_evicted_bytePayload,
                storage_write_key_byte: Components.Schemas.ExtCostsConfigView.storage_write_key_bytePayload,
                storage_write_value_byte: Components.Schemas.ExtCostsConfigView.storage_write_value_bytePayload,
                touching_trie_node: Components.Schemas.ExtCostsConfigView.touching_trie_nodePayload,
                utf16_decoding_base: Components.Schemas.ExtCostsConfigView.utf16_decoding_basePayload,
                utf16_decoding_byte: Components.Schemas.ExtCostsConfigView.utf16_decoding_bytePayload,
                utf8_decoding_base: Components.Schemas.ExtCostsConfigView.utf8_decoding_basePayload,
                utf8_decoding_byte: Components.Schemas.ExtCostsConfigView.utf8_decoding_bytePayload,
                validator_stake_base: Components.Schemas.ExtCostsConfigView.validator_stake_basePayload,
                validator_total_stake_base: Components.Schemas.ExtCostsConfigView.validator_total_stake_basePayload,
                write_memory_base: Components.Schemas.ExtCostsConfigView.write_memory_basePayload,
                write_memory_byte: Components.Schemas.ExtCostsConfigView.write_memory_bytePayload,
                write_register_base: Components.Schemas.ExtCostsConfigView.write_register_basePayload,
                write_register_byte: Components.Schemas.ExtCostsConfigView.write_register_bytePayload,
                yield_create_base: Components.Schemas.ExtCostsConfigView.yield_create_basePayload,
                yield_create_byte: Components.Schemas.ExtCostsConfigView.yield_create_bytePayload,
                yield_resume_base: Components.Schemas.ExtCostsConfigView.yield_resume_basePayload,
                yield_resume_byte: Components.Schemas.ExtCostsConfigView.yield_resume_bytePayload
            ) {
                self.alt_bn128_g1_multiexp_base = alt_bn128_g1_multiexp_base
                self.alt_bn128_g1_multiexp_element = alt_bn128_g1_multiexp_element
                self.alt_bn128_g1_sum_base = alt_bn128_g1_sum_base
                self.alt_bn128_g1_sum_element = alt_bn128_g1_sum_element
                self.alt_bn128_pairing_check_base = alt_bn128_pairing_check_base
                self.alt_bn128_pairing_check_element = alt_bn128_pairing_check_element
                self.base = base
                self.bls12381_g1_multiexp_base = bls12381_g1_multiexp_base
                self.bls12381_g1_multiexp_element = bls12381_g1_multiexp_element
                self.bls12381_g2_multiexp_base = bls12381_g2_multiexp_base
                self.bls12381_g2_multiexp_element = bls12381_g2_multiexp_element
                self.bls12381_map_fp2_to_g2_base = bls12381_map_fp2_to_g2_base
                self.bls12381_map_fp2_to_g2_element = bls12381_map_fp2_to_g2_element
                self.bls12381_map_fp_to_g1_base = bls12381_map_fp_to_g1_base
                self.bls12381_map_fp_to_g1_element = bls12381_map_fp_to_g1_element
                self.bls12381_p1_decompress_base = bls12381_p1_decompress_base
                self.bls12381_p1_decompress_element = bls12381_p1_decompress_element
                self.bls12381_p1_sum_base = bls12381_p1_sum_base
                self.bls12381_p1_sum_element = bls12381_p1_sum_element
                self.bls12381_p2_decompress_base = bls12381_p2_decompress_base
                self.bls12381_p2_decompress_element = bls12381_p2_decompress_element
                self.bls12381_p2_sum_base = bls12381_p2_sum_base
                self.bls12381_p2_sum_element = bls12381_p2_sum_element
                self.bls12381_pairing_base = bls12381_pairing_base
                self.bls12381_pairing_element = bls12381_pairing_element
                self.contract_compile_base = contract_compile_base
                self.contract_compile_bytes = contract_compile_bytes
                self.contract_loading_base = contract_loading_base
                self.contract_loading_bytes = contract_loading_bytes
                self.ecrecover_base = ecrecover_base
                self.ed25519_verify_base = ed25519_verify_base
                self.ed25519_verify_byte = ed25519_verify_byte
                self.keccak256_base = keccak256_base
                self.keccak256_byte = keccak256_byte
                self.keccak512_base = keccak512_base
                self.keccak512_byte = keccak512_byte
                self.log_base = log_base
                self.log_byte = log_byte
                self.promise_and_base = promise_and_base
                self.promise_and_per_promise = promise_and_per_promise
                self.promise_return = promise_return
                self.read_cached_trie_node = read_cached_trie_node
                self.read_memory_base = read_memory_base
                self.read_memory_byte = read_memory_byte
                self.read_register_base = read_register_base
                self.read_register_byte = read_register_byte
                self.ripemd160_base = ripemd160_base
                self.ripemd160_block = ripemd160_block
                self.sha256_base = sha256_base
                self.sha256_byte = sha256_byte
                self.storage_has_key_base = storage_has_key_base
                self.storage_has_key_byte = storage_has_key_byte
                self.storage_iter_create_from_byte = storage_iter_create_from_byte
                self.storage_iter_create_prefix_base = storage_iter_create_prefix_base
                self.storage_iter_create_prefix_byte = storage_iter_create_prefix_byte
                self.storage_iter_create_range_base = storage_iter_create_range_base
                self.storage_iter_create_to_byte = storage_iter_create_to_byte
                self.storage_iter_next_base = storage_iter_next_base
                self.storage_iter_next_key_byte = storage_iter_next_key_byte
                self.storage_iter_next_value_byte = storage_iter_next_value_byte
                self.storage_large_read_overhead_base = storage_large_read_overhead_base
                self.storage_large_read_overhead_byte = storage_large_read_overhead_byte
                self.storage_read_base = storage_read_base
                self.storage_read_key_byte = storage_read_key_byte
                self.storage_read_value_byte = storage_read_value_byte
                self.storage_remove_base = storage_remove_base
                self.storage_remove_key_byte = storage_remove_key_byte
                self.storage_remove_ret_value_byte = storage_remove_ret_value_byte
                self.storage_write_base = storage_write_base
                self.storage_write_evicted_byte = storage_write_evicted_byte
                self.storage_write_key_byte = storage_write_key_byte
                self.storage_write_value_byte = storage_write_value_byte
                self.touching_trie_node = touching_trie_node
                self.utf16_decoding_base = utf16_decoding_base
                self.utf16_decoding_byte = utf16_decoding_byte
                self.utf8_decoding_base = utf8_decoding_base
                self.utf8_decoding_byte = utf8_decoding_byte
                self.validator_stake_base = validator_stake_base
                self.validator_total_stake_base = validator_total_stake_base
                self.write_memory_base = write_memory_base
                self.write_memory_byte = write_memory_byte
                self.write_register_base = write_register_base
                self.write_register_byte = write_register_byte
                self.yield_create_base = yield_create_base
                self.yield_create_byte = yield_create_byte
                self.yield_resume_base = yield_resume_base
                self.yield_resume_byte = yield_resume_byte
            }
            public enum CodingKeys: String, CodingKey {
                case alt_bn128_g1_multiexp_base
                case alt_bn128_g1_multiexp_element
                case alt_bn128_g1_sum_base
                case alt_bn128_g1_sum_element
                case alt_bn128_pairing_check_base
                case alt_bn128_pairing_check_element
                case base
                case bls12381_g1_multiexp_base
                case bls12381_g1_multiexp_element
                case bls12381_g2_multiexp_base
                case bls12381_g2_multiexp_element
                case bls12381_map_fp2_to_g2_base
                case bls12381_map_fp2_to_g2_element
                case bls12381_map_fp_to_g1_base
                case bls12381_map_fp_to_g1_element
                case bls12381_p1_decompress_base
                case bls12381_p1_decompress_element
                case bls12381_p1_sum_base
                case bls12381_p1_sum_element
                case bls12381_p2_decompress_base
                case bls12381_p2_decompress_element
                case bls12381_p2_sum_base
                case bls12381_p2_sum_element
                case bls12381_pairing_base
                case bls12381_pairing_element
                case contract_compile_base
                case contract_compile_bytes
                case contract_loading_base
                case contract_loading_bytes
                case ecrecover_base
                case ed25519_verify_base
                case ed25519_verify_byte
                case keccak256_base
                case keccak256_byte
                case keccak512_base
                case keccak512_byte
                case log_base
                case log_byte
                case promise_and_base
                case promise_and_per_promise
                case promise_return
                case read_cached_trie_node
                case read_memory_base
                case read_memory_byte
                case read_register_base
                case read_register_byte
                case ripemd160_base
                case ripemd160_block
                case sha256_base
                case sha256_byte
                case storage_has_key_base
                case storage_has_key_byte
                case storage_iter_create_from_byte
                case storage_iter_create_prefix_base
                case storage_iter_create_prefix_byte
                case storage_iter_create_range_base
                case storage_iter_create_to_byte
                case storage_iter_next_base
                case storage_iter_next_key_byte
                case storage_iter_next_value_byte
                case storage_large_read_overhead_base
                case storage_large_read_overhead_byte
                case storage_read_base
                case storage_read_key_byte
                case storage_read_value_byte
                case storage_remove_base
                case storage_remove_key_byte
                case storage_remove_ret_value_byte
                case storage_write_base
                case storage_write_evicted_byte
                case storage_write_key_byte
                case storage_write_value_byte
                case touching_trie_node
                case utf16_decoding_base
                case utf16_decoding_byte
                case utf8_decoding_base
                case utf8_decoding_byte
                case validator_stake_base
                case validator_total_stake_base
                case write_memory_base
                case write_memory_byte
                case write_register_base
                case write_register_byte
                case yield_create_base
                case yield_create_byte
                case yield_resume_base
                case yield_resume_byte
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig`.
        public struct ExternalStorageConfig: Codable, Hashable, Sendable {
            /// The number of attempts the node will make to obtain a part from peers in
            /// the network before it fetches from external storage.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/external_storage_fallback_threshold`.
            public var external_storage_fallback_threshold: Swift.Int?
            /// Location of state parts.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/location`.
            public struct locationPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/location/value1`.
                public var value1: Components.Schemas.ExternalStorageLocation
                /// Creates a new `locationPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExternalStorageLocation) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Location of state parts.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/location`.
            public var location: Components.Schemas.ExternalStorageConfig.locationPayload
            /// When fetching state parts from external storage, throttle fetch requests
            /// to this many concurrent requests.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/num_concurrent_requests`.
            public var num_concurrent_requests: Swift.Int?
            /// During catchup, the node will use a different number of concurrent requests
            /// to reduce the performance impact of state sync.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageConfig/num_concurrent_requests_during_catchup`.
            public var num_concurrent_requests_during_catchup: Swift.Int?
            /// Creates a new `ExternalStorageConfig`.
            ///
            /// - Parameters:
            ///   - external_storage_fallback_threshold: The number of attempts the node will make to obtain a part from peers in
            ///   - location: Location of state parts.
            ///   - num_concurrent_requests: When fetching state parts from external storage, throttle fetch requests
            ///   - num_concurrent_requests_during_catchup: During catchup, the node will use a different number of concurrent requests
            public init(
                external_storage_fallback_threshold: Swift.Int? = nil,
                location: Components.Schemas.ExternalStorageConfig.locationPayload,
                num_concurrent_requests: Swift.Int? = nil,
                num_concurrent_requests_during_catchup: Swift.Int? = nil
            ) {
                self.external_storage_fallback_threshold = external_storage_fallback_threshold
                self.location = location
                self.num_concurrent_requests = num_concurrent_requests
                self.num_concurrent_requests_during_catchup = num_concurrent_requests_during_catchup
            }
            public enum CodingKeys: String, CodingKey {
                case external_storage_fallback_threshold
                case location
                case num_concurrent_requests
                case num_concurrent_requests_during_catchup
            }
        }
        /// Supported external storage backends and their minimal config.
        ///
        /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation`.
        @frozen public enum ExternalStorageLocation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1/S3`.
                public struct S3Payload: Codable, Hashable, Sendable {
                    /// Location on S3.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1/S3/bucket`.
                    public var bucket: Swift.String
                    /// Data may only be available in certain locations.
                    ///
                    /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1/S3/region`.
                    public var region: Swift.String
                    /// Creates a new `S3Payload`.
                    ///
                    /// - Parameters:
                    ///   - bucket: Location on S3.
                    ///   - region: Data may only be available in certain locations.
                    public init(
                        bucket: Swift.String,
                        region: Swift.String
                    ) {
                        self.bucket = bucket
                        self.region = region
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bucket
                        case region
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1/S3`.
                public var S3: Components.Schemas.ExternalStorageLocation.Case1Payload.S3Payload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - S3:
                public init(S3: Components.Schemas.ExternalStorageLocation.Case1Payload.S3Payload) {
                    self.S3 = S3
                }
                public enum CodingKeys: String, CodingKey {
                    case S3
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.S3 = try container.decode(
                        Components.Schemas.ExternalStorageLocation.Case1Payload.S3Payload.self,
                        forKey: .S3
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "S3"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case1`.
            case case1(Components.Schemas.ExternalStorageLocation.Case1Payload)
            /// Local filesystem root for storing data.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case2/Filesystem`.
                public struct FilesystemPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case2/Filesystem/root_dir`.
                    public var root_dir: Swift.String
                    /// Creates a new `FilesystemPayload`.
                    ///
                    /// - Parameters:
                    ///   - root_dir:
                    public init(root_dir: Swift.String) {
                        self.root_dir = root_dir
                    }
                    public enum CodingKeys: String, CodingKey {
                        case root_dir
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case2/Filesystem`.
                public var Filesystem: Components.Schemas.ExternalStorageLocation.Case2Payload.FilesystemPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - Filesystem:
                public init(Filesystem: Components.Schemas.ExternalStorageLocation.Case2Payload.FilesystemPayload) {
                    self.Filesystem = Filesystem
                }
                public enum CodingKeys: String, CodingKey {
                    case Filesystem
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Filesystem = try container.decode(
                        Components.Schemas.ExternalStorageLocation.Case2Payload.FilesystemPayload.self,
                        forKey: .Filesystem
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Filesystem"
                    ])
                }
            }
            /// Local filesystem root for storing data.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case2`.
            case case2(Components.Schemas.ExternalStorageLocation.Case2Payload)
            /// Google Cloud Storage bucket name.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case3/GCS`.
                public struct GCSPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case3/GCS/bucket`.
                    public var bucket: Swift.String
                    /// Creates a new `GCSPayload`.
                    ///
                    /// - Parameters:
                    ///   - bucket:
                    public init(bucket: Swift.String) {
                        self.bucket = bucket
                    }
                    public enum CodingKeys: String, CodingKey {
                        case bucket
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case3/GCS`.
                public var GCS: Components.Schemas.ExternalStorageLocation.Case3Payload.GCSPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - GCS:
                public init(GCS: Components.Schemas.ExternalStorageLocation.Case3Payload.GCSPayload) {
                    self.GCS = GCS
                }
                public enum CodingKeys: String, CodingKey {
                    case GCS
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.GCS = try container.decode(
                        Components.Schemas.ExternalStorageLocation.Case3Payload.GCSPayload.self,
                        forKey: .GCS
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "GCS"
                    ])
                }
            }
            /// Google Cloud Storage bucket name.
            ///
            /// - Remark: Generated from `#/components/schemas/ExternalStorageLocation/case3`.
            case case3(Components.Schemas.ExternalStorageLocation.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Costs associated with an object that can only be sent over the network (and executed
        /// by the receiver).
        /// NOTE: `send_sir` or `send_not_sir` fees are usually burned when the item is being created.
        /// And `execution` fee is burned when the item is being executed.
        ///
        /// - Remark: Generated from `#/components/schemas/Fee`.
        public struct Fee: Codable, Hashable, Sendable {
            /// Fee for executing the object.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/execution`.
            public struct executionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Fee/execution/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `executionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Fee for executing the object.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/execution`.
            public var execution: Components.Schemas.Fee.executionPayload
            /// Fee for sending an object potentially across the shards.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/send_not_sir`.
            public struct send_not_sirPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Fee/send_not_sir/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `send_not_sirPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Fee for sending an object potentially across the shards.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/send_not_sir`.
            public var send_not_sir: Components.Schemas.Fee.send_not_sirPayload
            /// Fee for sending an object from the sender to itself, guaranteeing that it does not leave
            /// the shard.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/send_sir`.
            public struct send_sirPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Fee/send_sir/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `send_sirPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Fee for sending an object from the sender to itself, guaranteeing that it does not leave
            /// the shard.
            ///
            /// - Remark: Generated from `#/components/schemas/Fee/send_sir`.
            public var send_sir: Components.Schemas.Fee.send_sirPayload
            /// Creates a new `Fee`.
            ///
            /// - Parameters:
            ///   - execution: Fee for executing the object.
            ///   - send_not_sir: Fee for sending an object potentially across the shards.
            ///   - send_sir: Fee for sending an object from the sender to itself, guaranteeing that it does not leave
            public init(
                execution: Components.Schemas.Fee.executionPayload,
                send_not_sir: Components.Schemas.Fee.send_not_sirPayload,
                send_sir: Components.Schemas.Fee.send_sirPayload
            ) {
                self.execution = execution
                self.send_not_sir = send_not_sir
                self.send_sir = send_sir
            }
            public enum CodingKeys: String, CodingKey {
                case execution
                case send_not_sir
                case send_sir
            }
        }
        /// Execution outcome of the transaction and all the subsequent receipts.
        /// Could be not finalized yet
        ///
        /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView`.
        public struct FinalExecutionOutcomeView: Codable, Hashable, Sendable {
            /// The execution outcome of receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/receipts_outcome`.
            public var receipts_outcome: [Components.Schemas.ExecutionOutcomeWithIdView]
            /// Execution status defined by chain.rs:get_final_transaction_result
            /// FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet
            /// FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution
            /// FinalExecutionStatus::Failure - the result of the first leaf receipt_id
            /// FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/status`.
            public struct statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/status/value1`.
                public var value1: Components.Schemas.FinalExecutionStatus
                /// Creates a new `statusPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.FinalExecutionStatus) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Execution status defined by chain.rs:get_final_transaction_result
            /// FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet
            /// FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution
            /// FinalExecutionStatus::Failure - the result of the first leaf receipt_id
            /// FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/status`.
            public var status: Components.Schemas.FinalExecutionOutcomeView.statusPayload
            /// Signed Transaction
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction`.
            public struct transactionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction/value1`.
                public var value1: Components.Schemas.SignedTransactionView
                /// Creates a new `transactionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.SignedTransactionView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Signed Transaction
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction`.
            public var transaction: Components.Schemas.FinalExecutionOutcomeView.transactionPayload
            /// The execution outcome of the signed transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction_outcome`.
            public struct transaction_outcomePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction_outcome/value1`.
                public var value1: Components.Schemas.ExecutionOutcomeWithIdView
                /// Creates a new `transaction_outcomePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExecutionOutcomeWithIdView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// The execution outcome of the signed transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeView/transaction_outcome`.
            public var transaction_outcome: Components.Schemas.FinalExecutionOutcomeView.transaction_outcomePayload
            /// Creates a new `FinalExecutionOutcomeView`.
            ///
            /// - Parameters:
            ///   - receipts_outcome: The execution outcome of receipts.
            ///   - status: Execution status defined by chain.rs:get_final_transaction_result
            ///   - transaction: Signed Transaction
            ///   - transaction_outcome: The execution outcome of the signed transaction.
            public init(
                receipts_outcome: [Components.Schemas.ExecutionOutcomeWithIdView],
                status: Components.Schemas.FinalExecutionOutcomeView.statusPayload,
                transaction: Components.Schemas.FinalExecutionOutcomeView.transactionPayload,
                transaction_outcome: Components.Schemas.FinalExecutionOutcomeView.transaction_outcomePayload
            ) {
                self.receipts_outcome = receipts_outcome
                self.status = status
                self.transaction = transaction
                self.transaction_outcome = transaction_outcome
            }
            public enum CodingKeys: String, CodingKey {
                case receipts_outcome
                case status
                case transaction
                case transaction_outcome
            }
        }
        /// Final execution outcome of the transaction and all of subsequent the receipts. Also includes
        /// the generated receipt.
        ///
        /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView`.
        public struct FinalExecutionOutcomeWithReceiptView: Codable, Hashable, Sendable {
            /// Receipts generated from the transaction
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/receipts`.
            public var receipts: [Components.Schemas.ReceiptView]
            /// The execution outcome of receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/receipts_outcome`.
            public var receipts_outcome: [Components.Schemas.ExecutionOutcomeWithIdView]
            /// Execution status defined by chain.rs:get_final_transaction_result
            /// FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet
            /// FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution
            /// FinalExecutionStatus::Failure - the result of the first leaf receipt_id
            /// FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/status`.
            public struct statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/status/value1`.
                public var value1: Components.Schemas.FinalExecutionStatus
                /// Creates a new `statusPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.FinalExecutionStatus) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Execution status defined by chain.rs:get_final_transaction_result
            /// FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet
            /// FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution
            /// FinalExecutionStatus::Failure - the result of the first leaf receipt_id
            /// FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/status`.
            public var status: Components.Schemas.FinalExecutionOutcomeWithReceiptView.statusPayload
            /// Signed Transaction
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction`.
            public struct transactionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction/value1`.
                public var value1: Components.Schemas.SignedTransactionView
                /// Creates a new `transactionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.SignedTransactionView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Signed Transaction
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction`.
            public var transaction: Components.Schemas.FinalExecutionOutcomeWithReceiptView.transactionPayload
            /// The execution outcome of the signed transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction_outcome`.
            public struct transaction_outcomePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction_outcome/value1`.
                public var value1: Components.Schemas.ExecutionOutcomeWithIdView
                /// Creates a new `transaction_outcomePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExecutionOutcomeWithIdView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// The execution outcome of the signed transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionOutcomeWithReceiptView/transaction_outcome`.
            public var transaction_outcome: Components.Schemas.FinalExecutionOutcomeWithReceiptView.transaction_outcomePayload
            /// Creates a new `FinalExecutionOutcomeWithReceiptView`.
            ///
            /// - Parameters:
            ///   - receipts: Receipts generated from the transaction
            ///   - receipts_outcome: The execution outcome of receipts.
            ///   - status: Execution status defined by chain.rs:get_final_transaction_result
            ///   - transaction: Signed Transaction
            ///   - transaction_outcome: The execution outcome of the signed transaction.
            public init(
                receipts: [Components.Schemas.ReceiptView],
                receipts_outcome: [Components.Schemas.ExecutionOutcomeWithIdView],
                status: Components.Schemas.FinalExecutionOutcomeWithReceiptView.statusPayload,
                transaction: Components.Schemas.FinalExecutionOutcomeWithReceiptView.transactionPayload,
                transaction_outcome: Components.Schemas.FinalExecutionOutcomeWithReceiptView.transaction_outcomePayload
            ) {
                self.receipts = receipts
                self.receipts_outcome = receipts_outcome
                self.status = status
                self.transaction = transaction
                self.transaction_outcome = transaction_outcome
            }
            public enum CodingKeys: String, CodingKey {
                case receipts
                case receipts_outcome
                case status
                case transaction
                case transaction_outcome
            }
        }
        /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus`.
        @frozen public enum FinalExecutionStatus: Codable, Hashable, Sendable {
            /// The execution has not yet started.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case NotStarted = "NotStarted"
            }
            /// The execution has not yet started.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case1`.
            case case1(Components.Schemas.FinalExecutionStatus.Case1Payload)
            /// The execution has started and still going.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Started = "Started"
            }
            /// The execution has started and still going.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case2`.
            case case2(Components.Schemas.FinalExecutionStatus.Case2Payload)
            /// The execution has failed with the given error.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case3/Failure`.
                public var Failure: Components.Schemas.TxExecutionError
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - Failure:
                public init(Failure: Components.Schemas.TxExecutionError) {
                    self.Failure = Failure
                }
                public enum CodingKeys: String, CodingKey {
                    case Failure
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Failure = try container.decode(
                        Components.Schemas.TxExecutionError.self,
                        forKey: .Failure
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Failure"
                    ])
                }
            }
            /// The execution has failed with the given error.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case3`.
            case case3(Components.Schemas.FinalExecutionStatus.Case3Payload)
            /// The execution has succeeded and returned some value or an empty vec encoded in base64.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case4/SuccessValue`.
                public var SuccessValue: Swift.String
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - SuccessValue:
                public init(SuccessValue: Swift.String) {
                    self.SuccessValue = SuccessValue
                }
                public enum CodingKeys: String, CodingKey {
                    case SuccessValue
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.SuccessValue = try container.decode(
                        Swift.String.self,
                        forKey: .SuccessValue
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "SuccessValue"
                    ])
                }
            }
            /// The execution has succeeded and returned some value or an empty vec encoded in base64.
            ///
            /// - Remark: Generated from `#/components/schemas/FinalExecutionStatus/case4`.
            case case4(Components.Schemas.FinalExecutionStatus.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Different types of finality.
        ///
        /// - Remark: Generated from `#/components/schemas/Finality`.
        @frozen public enum Finality: String, Codable, Hashable, Sendable, CaseIterable {
            case optimistic = "optimistic"
            case near_hyphen_final = "near-final"
            case final = "final"
        }
        /// This type is used to mark function arguments.
        ///
        /// NOTE: The main reason for this to exist (except the type-safety) is that the value is
        /// transparently serialized and deserialized as a base64-encoded string when serde is used
        /// (serde_json).
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionArgs`.
        public typealias FunctionArgs = Swift.String
        /// - Remark: Generated from `#/components/schemas/FunctionCallAction`.
        public struct FunctionCallAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FunctionCallAction/args`.
            public var args: Swift.String
            /// - Remark: Generated from `#/components/schemas/FunctionCallAction/deposit`.
            public var deposit: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/FunctionCallAction/gas`.
            public var gas: Components.Schemas.NearGas
            /// - Remark: Generated from `#/components/schemas/FunctionCallAction/method_name`.
            public var method_name: Swift.String
            /// Creates a new `FunctionCallAction`.
            ///
            /// - Parameters:
            ///   - args:
            ///   - deposit:
            ///   - gas:
            ///   - method_name:
            public init(
                args: Swift.String,
                deposit: Components.Schemas.NearToken,
                gas: Components.Schemas.NearGas,
                method_name: Swift.String
            ) {
                self.args = args
                self.deposit = deposit
                self.gas = gas
                self.method_name = method_name
            }
            public enum CodingKeys: String, CodingKey {
                case args
                case deposit
                case gas
                case method_name
            }
        }
        /// Serializable version of `near-vm-runner::FunctionCallError`.
        ///
        /// Must never reorder/remove elements, can only add new variants at the end (but do that very
        /// carefully). It describes stable serialization format, and only used by serialization logic.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionCallError`.
        @frozen public enum FunctionCallError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case WasmUnknownError = "WasmUnknownError"
                case _EVMError = "_EVMError"
            }
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case1`.
            case case1(Components.Schemas.FunctionCallError.Case1Payload)
            /// Wasm compilation error
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case2/CompilationError`.
                public var CompilationError: Components.Schemas.CompilationError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - CompilationError:
                public init(CompilationError: Components.Schemas.CompilationError) {
                    self.CompilationError = CompilationError
                }
                public enum CodingKeys: String, CodingKey {
                    case CompilationError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CompilationError = try container.decode(
                        Components.Schemas.CompilationError.self,
                        forKey: .CompilationError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CompilationError"
                    ])
                }
            }
            /// Wasm compilation error
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case2`.
            case case2(Components.Schemas.FunctionCallError.Case2Payload)
            /// Wasm binary env link error
            ///
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case3/LinkError`.
                public struct LinkErrorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/FunctionCallError/case3/LinkError/msg`.
                    public var msg: Swift.String
                    /// Creates a new `LinkErrorPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    public init(msg: Swift.String) {
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case3/LinkError`.
                public var LinkError: Components.Schemas.FunctionCallError.Case3Payload.LinkErrorPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - LinkError:
                public init(LinkError: Components.Schemas.FunctionCallError.Case3Payload.LinkErrorPayload) {
                    self.LinkError = LinkError
                }
                public enum CodingKeys: String, CodingKey {
                    case LinkError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.LinkError = try container.decode(
                        Components.Schemas.FunctionCallError.Case3Payload.LinkErrorPayload.self,
                        forKey: .LinkError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "LinkError"
                    ])
                }
            }
            /// Wasm binary env link error
            ///
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case3`.
            case case3(Components.Schemas.FunctionCallError.Case3Payload)
            /// Import/export resolve error
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case4/MethodResolveError`.
                public var MethodResolveError: Components.Schemas.MethodResolveError
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - MethodResolveError:
                public init(MethodResolveError: Components.Schemas.MethodResolveError) {
                    self.MethodResolveError = MethodResolveError
                }
                public enum CodingKeys: String, CodingKey {
                    case MethodResolveError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.MethodResolveError = try container.decode(
                        Components.Schemas.MethodResolveError.self,
                        forKey: .MethodResolveError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "MethodResolveError"
                    ])
                }
            }
            /// Import/export resolve error
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case4`.
            case case4(Components.Schemas.FunctionCallError.Case4Payload)
            /// A trap happened during execution of a binary
            ///
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case5/WasmTrap`.
                public var WasmTrap: Components.Schemas.WasmTrap
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - WasmTrap:
                public init(WasmTrap: Components.Schemas.WasmTrap) {
                    self.WasmTrap = WasmTrap
                }
                public enum CodingKeys: String, CodingKey {
                    case WasmTrap
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.WasmTrap = try container.decode(
                        Components.Schemas.WasmTrap.self,
                        forKey: .WasmTrap
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "WasmTrap"
                    ])
                }
            }
            /// A trap happened during execution of a binary
            ///
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case5`.
            case case5(Components.Schemas.FunctionCallError.Case5Payload)
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case6/HostError`.
                public var HostError: Components.Schemas.HostError
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - HostError:
                public init(HostError: Components.Schemas.HostError) {
                    self.HostError = HostError
                }
                public enum CodingKeys: String, CodingKey {
                    case HostError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.HostError = try container.decode(
                        Components.Schemas.HostError.self,
                        forKey: .HostError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "HostError"
                    ])
                }
            }
            /// Note: this is only to deserialize old data, use execution error for new data
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case6`.
            case case6(Components.Schemas.FunctionCallError.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallError/case7/ExecutionError`.
                public var ExecutionError: Swift.String
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - ExecutionError:
                public init(ExecutionError: Swift.String) {
                    self.ExecutionError = ExecutionError
                }
                public enum CodingKeys: String, CodingKey {
                    case ExecutionError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ExecutionError = try container.decode(
                        Swift.String.self,
                        forKey: .ExecutionError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ExecutionError"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/FunctionCallError/case7`.
            case case7(Components.Schemas.FunctionCallError.Case7Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Grants limited permission to make transactions with FunctionCallActions
        /// The permission can limit the allowed balance to be spent on the prepaid gas.
        /// It also restrict the account ID of the receiver for this function call.
        /// It also can restrict the method name for the allowed function calls.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionCallPermission`.
        public struct FunctionCallPermission: Codable, Hashable, Sendable {
            /// Allowance is a balance limit to use by this access key to pay for function call gas and
            /// transaction fees. When this access key is used, both account balance and the allowance is
            /// decreased by the same value.
            /// `None` means unlimited allowance.
            /// NOTE: To change or increase the allowance, the old access key needs to be deleted and a new
            /// access key should be created.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/allowance`.
            public struct allowancePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/allowance/value1`.
                public var value1: Components.Schemas.NearToken?
                /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/allowance/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `allowancePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.NearToken? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Allowance is a balance limit to use by this access key to pay for function call gas and
            /// transaction fees. When this access key is used, both account balance and the allowance is
            /// decreased by the same value.
            /// `None` means unlimited allowance.
            /// NOTE: To change or increase the allowance, the old access key needs to be deleted and a new
            /// access key should be created.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/allowance`.
            public var allowance: Components.Schemas.FunctionCallPermission.allowancePayload?
            /// A list of method names that can be used. The access key only allows transactions with the
            /// function call of one of the given method names.
            /// Empty list means any method name can be used.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/method_names`.
            public var method_names: [Swift.String]
            /// The access key only allows transactions with the given receiver's account id.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionCallPermission/receiver_id`.
            public var receiver_id: Swift.String
            /// Creates a new `FunctionCallPermission`.
            ///
            /// - Parameters:
            ///   - allowance: Allowance is a balance limit to use by this access key to pay for function call gas and
            ///   - method_names: A list of method names that can be used. The access key only allows transactions with the
            ///   - receiver_id: The access key only allows transactions with the given receiver's account id.
            public init(
                allowance: Components.Schemas.FunctionCallPermission.allowancePayload? = nil,
                method_names: [Swift.String],
                receiver_id: Swift.String
            ) {
                self.allowance = allowance
                self.method_names = method_names
                self.receiver_id = receiver_id
            }
            public enum CodingKeys: String, CodingKey {
                case allowance
                case method_names
                case receiver_id
            }
        }
        /// Configuration for garbage collection.
        ///
        /// - Remark: Generated from `#/components/schemas/GCConfig`.
        public struct GCConfig: Codable, Hashable, Sendable {
            /// Maximum number of blocks to garbage collect at every garbage collection
            /// call.
            ///
            /// - Remark: Generated from `#/components/schemas/GCConfig/gc_blocks_limit`.
            public var gc_blocks_limit: Swift.Int?
            /// Maximum number of height to go through at each garbage collection step
            /// when cleaning forks during garbage collection.
            ///
            /// - Remark: Generated from `#/components/schemas/GCConfig/gc_fork_clean_step`.
            public var gc_fork_clean_step: Swift.Int?
            /// Number of epochs for which we keep store data.
            ///
            /// - Remark: Generated from `#/components/schemas/GCConfig/gc_num_epochs_to_keep`.
            public var gc_num_epochs_to_keep: Swift.Int?
            /// How often gc should be run
            ///
            /// - Remark: Generated from `#/components/schemas/GCConfig/gc_step_period`.
            public struct gc_step_periodPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GCConfig/gc_step_period/value1`.
                public var value1: Components.Schemas.DurationAsStdSchemaProvider
                /// Creates a new `gc_step_periodPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.DurationAsStdSchemaProvider) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// How often gc should be run
            ///
            /// - Remark: Generated from `#/components/schemas/GCConfig/gc_step_period`.
            public var gc_step_period: Components.Schemas.GCConfig.gc_step_periodPayload?
            /// Creates a new `GCConfig`.
            ///
            /// - Parameters:
            ///   - gc_blocks_limit: Maximum number of blocks to garbage collect at every garbage collection
            ///   - gc_fork_clean_step: Maximum number of height to go through at each garbage collection step
            ///   - gc_num_epochs_to_keep: Number of epochs for which we keep store data.
            ///   - gc_step_period: How often gc should be run
            public init(
                gc_blocks_limit: Swift.Int? = nil,
                gc_fork_clean_step: Swift.Int? = nil,
                gc_num_epochs_to_keep: Swift.Int? = nil,
                gc_step_period: Components.Schemas.GCConfig.gc_step_periodPayload? = nil
            ) {
                self.gc_blocks_limit = gc_blocks_limit
                self.gc_fork_clean_step = gc_fork_clean_step
                self.gc_num_epochs_to_keep = gc_num_epochs_to_keep
                self.gc_step_period = gc_step_period
            }
            public enum CodingKeys: String, CodingKey {
                case gc_blocks_limit
                case gc_fork_clean_step
                case gc_num_epochs_to_keep
                case gc_step_period
            }
        }
        /// - Remark: Generated from `#/components/schemas/GasKeyView`.
        public struct GasKeyView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GasKeyView/balance`.
            public var balance: Components.Schemas.NearToken
            /// - Remark: Generated from `#/components/schemas/GasKeyView/num_nonces`.
            public var num_nonces: Swift.Int
            /// - Remark: Generated from `#/components/schemas/GasKeyView/permission`.
            public var permission: Components.Schemas.AccessKeyPermissionView
            /// Creates a new `GasKeyView`.
            ///
            /// - Parameters:
            ///   - balance:
            ///   - num_nonces:
            ///   - permission:
            public init(
                balance: Components.Schemas.NearToken,
                num_nonces: Swift.Int,
                permission: Components.Schemas.AccessKeyPermissionView
            ) {
                self.balance = balance
                self.num_nonces = num_nonces
                self.permission = permission
            }
            public enum CodingKeys: String, CodingKey {
                case balance
                case num_nonces
                case permission
            }
        }
        /// - Remark: Generated from `#/components/schemas/GenesisConfig`.
        public struct GenesisConfig: Codable, Hashable, Sendable {
            /// Expected number of hidden validators per shard.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/avg_hidden_validator_seats_per_shard`.
            public var avg_hidden_validator_seats_per_shard: [Swift.Int]
            /// Threshold for kicking out block producers, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/block_producer_kickout_threshold`.
            public var block_producer_kickout_threshold: Swift.Int
            /// ID of the blockchain. This must be unique for every blockchain.
            /// If your testnet blockchains do not have unique chain IDs, you will have a bad time.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/chain_id`.
            public var chain_id: Swift.String
            /// Limits the number of shard changes in chunk producer assignments,
            /// if algorithm is able to choose assignment with better balance of
            /// number of chunk producers for shards.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/chunk_producer_assignment_changes_limit`.
            public var chunk_producer_assignment_changes_limit: Swift.Int?
            /// Threshold for kicking out chunk producers, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/chunk_producer_kickout_threshold`.
            public var chunk_producer_kickout_threshold: Swift.Int
            /// Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/chunk_validator_only_kickout_threshold`.
            public var chunk_validator_only_kickout_threshold: Swift.Int?
            /// Enable dynamic re-sharding.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/dynamic_resharding`.
            public var dynamic_resharding: Swift.Bool
            /// Epoch length counted in block heights.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/epoch_length`.
            public var epoch_length: Swift.Int
            /// Fishermen stake threshold.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/fishermen_threshold`.
            public struct fishermen_thresholdPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/fishermen_threshold/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `fishermen_thresholdPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Fishermen stake threshold.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/fishermen_threshold`.
            public var fishermen_threshold: Components.Schemas.GenesisConfig.fishermen_thresholdPayload
            /// Initial gas limit.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/gas_limit`.
            public struct gas_limitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/gas_limit/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `gas_limitPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Initial gas limit.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/gas_limit`.
            public var gas_limit: Components.Schemas.GenesisConfig.gas_limitPayload
            /// Gas price adjustment rate
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/gas_price_adjustment_rate`.
            public var gas_price_adjustment_rate: [Swift.Int32]
            /// Height of genesis block.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/genesis_height`.
            public var genesis_height: Swift.Int
            /// Official time of blockchain start.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/genesis_time`.
            public var genesis_time: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/max_gas_price`.
            public var max_gas_price: Components.Schemas.NearToken
            /// Maximum inflation on the total supply every epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/max_inflation_rate`.
            public var max_inflation_rate: [Swift.Int32]
            /// Max stake percentage of the validators we will kick out.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/max_kickout_stake_perc`.
            public var max_kickout_stake_perc: Swift.Int?
            /// Minimum gas price. It is also the initial gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/min_gas_price`.
            public struct min_gas_pricePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/min_gas_price/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `min_gas_pricePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Minimum gas price. It is also the initial gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/min_gas_price`.
            public var min_gas_price: Components.Schemas.GenesisConfig.min_gas_pricePayload
            /// The minimum stake required for staking is last seat price divided by this number.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/minimum_stake_divisor`.
            public var minimum_stake_divisor: Swift.Int?
            /// The lowest ratio s/s_total any block producer can have.
            /// See <https://github.com/near/NEPs/pull/167> for details
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/minimum_stake_ratio`.
            public var minimum_stake_ratio: [Swift.Int32]?
            /// The minimum number of validators each shard must have
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/minimum_validators_per_shard`.
            public var minimum_validators_per_shard: Swift.Int?
            /// Number of block producer seats at genesis.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_block_producer_seats`.
            public var num_block_producer_seats: Swift.Int
            /// Defines number of shards and number of block producer seats per each shard at genesis.
            /// Note: not used with protocol_feature_chunk_only_producers -- replaced by minimum_validators_per_shard
            /// Note: not used before as all block producers produce chunks for all shards
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_block_producer_seats_per_shard`.
            public var num_block_producer_seats_per_shard: [Swift.Int]
            /// Expected number of blocks per year
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_blocks_per_year`.
            public var num_blocks_per_year: Swift.Int
            /// Deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_chunk_only_producer_seats`.
            public var num_chunk_only_producer_seats: Swift.Int?
            /// Number of chunk producers.
            /// Don't mess it up with chunk-only producers feature which is deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_chunk_producer_seats`.
            public var num_chunk_producer_seats: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/num_chunk_validator_seats`.
            public var num_chunk_validator_seats: Swift.Int?
            /// Online maximum threshold above which validator gets full reward.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/online_max_threshold`.
            public var online_max_threshold: [Swift.Int32]?
            /// Online minimum threshold below which validator doesn't receive reward.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/online_min_threshold`.
            public var online_min_threshold: [Swift.Int32]?
            /// Protocol treasury rate
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_reward_rate`.
            public var protocol_reward_rate: [Swift.Int32]
            /// Protocol treasury account
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_treasury_account`.
            public struct protocol_treasury_accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_treasury_account/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `protocol_treasury_accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Protocol treasury account
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_treasury_account`.
            public var protocol_treasury_account: Components.Schemas.GenesisConfig.protocol_treasury_accountPayload
            /// Threshold of stake that needs to indicate that they ready for upgrade.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_upgrade_stake_threshold`.
            public var protocol_upgrade_stake_threshold: [Swift.Int32]?
            /// Protocol version that this genesis works with.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/protocol_version`.
            public var protocol_version: Swift.Int
            /// Layout information regarding how to split accounts to shards
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/shard_layout`.
            public struct shard_layoutPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/shard_layout/value1`.
                public var value1: Components.Schemas.ShardLayout
                /// Creates a new `shard_layoutPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ShardLayout) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Layout information regarding how to split accounts to shards
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/shard_layout`.
            public var shard_layout: Components.Schemas.GenesisConfig.shard_layoutPayload?
            /// If true, shuffle the chunk producers across shards. In other words, if
            /// the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents
            /// the set of chunk producers for shard `i`, if this flag were true, the
            /// shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/shuffle_shard_assignment_for_chunk_producers`.
            public var shuffle_shard_assignment_for_chunk_producers: Swift.Bool?
            /// Number of target chunk validator mandates for each shard.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/target_validator_mandates_per_shard`.
            public var target_validator_mandates_per_shard: Swift.Int?
            /// Total supply of tokens at genesis.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/total_supply`.
            public struct total_supplyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GenesisConfig/total_supply/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `total_supplyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Total supply of tokens at genesis.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/total_supply`.
            public var total_supply: Components.Schemas.GenesisConfig.total_supplyPayload
            /// Number of blocks for which a given transaction is valid
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/transaction_validity_period`.
            public var transaction_validity_period: Swift.Int
            /// This is only for test purposes. We hard code some configs for mainnet and testnet
            /// in AllEpochConfig, and we want to have a way to test that code path. This flag is for that.
            /// If set to true, the node will use the same config override path as mainnet and testnet.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/use_production_config`.
            public var use_production_config: Swift.Bool?
            /// List of initial validators.
            ///
            /// - Remark: Generated from `#/components/schemas/GenesisConfig/validators`.
            public var validators: [Components.Schemas.AccountInfo]
            /// Creates a new `GenesisConfig`.
            ///
            /// - Parameters:
            ///   - avg_hidden_validator_seats_per_shard: Expected number of hidden validators per shard.
            ///   - block_producer_kickout_threshold: Threshold for kicking out block producers, between 0 and 100.
            ///   - chain_id: ID of the blockchain. This must be unique for every blockchain.
            ///   - chunk_producer_assignment_changes_limit: Limits the number of shard changes in chunk producer assignments,
            ///   - chunk_producer_kickout_threshold: Threshold for kicking out chunk producers, between 0 and 100.
            ///   - chunk_validator_only_kickout_threshold: Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
            ///   - dynamic_resharding: Enable dynamic re-sharding.
            ///   - epoch_length: Epoch length counted in block heights.
            ///   - fishermen_threshold: Fishermen stake threshold.
            ///   - gas_limit: Initial gas limit.
            ///   - gas_price_adjustment_rate: Gas price adjustment rate
            ///   - genesis_height: Height of genesis block.
            ///   - genesis_time: Official time of blockchain start.
            ///   - max_gas_price:
            ///   - max_inflation_rate: Maximum inflation on the total supply every epoch.
            ///   - max_kickout_stake_perc: Max stake percentage of the validators we will kick out.
            ///   - min_gas_price: Minimum gas price. It is also the initial gas price.
            ///   - minimum_stake_divisor: The minimum stake required for staking is last seat price divided by this number.
            ///   - minimum_stake_ratio: The lowest ratio s/s_total any block producer can have.
            ///   - minimum_validators_per_shard: The minimum number of validators each shard must have
            ///   - num_block_producer_seats: Number of block producer seats at genesis.
            ///   - num_block_producer_seats_per_shard: Defines number of shards and number of block producer seats per each shard at genesis.
            ///   - num_blocks_per_year: Expected number of blocks per year
            ///   - num_chunk_only_producer_seats: Deprecated.
            ///   - num_chunk_producer_seats: Number of chunk producers.
            ///   - num_chunk_validator_seats:
            ///   - online_max_threshold: Online maximum threshold above which validator gets full reward.
            ///   - online_min_threshold: Online minimum threshold below which validator doesn't receive reward.
            ///   - protocol_reward_rate: Protocol treasury rate
            ///   - protocol_treasury_account: Protocol treasury account
            ///   - protocol_upgrade_stake_threshold: Threshold of stake that needs to indicate that they ready for upgrade.
            ///   - protocol_version: Protocol version that this genesis works with.
            ///   - shard_layout: Layout information regarding how to split accounts to shards
            ///   - shuffle_shard_assignment_for_chunk_producers: If true, shuffle the chunk producers across shards. In other words, if
            ///   - target_validator_mandates_per_shard: Number of target chunk validator mandates for each shard.
            ///   - total_supply: Total supply of tokens at genesis.
            ///   - transaction_validity_period: Number of blocks for which a given transaction is valid
            ///   - use_production_config: This is only for test purposes. We hard code some configs for mainnet and testnet
            ///   - validators: List of initial validators.
            public init(
                avg_hidden_validator_seats_per_shard: [Swift.Int],
                block_producer_kickout_threshold: Swift.Int,
                chain_id: Swift.String,
                chunk_producer_assignment_changes_limit: Swift.Int? = nil,
                chunk_producer_kickout_threshold: Swift.Int,
                chunk_validator_only_kickout_threshold: Swift.Int? = nil,
                dynamic_resharding: Swift.Bool,
                epoch_length: Swift.Int,
                fishermen_threshold: Components.Schemas.GenesisConfig.fishermen_thresholdPayload,
                gas_limit: Components.Schemas.GenesisConfig.gas_limitPayload,
                gas_price_adjustment_rate: [Swift.Int32],
                genesis_height: Swift.Int,
                genesis_time: Foundation.Date,
                max_gas_price: Components.Schemas.NearToken,
                max_inflation_rate: [Swift.Int32],
                max_kickout_stake_perc: Swift.Int? = nil,
                min_gas_price: Components.Schemas.GenesisConfig.min_gas_pricePayload,
                minimum_stake_divisor: Swift.Int? = nil,
                minimum_stake_ratio: [Swift.Int32]? = nil,
                minimum_validators_per_shard: Swift.Int? = nil,
                num_block_producer_seats: Swift.Int,
                num_block_producer_seats_per_shard: [Swift.Int],
                num_blocks_per_year: Swift.Int,
                num_chunk_only_producer_seats: Swift.Int? = nil,
                num_chunk_producer_seats: Swift.Int? = nil,
                num_chunk_validator_seats: Swift.Int? = nil,
                online_max_threshold: [Swift.Int32]? = nil,
                online_min_threshold: [Swift.Int32]? = nil,
                protocol_reward_rate: [Swift.Int32],
                protocol_treasury_account: Components.Schemas.GenesisConfig.protocol_treasury_accountPayload,
                protocol_upgrade_stake_threshold: [Swift.Int32]? = nil,
                protocol_version: Swift.Int,
                shard_layout: Components.Schemas.GenesisConfig.shard_layoutPayload? = nil,
                shuffle_shard_assignment_for_chunk_producers: Swift.Bool? = nil,
                target_validator_mandates_per_shard: Swift.Int? = nil,
                total_supply: Components.Schemas.GenesisConfig.total_supplyPayload,
                transaction_validity_period: Swift.Int,
                use_production_config: Swift.Bool? = nil,
                validators: [Components.Schemas.AccountInfo]
            ) {
                self.avg_hidden_validator_seats_per_shard = avg_hidden_validator_seats_per_shard
                self.block_producer_kickout_threshold = block_producer_kickout_threshold
                self.chain_id = chain_id
                self.chunk_producer_assignment_changes_limit = chunk_producer_assignment_changes_limit
                self.chunk_producer_kickout_threshold = chunk_producer_kickout_threshold
                self.chunk_validator_only_kickout_threshold = chunk_validator_only_kickout_threshold
                self.dynamic_resharding = dynamic_resharding
                self.epoch_length = epoch_length
                self.fishermen_threshold = fishermen_threshold
                self.gas_limit = gas_limit
                self.gas_price_adjustment_rate = gas_price_adjustment_rate
                self.genesis_height = genesis_height
                self.genesis_time = genesis_time
                self.max_gas_price = max_gas_price
                self.max_inflation_rate = max_inflation_rate
                self.max_kickout_stake_perc = max_kickout_stake_perc
                self.min_gas_price = min_gas_price
                self.minimum_stake_divisor = minimum_stake_divisor
                self.minimum_stake_ratio = minimum_stake_ratio
                self.minimum_validators_per_shard = minimum_validators_per_shard
                self.num_block_producer_seats = num_block_producer_seats
                self.num_block_producer_seats_per_shard = num_block_producer_seats_per_shard
                self.num_blocks_per_year = num_blocks_per_year
                self.num_chunk_only_producer_seats = num_chunk_only_producer_seats
                self.num_chunk_producer_seats = num_chunk_producer_seats
                self.num_chunk_validator_seats = num_chunk_validator_seats
                self.online_max_threshold = online_max_threshold
                self.online_min_threshold = online_min_threshold
                self.protocol_reward_rate = protocol_reward_rate
                self.protocol_treasury_account = protocol_treasury_account
                self.protocol_upgrade_stake_threshold = protocol_upgrade_stake_threshold
                self.protocol_version = protocol_version
                self.shard_layout = shard_layout
                self.shuffle_shard_assignment_for_chunk_producers = shuffle_shard_assignment_for_chunk_producers
                self.target_validator_mandates_per_shard = target_validator_mandates_per_shard
                self.total_supply = total_supply
                self.transaction_validity_period = transaction_validity_period
                self.use_production_config = use_production_config
                self.validators = validators
            }
            public enum CodingKeys: String, CodingKey {
                case avg_hidden_validator_seats_per_shard
                case block_producer_kickout_threshold
                case chain_id
                case chunk_producer_assignment_changes_limit
                case chunk_producer_kickout_threshold
                case chunk_validator_only_kickout_threshold
                case dynamic_resharding
                case epoch_length
                case fishermen_threshold
                case gas_limit
                case gas_price_adjustment_rate
                case genesis_height
                case genesis_time
                case max_gas_price
                case max_inflation_rate
                case max_kickout_stake_perc
                case min_gas_price
                case minimum_stake_divisor
                case minimum_stake_ratio
                case minimum_validators_per_shard
                case num_block_producer_seats
                case num_block_producer_seats_per_shard
                case num_blocks_per_year
                case num_chunk_only_producer_seats
                case num_chunk_producer_seats
                case num_chunk_validator_seats
                case online_max_threshold
                case online_min_threshold
                case protocol_reward_rate
                case protocol_treasury_account
                case protocol_upgrade_stake_threshold
                case protocol_version
                case shard_layout
                case shuffle_shard_assignment_for_chunk_producers
                case target_validator_mandates_per_shard
                case total_supply
                case transaction_validity_period
                case use_production_config
                case validators
            }
        }
        /// - Remark: Generated from `#/components/schemas/GenesisConfigRequest`.
        public typealias GenesisConfigRequest = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/GlobalContractDeployMode`.
        @frozen public enum GlobalContractDeployMode: Codable, Hashable, Sendable {
            /// Contract is deployed under its code hash.
            /// Users will be able reference it by that hash.
            /// This effectively makes the contract immutable.
            ///
            /// - Remark: Generated from `#/components/schemas/GlobalContractDeployMode/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CodeHash = "CodeHash"
            }
            /// Contract is deployed under its code hash.
            /// Users will be able reference it by that hash.
            /// This effectively makes the contract immutable.
            ///
            /// - Remark: Generated from `#/components/schemas/GlobalContractDeployMode/case1`.
            case case1(Components.Schemas.GlobalContractDeployMode.Case1Payload)
            /// Contract is deployed under the owner account id.
            /// Users will be able reference it by that account id.
            /// This allows the owner to update the contract for all its users.
            ///
            /// - Remark: Generated from `#/components/schemas/GlobalContractDeployMode/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case AccountId = "AccountId"
            }
            /// Contract is deployed under the owner account id.
            /// Users will be able reference it by that account id.
            /// This allows the owner to update the contract for all its users.
            ///
            /// - Remark: Generated from `#/components/schemas/GlobalContractDeployMode/case2`.
            case case2(Components.Schemas.GlobalContractDeployMode.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier`.
        @frozen public enum GlobalContractIdentifier: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case1/CodeHash`.
                public var CodeHash: Components.Schemas.CryptoHash
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - CodeHash:
                public init(CodeHash: Components.Schemas.CryptoHash) {
                    self.CodeHash = CodeHash
                }
                public enum CodingKeys: String, CodingKey {
                    case CodeHash
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CodeHash = try container.decode(
                        Components.Schemas.CryptoHash.self,
                        forKey: .CodeHash
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CodeHash"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case1`.
            case case1(Components.Schemas.GlobalContractIdentifier.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case2/AccountId`.
                public var AccountId: Components.Schemas.AccountId
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - AccountId:
                public init(AccountId: Components.Schemas.AccountId) {
                    self.AccountId = AccountId
                }
                public enum CodingKeys: String, CodingKey {
                    case AccountId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AccountId = try container.decode(
                        Components.Schemas.AccountId.self,
                        forKey: .AccountId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AccountId"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifier/case2`.
            case case2(Components.Schemas.GlobalContractIdentifier.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifierView`.
        public struct GlobalContractIdentifierView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifierView/value1`.
            public var value1: Components.Schemas.CryptoHash?
            /// - Remark: Generated from `#/components/schemas/GlobalContractIdentifierView/value2`.
            public var value2: Components.Schemas.AccountId?
            /// Creates a new `GlobalContractIdentifierView`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.CryptoHash? = nil,
                value2: Components.Schemas.AccountId? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try decoder.decodeFromSingleValueContainer()
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeFirstNonNilValueToSingleValueContainer([
                    self.value1,
                    self.value2
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/HostError`.
        @frozen public enum HostError: Codable, Hashable, Sendable {
            /// String encoding is bad UTF-16 sequence
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case BadUTF16 = "BadUTF16"
            }
            /// String encoding is bad UTF-16 sequence
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case1`.
            case case1(Components.Schemas.HostError.Case1Payload)
            /// String encoding is bad UTF-8 sequence
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case BadUTF8 = "BadUTF8"
            }
            /// String encoding is bad UTF-8 sequence
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case2`.
            case case2(Components.Schemas.HostError.Case2Payload)
            /// Exceeded the prepaid gas
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case GasExceeded = "GasExceeded"
            }
            /// Exceeded the prepaid gas
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case3`.
            case case3(Components.Schemas.HostError.Case3Payload)
            /// Exceeded the maximum amount of gas allowed to burn per contract
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case GasLimitExceeded = "GasLimitExceeded"
            }
            /// Exceeded the maximum amount of gas allowed to burn per contract
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case4`.
            case case4(Components.Schemas.HostError.Case4Payload)
            /// Exceeded the account balance
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case5`.
            @frozen public enum Case5Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case BalanceExceeded = "BalanceExceeded"
            }
            /// Exceeded the account balance
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case5`.
            case case5(Components.Schemas.HostError.Case5Payload)
            /// Tried to call an empty method name
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case EmptyMethodName = "EmptyMethodName"
            }
            /// Tried to call an empty method name
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case6`.
            case case6(Components.Schemas.HostError.Case6Payload)
            /// Smart contract panicked
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case7/GuestPanic`.
                public struct GuestPanicPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case7/GuestPanic/panic_msg`.
                    public var panic_msg: Swift.String
                    /// Creates a new `GuestPanicPayload`.
                    ///
                    /// - Parameters:
                    ///   - panic_msg:
                    public init(panic_msg: Swift.String) {
                        self.panic_msg = panic_msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case panic_msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case7/GuestPanic`.
                public var GuestPanic: Components.Schemas.HostError.Case7Payload.GuestPanicPayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - GuestPanic:
                public init(GuestPanic: Components.Schemas.HostError.Case7Payload.GuestPanicPayload) {
                    self.GuestPanic = GuestPanic
                }
                public enum CodingKeys: String, CodingKey {
                    case GuestPanic
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.GuestPanic = try container.decode(
                        Components.Schemas.HostError.Case7Payload.GuestPanicPayload.self,
                        forKey: .GuestPanic
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "GuestPanic"
                    ])
                }
            }
            /// Smart contract panicked
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case7`.
            case case7(Components.Schemas.HostError.Case7Payload)
            /// IntegerOverflow happened during a contract execution
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case8`.
            @frozen public enum Case8Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case IntegerOverflow = "IntegerOverflow"
            }
            /// IntegerOverflow happened during a contract execution
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case8`.
            case case8(Components.Schemas.HostError.Case8Payload)
            /// `promise_idx` does not correspond to existing promises
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case9/InvalidPromiseIndex`.
                public struct InvalidPromiseIndexPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case9/InvalidPromiseIndex/promise_idx`.
                    public var promise_idx: Swift.Int
                    /// Creates a new `InvalidPromiseIndexPayload`.
                    ///
                    /// - Parameters:
                    ///   - promise_idx:
                    public init(promise_idx: Swift.Int) {
                        self.promise_idx = promise_idx
                    }
                    public enum CodingKeys: String, CodingKey {
                        case promise_idx
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case9/InvalidPromiseIndex`.
                public var InvalidPromiseIndex: Components.Schemas.HostError.Case9Payload.InvalidPromiseIndexPayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - InvalidPromiseIndex:
                public init(InvalidPromiseIndex: Components.Schemas.HostError.Case9Payload.InvalidPromiseIndexPayload) {
                    self.InvalidPromiseIndex = InvalidPromiseIndex
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidPromiseIndex
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidPromiseIndex = try container.decode(
                        Components.Schemas.HostError.Case9Payload.InvalidPromiseIndexPayload.self,
                        forKey: .InvalidPromiseIndex
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidPromiseIndex"
                    ])
                }
            }
            /// `promise_idx` does not correspond to existing promises
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case9`.
            case case9(Components.Schemas.HostError.Case9Payload)
            /// Actions can only be appended to non-joint promise.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case10`.
            @frozen public enum Case10Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CannotAppendActionToJointPromise = "CannotAppendActionToJointPromise"
            }
            /// Actions can only be appended to non-joint promise.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case10`.
            case case10(Components.Schemas.HostError.Case10Payload)
            /// Returning joint promise is currently prohibited
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case11`.
            @frozen public enum Case11Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CannotReturnJointPromise = "CannotReturnJointPromise"
            }
            /// Returning joint promise is currently prohibited
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case11`.
            case case11(Components.Schemas.HostError.Case11Payload)
            /// Accessed invalid promise result index
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case12/InvalidPromiseResultIndex`.
                public struct InvalidPromiseResultIndexPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case12/InvalidPromiseResultIndex/result_idx`.
                    public var result_idx: Swift.Int
                    /// Creates a new `InvalidPromiseResultIndexPayload`.
                    ///
                    /// - Parameters:
                    ///   - result_idx:
                    public init(result_idx: Swift.Int) {
                        self.result_idx = result_idx
                    }
                    public enum CodingKeys: String, CodingKey {
                        case result_idx
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case12/InvalidPromiseResultIndex`.
                public var InvalidPromiseResultIndex: Components.Schemas.HostError.Case12Payload.InvalidPromiseResultIndexPayload
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - InvalidPromiseResultIndex:
                public init(InvalidPromiseResultIndex: Components.Schemas.HostError.Case12Payload.InvalidPromiseResultIndexPayload) {
                    self.InvalidPromiseResultIndex = InvalidPromiseResultIndex
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidPromiseResultIndex
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidPromiseResultIndex = try container.decode(
                        Components.Schemas.HostError.Case12Payload.InvalidPromiseResultIndexPayload.self,
                        forKey: .InvalidPromiseResultIndex
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidPromiseResultIndex"
                    ])
                }
            }
            /// Accessed invalid promise result index
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case12`.
            case case12(Components.Schemas.HostError.Case12Payload)
            /// Accessed invalid register id
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case13/InvalidRegisterId`.
                public struct InvalidRegisterIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case13/InvalidRegisterId/register_id`.
                    public var register_id: Swift.Int
                    /// Creates a new `InvalidRegisterIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - register_id:
                    public init(register_id: Swift.Int) {
                        self.register_id = register_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case register_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case13/InvalidRegisterId`.
                public var InvalidRegisterId: Components.Schemas.HostError.Case13Payload.InvalidRegisterIdPayload
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - InvalidRegisterId:
                public init(InvalidRegisterId: Components.Schemas.HostError.Case13Payload.InvalidRegisterIdPayload) {
                    self.InvalidRegisterId = InvalidRegisterId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidRegisterId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidRegisterId = try container.decode(
                        Components.Schemas.HostError.Case13Payload.InvalidRegisterIdPayload.self,
                        forKey: .InvalidRegisterId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidRegisterId"
                    ])
                }
            }
            /// Accessed invalid register id
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case13`.
            case case13(Components.Schemas.HostError.Case13Payload)
            /// Iterator `iterator_index` was invalidated after its creation by performing a mutable operation on trie
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case14/IteratorWasInvalidated`.
                public struct IteratorWasInvalidatedPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case14/IteratorWasInvalidated/iterator_index`.
                    public var iterator_index: Swift.Int
                    /// Creates a new `IteratorWasInvalidatedPayload`.
                    ///
                    /// - Parameters:
                    ///   - iterator_index:
                    public init(iterator_index: Swift.Int) {
                        self.iterator_index = iterator_index
                    }
                    public enum CodingKeys: String, CodingKey {
                        case iterator_index
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case14/IteratorWasInvalidated`.
                public var IteratorWasInvalidated: Components.Schemas.HostError.Case14Payload.IteratorWasInvalidatedPayload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - IteratorWasInvalidated:
                public init(IteratorWasInvalidated: Components.Schemas.HostError.Case14Payload.IteratorWasInvalidatedPayload) {
                    self.IteratorWasInvalidated = IteratorWasInvalidated
                }
                public enum CodingKeys: String, CodingKey {
                    case IteratorWasInvalidated
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.IteratorWasInvalidated = try container.decode(
                        Components.Schemas.HostError.Case14Payload.IteratorWasInvalidatedPayload.self,
                        forKey: .IteratorWasInvalidated
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "IteratorWasInvalidated"
                    ])
                }
            }
            /// Iterator `iterator_index` was invalidated after its creation by performing a mutable operation on trie
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case14`.
            case case14(Components.Schemas.HostError.Case14Payload)
            /// Accessed memory outside the bounds
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case15`.
            @frozen public enum Case15Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case MemoryAccessViolation = "MemoryAccessViolation"
            }
            /// Accessed memory outside the bounds
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case15`.
            case case15(Components.Schemas.HostError.Case15Payload)
            /// VM Logic returned an invalid receipt index
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case16/InvalidReceiptIndex`.
                public struct InvalidReceiptIndexPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case16/InvalidReceiptIndex/receipt_index`.
                    public var receipt_index: Swift.Int
                    /// Creates a new `InvalidReceiptIndexPayload`.
                    ///
                    /// - Parameters:
                    ///   - receipt_index:
                    public init(receipt_index: Swift.Int) {
                        self.receipt_index = receipt_index
                    }
                    public enum CodingKeys: String, CodingKey {
                        case receipt_index
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case16/InvalidReceiptIndex`.
                public var InvalidReceiptIndex: Components.Schemas.HostError.Case16Payload.InvalidReceiptIndexPayload
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - InvalidReceiptIndex:
                public init(InvalidReceiptIndex: Components.Schemas.HostError.Case16Payload.InvalidReceiptIndexPayload) {
                    self.InvalidReceiptIndex = InvalidReceiptIndex
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidReceiptIndex
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidReceiptIndex = try container.decode(
                        Components.Schemas.HostError.Case16Payload.InvalidReceiptIndexPayload.self,
                        forKey: .InvalidReceiptIndex
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidReceiptIndex"
                    ])
                }
            }
            /// VM Logic returned an invalid receipt index
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case16`.
            case case16(Components.Schemas.HostError.Case16Payload)
            /// Iterator index `iterator_index` does not exist
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case17/InvalidIteratorIndex`.
                public struct InvalidIteratorIndexPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case17/InvalidIteratorIndex/iterator_index`.
                    public var iterator_index: Swift.Int
                    /// Creates a new `InvalidIteratorIndexPayload`.
                    ///
                    /// - Parameters:
                    ///   - iterator_index:
                    public init(iterator_index: Swift.Int) {
                        self.iterator_index = iterator_index
                    }
                    public enum CodingKeys: String, CodingKey {
                        case iterator_index
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case17/InvalidIteratorIndex`.
                public var InvalidIteratorIndex: Components.Schemas.HostError.Case17Payload.InvalidIteratorIndexPayload
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - InvalidIteratorIndex:
                public init(InvalidIteratorIndex: Components.Schemas.HostError.Case17Payload.InvalidIteratorIndexPayload) {
                    self.InvalidIteratorIndex = InvalidIteratorIndex
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidIteratorIndex
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidIteratorIndex = try container.decode(
                        Components.Schemas.HostError.Case17Payload.InvalidIteratorIndexPayload.self,
                        forKey: .InvalidIteratorIndex
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidIteratorIndex"
                    ])
                }
            }
            /// Iterator index `iterator_index` does not exist
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case17`.
            case case17(Components.Schemas.HostError.Case17Payload)
            /// VM Logic returned an invalid account id
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case18`.
            @frozen public enum Case18Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidAccountId = "InvalidAccountId"
            }
            /// VM Logic returned an invalid account id
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case18`.
            case case18(Components.Schemas.HostError.Case18Payload)
            /// VM Logic returned an invalid method name
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case19`.
            @frozen public enum Case19Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidMethodName = "InvalidMethodName"
            }
            /// VM Logic returned an invalid method name
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case19`.
            case case19(Components.Schemas.HostError.Case19Payload)
            /// VM Logic provided an invalid public key
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case20`.
            @frozen public enum Case20Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidPublicKey = "InvalidPublicKey"
            }
            /// VM Logic provided an invalid public key
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case20`.
            case case20(Components.Schemas.HostError.Case20Payload)
            /// `method_name` is not allowed in view calls
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case21`.
            public struct Case21Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case21/ProhibitedInView`.
                public struct ProhibitedInViewPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case21/ProhibitedInView/method_name`.
                    public var method_name: Swift.String
                    /// Creates a new `ProhibitedInViewPayload`.
                    ///
                    /// - Parameters:
                    ///   - method_name:
                    public init(method_name: Swift.String) {
                        self.method_name = method_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case method_name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case21/ProhibitedInView`.
                public var ProhibitedInView: Components.Schemas.HostError.Case21Payload.ProhibitedInViewPayload
                /// Creates a new `Case21Payload`.
                ///
                /// - Parameters:
                ///   - ProhibitedInView:
                public init(ProhibitedInView: Components.Schemas.HostError.Case21Payload.ProhibitedInViewPayload) {
                    self.ProhibitedInView = ProhibitedInView
                }
                public enum CodingKeys: String, CodingKey {
                    case ProhibitedInView
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ProhibitedInView = try container.decode(
                        Components.Schemas.HostError.Case21Payload.ProhibitedInViewPayload.self,
                        forKey: .ProhibitedInView
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ProhibitedInView"
                    ])
                }
            }
            /// `method_name` is not allowed in view calls
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case21`.
            case case21(Components.Schemas.HostError.Case21Payload)
            /// The total number of logs will exceed the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case22`.
            public struct Case22Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case22/NumberOfLogsExceeded`.
                public struct NumberOfLogsExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case22/NumberOfLogsExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `NumberOfLogsExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    public init(limit: Swift.Int) {
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case22/NumberOfLogsExceeded`.
                public var NumberOfLogsExceeded: Components.Schemas.HostError.Case22Payload.NumberOfLogsExceededPayload
                /// Creates a new `Case22Payload`.
                ///
                /// - Parameters:
                ///   - NumberOfLogsExceeded:
                public init(NumberOfLogsExceeded: Components.Schemas.HostError.Case22Payload.NumberOfLogsExceededPayload) {
                    self.NumberOfLogsExceeded = NumberOfLogsExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case NumberOfLogsExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NumberOfLogsExceeded = try container.decode(
                        Components.Schemas.HostError.Case22Payload.NumberOfLogsExceededPayload.self,
                        forKey: .NumberOfLogsExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NumberOfLogsExceeded"
                    ])
                }
            }
            /// The total number of logs will exceed the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case22`.
            case case22(Components.Schemas.HostError.Case22Payload)
            /// The storage key length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case23`.
            public struct Case23Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case23/KeyLengthExceeded`.
                public struct KeyLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case23/KeyLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case23/KeyLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `KeyLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case23/KeyLengthExceeded`.
                public var KeyLengthExceeded: Components.Schemas.HostError.Case23Payload.KeyLengthExceededPayload
                /// Creates a new `Case23Payload`.
                ///
                /// - Parameters:
                ///   - KeyLengthExceeded:
                public init(KeyLengthExceeded: Components.Schemas.HostError.Case23Payload.KeyLengthExceededPayload) {
                    self.KeyLengthExceeded = KeyLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case KeyLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.KeyLengthExceeded = try container.decode(
                        Components.Schemas.HostError.Case23Payload.KeyLengthExceededPayload.self,
                        forKey: .KeyLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "KeyLengthExceeded"
                    ])
                }
            }
            /// The storage key length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case23`.
            case case23(Components.Schemas.HostError.Case23Payload)
            /// The storage value length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case24`.
            public struct Case24Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case24/ValueLengthExceeded`.
                public struct ValueLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case24/ValueLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case24/ValueLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `ValueLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case24/ValueLengthExceeded`.
                public var ValueLengthExceeded: Components.Schemas.HostError.Case24Payload.ValueLengthExceededPayload
                /// Creates a new `Case24Payload`.
                ///
                /// - Parameters:
                ///   - ValueLengthExceeded:
                public init(ValueLengthExceeded: Components.Schemas.HostError.Case24Payload.ValueLengthExceededPayload) {
                    self.ValueLengthExceeded = ValueLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ValueLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ValueLengthExceeded = try container.decode(
                        Components.Schemas.HostError.Case24Payload.ValueLengthExceededPayload.self,
                        forKey: .ValueLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ValueLengthExceeded"
                    ])
                }
            }
            /// The storage value length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case24`.
            case case24(Components.Schemas.HostError.Case24Payload)
            /// The total log length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case25`.
            public struct Case25Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case25/TotalLogLengthExceeded`.
                public struct TotalLogLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case25/TotalLogLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case25/TotalLogLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `TotalLogLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case25/TotalLogLengthExceeded`.
                public var TotalLogLengthExceeded: Components.Schemas.HostError.Case25Payload.TotalLogLengthExceededPayload
                /// Creates a new `Case25Payload`.
                ///
                /// - Parameters:
                ///   - TotalLogLengthExceeded:
                public init(TotalLogLengthExceeded: Components.Schemas.HostError.Case25Payload.TotalLogLengthExceededPayload) {
                    self.TotalLogLengthExceeded = TotalLogLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case TotalLogLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TotalLogLengthExceeded = try container.decode(
                        Components.Schemas.HostError.Case25Payload.TotalLogLengthExceededPayload.self,
                        forKey: .TotalLogLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TotalLogLengthExceeded"
                    ])
                }
            }
            /// The total log length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case25`.
            case case25(Components.Schemas.HostError.Case25Payload)
            /// The maximum number of promises within a FunctionCall exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case26`.
            public struct Case26Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case26/NumberPromisesExceeded`.
                public struct NumberPromisesExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case26/NumberPromisesExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case26/NumberPromisesExceeded/number_of_promises`.
                    public var number_of_promises: Swift.Int
                    /// Creates a new `NumberPromisesExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - number_of_promises:
                    public init(
                        limit: Swift.Int,
                        number_of_promises: Swift.Int
                    ) {
                        self.limit = limit
                        self.number_of_promises = number_of_promises
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case number_of_promises
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case26/NumberPromisesExceeded`.
                public var NumberPromisesExceeded: Components.Schemas.HostError.Case26Payload.NumberPromisesExceededPayload
                /// Creates a new `Case26Payload`.
                ///
                /// - Parameters:
                ///   - NumberPromisesExceeded:
                public init(NumberPromisesExceeded: Components.Schemas.HostError.Case26Payload.NumberPromisesExceededPayload) {
                    self.NumberPromisesExceeded = NumberPromisesExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case NumberPromisesExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NumberPromisesExceeded = try container.decode(
                        Components.Schemas.HostError.Case26Payload.NumberPromisesExceededPayload.self,
                        forKey: .NumberPromisesExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NumberPromisesExceeded"
                    ])
                }
            }
            /// The maximum number of promises within a FunctionCall exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case26`.
            case case26(Components.Schemas.HostError.Case26Payload)
            /// The maximum number of input data dependencies exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case27`.
            public struct Case27Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case27/NumberInputDataDependenciesExceeded`.
                public struct NumberInputDataDependenciesExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case27/NumberInputDataDependenciesExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case27/NumberInputDataDependenciesExceeded/number_of_input_data_dependencies`.
                    public var number_of_input_data_dependencies: Swift.Int
                    /// Creates a new `NumberInputDataDependenciesExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - number_of_input_data_dependencies:
                    public init(
                        limit: Swift.Int,
                        number_of_input_data_dependencies: Swift.Int
                    ) {
                        self.limit = limit
                        self.number_of_input_data_dependencies = number_of_input_data_dependencies
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case number_of_input_data_dependencies
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case27/NumberInputDataDependenciesExceeded`.
                public var NumberInputDataDependenciesExceeded: Components.Schemas.HostError.Case27Payload.NumberInputDataDependenciesExceededPayload
                /// Creates a new `Case27Payload`.
                ///
                /// - Parameters:
                ///   - NumberInputDataDependenciesExceeded:
                public init(NumberInputDataDependenciesExceeded: Components.Schemas.HostError.Case27Payload.NumberInputDataDependenciesExceededPayload) {
                    self.NumberInputDataDependenciesExceeded = NumberInputDataDependenciesExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case NumberInputDataDependenciesExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NumberInputDataDependenciesExceeded = try container.decode(
                        Components.Schemas.HostError.Case27Payload.NumberInputDataDependenciesExceededPayload.self,
                        forKey: .NumberInputDataDependenciesExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NumberInputDataDependenciesExceeded"
                    ])
                }
            }
            /// The maximum number of input data dependencies exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case27`.
            case case27(Components.Schemas.HostError.Case27Payload)
            /// The returned value length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case28`.
            public struct Case28Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case28/ReturnedValueLengthExceeded`.
                public struct ReturnedValueLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case28/ReturnedValueLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case28/ReturnedValueLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `ReturnedValueLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case28/ReturnedValueLengthExceeded`.
                public var ReturnedValueLengthExceeded: Components.Schemas.HostError.Case28Payload.ReturnedValueLengthExceededPayload
                /// Creates a new `Case28Payload`.
                ///
                /// - Parameters:
                ///   - ReturnedValueLengthExceeded:
                public init(ReturnedValueLengthExceeded: Components.Schemas.HostError.Case28Payload.ReturnedValueLengthExceededPayload) {
                    self.ReturnedValueLengthExceeded = ReturnedValueLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ReturnedValueLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ReturnedValueLengthExceeded = try container.decode(
                        Components.Schemas.HostError.Case28Payload.ReturnedValueLengthExceededPayload.self,
                        forKey: .ReturnedValueLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ReturnedValueLengthExceeded"
                    ])
                }
            }
            /// The returned value length exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case28`.
            case case28(Components.Schemas.HostError.Case28Payload)
            /// The contract size for DeployContract action exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case29`.
            public struct Case29Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case29/ContractSizeExceeded`.
                public struct ContractSizeExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case29/ContractSizeExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/HostError/case29/ContractSizeExceeded/size`.
                    public var size: Swift.Int
                    /// Creates a new `ContractSizeExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - size:
                    public init(
                        limit: Swift.Int,
                        size: Swift.Int
                    ) {
                        self.limit = limit
                        self.size = size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case size
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case29/ContractSizeExceeded`.
                public var ContractSizeExceeded: Components.Schemas.HostError.Case29Payload.ContractSizeExceededPayload
                /// Creates a new `Case29Payload`.
                ///
                /// - Parameters:
                ///   - ContractSizeExceeded:
                public init(ContractSizeExceeded: Components.Schemas.HostError.Case29Payload.ContractSizeExceededPayload) {
                    self.ContractSizeExceeded = ContractSizeExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ContractSizeExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ContractSizeExceeded = try container.decode(
                        Components.Schemas.HostError.Case29Payload.ContractSizeExceededPayload.self,
                        forKey: .ContractSizeExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ContractSizeExceeded"
                    ])
                }
            }
            /// The contract size for DeployContract action exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case29`.
            case case29(Components.Schemas.HostError.Case29Payload)
            /// The host function was deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case30`.
            public struct Case30Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case30/Deprecated`.
                public struct DeprecatedPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case30/Deprecated/method_name`.
                    public var method_name: Swift.String
                    /// Creates a new `DeprecatedPayload`.
                    ///
                    /// - Parameters:
                    ///   - method_name:
                    public init(method_name: Swift.String) {
                        self.method_name = method_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case method_name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case30/Deprecated`.
                public var Deprecated: Components.Schemas.HostError.Case30Payload.DeprecatedPayload
                /// Creates a new `Case30Payload`.
                ///
                /// - Parameters:
                ///   - Deprecated:
                public init(Deprecated: Components.Schemas.HostError.Case30Payload.DeprecatedPayload) {
                    self.Deprecated = Deprecated
                }
                public enum CodingKeys: String, CodingKey {
                    case Deprecated
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Deprecated = try container.decode(
                        Components.Schemas.HostError.Case30Payload.DeprecatedPayload.self,
                        forKey: .Deprecated
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Deprecated"
                    ])
                }
            }
            /// The host function was deprecated.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case30`.
            case case30(Components.Schemas.HostError.Case30Payload)
            /// General errors for ECDSA recover.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case31`.
            public struct Case31Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case31/ECRecoverError`.
                public struct ECRecoverErrorPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case31/ECRecoverError/msg`.
                    public var msg: Swift.String
                    /// Creates a new `ECRecoverErrorPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    public init(msg: Swift.String) {
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case31/ECRecoverError`.
                public var ECRecoverError: Components.Schemas.HostError.Case31Payload.ECRecoverErrorPayload
                /// Creates a new `Case31Payload`.
                ///
                /// - Parameters:
                ///   - ECRecoverError:
                public init(ECRecoverError: Components.Schemas.HostError.Case31Payload.ECRecoverErrorPayload) {
                    self.ECRecoverError = ECRecoverError
                }
                public enum CodingKeys: String, CodingKey {
                    case ECRecoverError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ECRecoverError = try container.decode(
                        Components.Schemas.HostError.Case31Payload.ECRecoverErrorPayload.self,
                        forKey: .ECRecoverError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ECRecoverError"
                    ])
                }
            }
            /// General errors for ECDSA recover.
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case31`.
            case case31(Components.Schemas.HostError.Case31Payload)
            /// Invalid input to alt_bn128 family of functions (e.g., point which isn't
            /// on the curve).
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case32`.
            public struct Case32Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case32/AltBn128InvalidInput`.
                public struct AltBn128InvalidInputPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case32/AltBn128InvalidInput/msg`.
                    public var msg: Swift.String
                    /// Creates a new `AltBn128InvalidInputPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    public init(msg: Swift.String) {
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case32/AltBn128InvalidInput`.
                public var AltBn128InvalidInput: Components.Schemas.HostError.Case32Payload.AltBn128InvalidInputPayload
                /// Creates a new `Case32Payload`.
                ///
                /// - Parameters:
                ///   - AltBn128InvalidInput:
                public init(AltBn128InvalidInput: Components.Schemas.HostError.Case32Payload.AltBn128InvalidInputPayload) {
                    self.AltBn128InvalidInput = AltBn128InvalidInput
                }
                public enum CodingKeys: String, CodingKey {
                    case AltBn128InvalidInput
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AltBn128InvalidInput = try container.decode(
                        Components.Schemas.HostError.Case32Payload.AltBn128InvalidInputPayload.self,
                        forKey: .AltBn128InvalidInput
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AltBn128InvalidInput"
                    ])
                }
            }
            /// Invalid input to alt_bn128 family of functions (e.g., point which isn't
            /// on the curve).
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case32`.
            case case32(Components.Schemas.HostError.Case32Payload)
            /// Invalid input to ed25519 signature verification function (e.g. signature cannot be
            /// derived from bytes).
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case33`.
            public struct Case33Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/HostError/case33/Ed25519VerifyInvalidInput`.
                public struct Ed25519VerifyInvalidInputPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/HostError/case33/Ed25519VerifyInvalidInput/msg`.
                    public var msg: Swift.String
                    /// Creates a new `Ed25519VerifyInvalidInputPayload`.
                    ///
                    /// - Parameters:
                    ///   - msg:
                    public init(msg: Swift.String) {
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/schemas/HostError/case33/Ed25519VerifyInvalidInput`.
                public var Ed25519VerifyInvalidInput: Components.Schemas.HostError.Case33Payload.Ed25519VerifyInvalidInputPayload
                /// Creates a new `Case33Payload`.
                ///
                /// - Parameters:
                ///   - Ed25519VerifyInvalidInput:
                public init(Ed25519VerifyInvalidInput: Components.Schemas.HostError.Case33Payload.Ed25519VerifyInvalidInputPayload) {
                    self.Ed25519VerifyInvalidInput = Ed25519VerifyInvalidInput
                }
                public enum CodingKeys: String, CodingKey {
                    case Ed25519VerifyInvalidInput
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Ed25519VerifyInvalidInput = try container.decode(
                        Components.Schemas.HostError.Case33Payload.Ed25519VerifyInvalidInputPayload.self,
                        forKey: .Ed25519VerifyInvalidInput
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Ed25519VerifyInvalidInput"
                    ])
                }
            }
            /// Invalid input to ed25519 signature verification function (e.g. signature cannot be
            /// derived from bytes).
            ///
            /// - Remark: Generated from `#/components/schemas/HostError/case33`.
            case case33(Components.Schemas.HostError.Case33Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case19(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case20(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case21(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case22(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case23(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case24(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case25(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case26(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case27(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case28(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case29(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case30(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case31(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case32(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case33(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case11(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                case let .case18(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case19(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case20(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case21(value):
                    try value.encode(to: encoder)
                case let .case22(value):
                    try value.encode(to: encoder)
                case let .case23(value):
                    try value.encode(to: encoder)
                case let .case24(value):
                    try value.encode(to: encoder)
                case let .case25(value):
                    try value.encode(to: encoder)
                case let .case26(value):
                    try value.encode(to: encoder)
                case let .case27(value):
                    try value.encode(to: encoder)
                case let .case28(value):
                    try value.encode(to: encoder)
                case let .case29(value):
                    try value.encode(to: encoder)
                case let .case30(value):
                    try value.encode(to: encoder)
                case let .case31(value):
                    try value.encode(to: encoder)
                case let .case32(value):
                    try value.encode(to: encoder)
                case let .case33(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError`.
        @frozen public enum InvalidAccessKeyError: Codable, Hashable, Sendable {
            /// The access key identified by the `public_key` doesn't exist for the account
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1/AccessKeyNotFound`.
                public struct AccessKeyNotFoundPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1/AccessKeyNotFound/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1/AccessKeyNotFound/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `AccessKeyNotFoundPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1/AccessKeyNotFound`.
                public var AccessKeyNotFound: Components.Schemas.InvalidAccessKeyError.Case1Payload.AccessKeyNotFoundPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - AccessKeyNotFound:
                public init(AccessKeyNotFound: Components.Schemas.InvalidAccessKeyError.Case1Payload.AccessKeyNotFoundPayload) {
                    self.AccessKeyNotFound = AccessKeyNotFound
                }
                public enum CodingKeys: String, CodingKey {
                    case AccessKeyNotFound
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AccessKeyNotFound = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.Case1Payload.AccessKeyNotFoundPayload.self,
                        forKey: .AccessKeyNotFound
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AccessKeyNotFound"
                    ])
                }
            }
            /// The access key identified by the `public_key` doesn't exist for the account
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case1`.
            case case1(Components.Schemas.InvalidAccessKeyError.Case1Payload)
            /// Transaction `receiver_id` doesn't match the access key receiver_id
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2/ReceiverMismatch`.
                public struct ReceiverMismatchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2/ReceiverMismatch/ak_receiver`.
                    public var ak_receiver: Swift.String
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2/ReceiverMismatch/tx_receiver`.
                    public var tx_receiver: Components.Schemas.AccountId
                    /// Creates a new `ReceiverMismatchPayload`.
                    ///
                    /// - Parameters:
                    ///   - ak_receiver:
                    ///   - tx_receiver:
                    public init(
                        ak_receiver: Swift.String,
                        tx_receiver: Components.Schemas.AccountId
                    ) {
                        self.ak_receiver = ak_receiver
                        self.tx_receiver = tx_receiver
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ak_receiver
                        case tx_receiver
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2/ReceiverMismatch`.
                public var ReceiverMismatch: Components.Schemas.InvalidAccessKeyError.Case2Payload.ReceiverMismatchPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - ReceiverMismatch:
                public init(ReceiverMismatch: Components.Schemas.InvalidAccessKeyError.Case2Payload.ReceiverMismatchPayload) {
                    self.ReceiverMismatch = ReceiverMismatch
                }
                public enum CodingKeys: String, CodingKey {
                    case ReceiverMismatch
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ReceiverMismatch = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.Case2Payload.ReceiverMismatchPayload.self,
                        forKey: .ReceiverMismatch
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ReceiverMismatch"
                    ])
                }
            }
            /// Transaction `receiver_id` doesn't match the access key receiver_id
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case2`.
            case case2(Components.Schemas.InvalidAccessKeyError.Case2Payload)
            /// Transaction method name isn't allowed by the access key
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case3/MethodNameMismatch`.
                public struct MethodNameMismatchPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case3/MethodNameMismatch/method_name`.
                    public var method_name: Swift.String
                    /// Creates a new `MethodNameMismatchPayload`.
                    ///
                    /// - Parameters:
                    ///   - method_name:
                    public init(method_name: Swift.String) {
                        self.method_name = method_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case method_name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case3/MethodNameMismatch`.
                public var MethodNameMismatch: Components.Schemas.InvalidAccessKeyError.Case3Payload.MethodNameMismatchPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - MethodNameMismatch:
                public init(MethodNameMismatch: Components.Schemas.InvalidAccessKeyError.Case3Payload.MethodNameMismatchPayload) {
                    self.MethodNameMismatch = MethodNameMismatch
                }
                public enum CodingKeys: String, CodingKey {
                    case MethodNameMismatch
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.MethodNameMismatch = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.Case3Payload.MethodNameMismatchPayload.self,
                        forKey: .MethodNameMismatch
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "MethodNameMismatch"
                    ])
                }
            }
            /// Transaction method name isn't allowed by the access key
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case3`.
            case case3(Components.Schemas.InvalidAccessKeyError.Case3Payload)
            /// Transaction requires a full permission access key.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case RequiresFullAccess = "RequiresFullAccess"
            }
            /// Transaction requires a full permission access key.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case4`.
            case case4(Components.Schemas.InvalidAccessKeyError.Case4Payload)
            /// Access Key does not have enough allowance to cover transaction cost
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance`.
                public struct NotEnoughAllowancePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance/allowance`.
                    public var allowance: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance/cost`.
                    public var cost: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `NotEnoughAllowancePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - allowance:
                    ///   - cost:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        allowance: Components.Schemas.NearToken,
                        cost: Components.Schemas.NearToken,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.allowance = allowance
                        self.cost = cost
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case allowance
                        case cost
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5/NotEnoughAllowance`.
                public var NotEnoughAllowance: Components.Schemas.InvalidAccessKeyError.Case5Payload.NotEnoughAllowancePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughAllowance:
                public init(NotEnoughAllowance: Components.Schemas.InvalidAccessKeyError.Case5Payload.NotEnoughAllowancePayload) {
                    self.NotEnoughAllowance = NotEnoughAllowance
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughAllowance
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughAllowance = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.Case5Payload.NotEnoughAllowancePayload.self,
                        forKey: .NotEnoughAllowance
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughAllowance"
                    ])
                }
            }
            /// Access Key does not have enough allowance to cover transaction cost
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case5`.
            case case5(Components.Schemas.InvalidAccessKeyError.Case5Payload)
            /// Having a deposit with a function call action is not allowed with a function call access key.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DepositWithFunctionCall = "DepositWithFunctionCall"
            }
            /// Having a deposit with a function call action is not allowed with a function call access key.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidAccessKeyError/case6`.
            case case6(Components.Schemas.InvalidAccessKeyError.Case6Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// An error happened during TX execution
        ///
        /// - Remark: Generated from `#/components/schemas/InvalidTxError`.
        @frozen public enum InvalidTxError: Codable, Hashable, Sendable {
            /// Happens if a wrong AccessKey used or AccessKey has not enough permissions
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case1/InvalidAccessKeyError`.
                public var InvalidAccessKeyError: Components.Schemas.InvalidAccessKeyError
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - InvalidAccessKeyError:
                public init(InvalidAccessKeyError: Components.Schemas.InvalidAccessKeyError) {
                    self.InvalidAccessKeyError = InvalidAccessKeyError
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidAccessKeyError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidAccessKeyError = try container.decode(
                        Components.Schemas.InvalidAccessKeyError.self,
                        forKey: .InvalidAccessKeyError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidAccessKeyError"
                    ])
                }
            }
            /// Happens if a wrong AccessKey used or AccessKey has not enough permissions
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case1`.
            case case1(Components.Schemas.InvalidTxError.Case1Payload)
            /// TX signer_id is not a valid [`AccountId`]
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case2/InvalidSignerId`.
                public struct InvalidSignerIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case2/InvalidSignerId/signer_id`.
                    public var signer_id: Swift.String
                    /// Creates a new `InvalidSignerIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - signer_id:
                    public init(signer_id: Swift.String) {
                        self.signer_id = signer_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case signer_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case2/InvalidSignerId`.
                public var InvalidSignerId: Components.Schemas.InvalidTxError.Case2Payload.InvalidSignerIdPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - InvalidSignerId:
                public init(InvalidSignerId: Components.Schemas.InvalidTxError.Case2Payload.InvalidSignerIdPayload) {
                    self.InvalidSignerId = InvalidSignerId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidSignerId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidSignerId = try container.decode(
                        Components.Schemas.InvalidTxError.Case2Payload.InvalidSignerIdPayload.self,
                        forKey: .InvalidSignerId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidSignerId"
                    ])
                }
            }
            /// TX signer_id is not a valid [`AccountId`]
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case2`.
            case case2(Components.Schemas.InvalidTxError.Case2Payload)
            /// TX signer_id is not found in a storage
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case3/SignerDoesNotExist`.
                public struct SignerDoesNotExistPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case3/SignerDoesNotExist/signer_id`.
                    public var signer_id: Components.Schemas.AccountId
                    /// Creates a new `SignerDoesNotExistPayload`.
                    ///
                    /// - Parameters:
                    ///   - signer_id:
                    public init(signer_id: Components.Schemas.AccountId) {
                        self.signer_id = signer_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case signer_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case3/SignerDoesNotExist`.
                public var SignerDoesNotExist: Components.Schemas.InvalidTxError.Case3Payload.SignerDoesNotExistPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - SignerDoesNotExist:
                public init(SignerDoesNotExist: Components.Schemas.InvalidTxError.Case3Payload.SignerDoesNotExistPayload) {
                    self.SignerDoesNotExist = SignerDoesNotExist
                }
                public enum CodingKeys: String, CodingKey {
                    case SignerDoesNotExist
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.SignerDoesNotExist = try container.decode(
                        Components.Schemas.InvalidTxError.Case3Payload.SignerDoesNotExistPayload.self,
                        forKey: .SignerDoesNotExist
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "SignerDoesNotExist"
                    ])
                }
            }
            /// TX signer_id is not found in a storage
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case3`.
            case case3(Components.Schemas.InvalidTxError.Case3Payload)
            /// Transaction nonce must be strictly greater than `account[access_key].nonce`.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4/InvalidNonce`.
                public struct InvalidNoncePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4/InvalidNonce/ak_nonce`.
                    public var ak_nonce: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4/InvalidNonce/tx_nonce`.
                    public var tx_nonce: Swift.Int
                    /// Creates a new `InvalidNoncePayload`.
                    ///
                    /// - Parameters:
                    ///   - ak_nonce:
                    ///   - tx_nonce:
                    public init(
                        ak_nonce: Swift.Int,
                        tx_nonce: Swift.Int
                    ) {
                        self.ak_nonce = ak_nonce
                        self.tx_nonce = tx_nonce
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ak_nonce
                        case tx_nonce
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4/InvalidNonce`.
                public var InvalidNonce: Components.Schemas.InvalidTxError.Case4Payload.InvalidNoncePayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - InvalidNonce:
                public init(InvalidNonce: Components.Schemas.InvalidTxError.Case4Payload.InvalidNoncePayload) {
                    self.InvalidNonce = InvalidNonce
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidNonce
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidNonce = try container.decode(
                        Components.Schemas.InvalidTxError.Case4Payload.InvalidNoncePayload.self,
                        forKey: .InvalidNonce
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidNonce"
                    ])
                }
            }
            /// Transaction nonce must be strictly greater than `account[access_key].nonce`.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case4`.
            case case4(Components.Schemas.InvalidTxError.Case4Payload)
            /// Transaction nonce is larger than the upper bound given by the block height
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5/NonceTooLarge`.
                public struct NonceTooLargePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5/NonceTooLarge/tx_nonce`.
                    public var tx_nonce: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5/NonceTooLarge/upper_bound`.
                    public var upper_bound: Swift.Int
                    /// Creates a new `NonceTooLargePayload`.
                    ///
                    /// - Parameters:
                    ///   - tx_nonce:
                    ///   - upper_bound:
                    public init(
                        tx_nonce: Swift.Int,
                        upper_bound: Swift.Int
                    ) {
                        self.tx_nonce = tx_nonce
                        self.upper_bound = upper_bound
                    }
                    public enum CodingKeys: String, CodingKey {
                        case tx_nonce
                        case upper_bound
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5/NonceTooLarge`.
                public var NonceTooLarge: Components.Schemas.InvalidTxError.Case5Payload.NonceTooLargePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - NonceTooLarge:
                public init(NonceTooLarge: Components.Schemas.InvalidTxError.Case5Payload.NonceTooLargePayload) {
                    self.NonceTooLarge = NonceTooLarge
                }
                public enum CodingKeys: String, CodingKey {
                    case NonceTooLarge
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NonceTooLarge = try container.decode(
                        Components.Schemas.InvalidTxError.Case5Payload.NonceTooLargePayload.self,
                        forKey: .NonceTooLarge
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NonceTooLarge"
                    ])
                }
            }
            /// Transaction nonce is larger than the upper bound given by the block height
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case5`.
            case case5(Components.Schemas.InvalidTxError.Case5Payload)
            /// TX receiver_id is not a valid AccountId
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case6/InvalidReceiverId`.
                public struct InvalidReceiverIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case6/InvalidReceiverId/receiver_id`.
                    public var receiver_id: Swift.String
                    /// Creates a new `InvalidReceiverIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - receiver_id:
                    public init(receiver_id: Swift.String) {
                        self.receiver_id = receiver_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case receiver_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case6/InvalidReceiverId`.
                public var InvalidReceiverId: Components.Schemas.InvalidTxError.Case6Payload.InvalidReceiverIdPayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - InvalidReceiverId:
                public init(InvalidReceiverId: Components.Schemas.InvalidTxError.Case6Payload.InvalidReceiverIdPayload) {
                    self.InvalidReceiverId = InvalidReceiverId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidReceiverId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidReceiverId = try container.decode(
                        Components.Schemas.InvalidTxError.Case6Payload.InvalidReceiverIdPayload.self,
                        forKey: .InvalidReceiverId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidReceiverId"
                    ])
                }
            }
            /// TX receiver_id is not a valid AccountId
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case6`.
            case case6(Components.Schemas.InvalidTxError.Case6Payload)
            /// TX signature is not valid
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case7`.
            @frozen public enum Case7Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidSignature = "InvalidSignature"
            }
            /// TX signature is not valid
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case7`.
            case case7(Components.Schemas.InvalidTxError.Case7Payload)
            /// Account does not have enough balance to cover TX cost
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8/NotEnoughBalance`.
                public struct NotEnoughBalancePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8/NotEnoughBalance/balance`.
                    public var balance: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8/NotEnoughBalance/cost`.
                    public var cost: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8/NotEnoughBalance/signer_id`.
                    public var signer_id: Components.Schemas.AccountId
                    /// Creates a new `NotEnoughBalancePayload`.
                    ///
                    /// - Parameters:
                    ///   - balance:
                    ///   - cost:
                    ///   - signer_id:
                    public init(
                        balance: Components.Schemas.NearToken,
                        cost: Components.Schemas.NearToken,
                        signer_id: Components.Schemas.AccountId
                    ) {
                        self.balance = balance
                        self.cost = cost
                        self.signer_id = signer_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case balance
                        case cost
                        case signer_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8/NotEnoughBalance`.
                public var NotEnoughBalance: Components.Schemas.InvalidTxError.Case8Payload.NotEnoughBalancePayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughBalance:
                public init(NotEnoughBalance: Components.Schemas.InvalidTxError.Case8Payload.NotEnoughBalancePayload) {
                    self.NotEnoughBalance = NotEnoughBalance
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughBalance
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughBalance = try container.decode(
                        Components.Schemas.InvalidTxError.Case8Payload.NotEnoughBalancePayload.self,
                        forKey: .NotEnoughBalance
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughBalance"
                    ])
                }
            }
            /// Account does not have enough balance to cover TX cost
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case8`.
            case case8(Components.Schemas.InvalidTxError.Case8Payload)
            /// Signer account doesn't have enough balance after transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState`.
                public struct LackBalanceForStatePayload: Codable, Hashable, Sendable {
                    /// Required balance to cover the state.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/amount`.
                    public struct amountPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/amount/value1`.
                        public var value1: Components.Schemas.NearToken
                        /// Creates a new `amountPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Components.Schemas.NearToken) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeToSingleValueContainer(self.value1)
                        }
                    }
                    /// Required balance to cover the state.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/amount`.
                    public var amount: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload.amountPayload
                    /// An account which doesn't have enough balance to cover storage.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/signer_id`.
                    public struct signer_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/signer_id/value1`.
                        public var value1: Components.Schemas.AccountId
                        /// Creates a new `signer_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        public init(value1: Components.Schemas.AccountId) {
                            self.value1 = value1
                        }
                        public init(from decoder: any Decoder) throws {
                            self.value1 = try decoder.decodeFromSingleValueContainer()
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeToSingleValueContainer(self.value1)
                        }
                    }
                    /// An account which doesn't have enough balance to cover storage.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState/signer_id`.
                    public var signer_id: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload.signer_idPayload
                    /// Creates a new `LackBalanceForStatePayload`.
                    ///
                    /// - Parameters:
                    ///   - amount: Required balance to cover the state.
                    ///   - signer_id: An account which doesn't have enough balance to cover storage.
                    public init(
                        amount: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload.amountPayload,
                        signer_id: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload.signer_idPayload
                    ) {
                        self.amount = amount
                        self.signer_id = signer_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case amount
                        case signer_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9/LackBalanceForState`.
                public var LackBalanceForState: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - LackBalanceForState:
                public init(LackBalanceForState: Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload) {
                    self.LackBalanceForState = LackBalanceForState
                }
                public enum CodingKeys: String, CodingKey {
                    case LackBalanceForState
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.LackBalanceForState = try container.decode(
                        Components.Schemas.InvalidTxError.Case9Payload.LackBalanceForStatePayload.self,
                        forKey: .LackBalanceForState
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "LackBalanceForState"
                    ])
                }
            }
            /// Signer account doesn't have enough balance after transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case9`.
            case case9(Components.Schemas.InvalidTxError.Case9Payload)
            /// An integer overflow occurred during transaction cost estimation.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case10`.
            @frozen public enum Case10Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CostOverflow = "CostOverflow"
            }
            /// An integer overflow occurred during transaction cost estimation.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case10`.
            case case10(Components.Schemas.InvalidTxError.Case10Payload)
            /// Transaction parent block hash doesn't belong to the current chain
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case11`.
            @frozen public enum Case11Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidChain = "InvalidChain"
            }
            /// Transaction parent block hash doesn't belong to the current chain
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case11`.
            case case11(Components.Schemas.InvalidTxError.Case11Payload)
            /// Transaction has expired
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case12`.
            @frozen public enum Case12Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Expired = "Expired"
            }
            /// Transaction has expired
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case12`.
            case case12(Components.Schemas.InvalidTxError.Case12Payload)
            /// An error occurred while validating actions of a Transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case13/ActionsValidation`.
                public var ActionsValidation: Components.Schemas.ActionsValidationError
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - ActionsValidation:
                public init(ActionsValidation: Components.Schemas.ActionsValidationError) {
                    self.ActionsValidation = ActionsValidation
                }
                public enum CodingKeys: String, CodingKey {
                    case ActionsValidation
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ActionsValidation = try container.decode(
                        Components.Schemas.ActionsValidationError.self,
                        forKey: .ActionsValidation
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ActionsValidation"
                    ])
                }
            }
            /// An error occurred while validating actions of a Transaction.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case13`.
            case case13(Components.Schemas.InvalidTxError.Case13Payload)
            /// The size of serialized transaction exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14/TransactionSizeExceeded`.
                public struct TransactionSizeExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14/TransactionSizeExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14/TransactionSizeExceeded/size`.
                    public var size: Swift.Int
                    /// Creates a new `TransactionSizeExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - size:
                    public init(
                        limit: Swift.Int,
                        size: Swift.Int
                    ) {
                        self.limit = limit
                        self.size = size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case size
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14/TransactionSizeExceeded`.
                public var TransactionSizeExceeded: Components.Schemas.InvalidTxError.Case14Payload.TransactionSizeExceededPayload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - TransactionSizeExceeded:
                public init(TransactionSizeExceeded: Components.Schemas.InvalidTxError.Case14Payload.TransactionSizeExceededPayload) {
                    self.TransactionSizeExceeded = TransactionSizeExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case TransactionSizeExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.TransactionSizeExceeded = try container.decode(
                        Components.Schemas.InvalidTxError.Case14Payload.TransactionSizeExceededPayload.self,
                        forKey: .TransactionSizeExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "TransactionSizeExceeded"
                    ])
                }
            }
            /// The size of serialized transaction exceeded the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case14`.
            case case14(Components.Schemas.InvalidTxError.Case14Payload)
            /// Transaction version is invalid.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case15`.
            @frozen public enum Case15Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InvalidTransactionVersion = "InvalidTransactionVersion"
            }
            /// Transaction version is invalid.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case15`.
            case case15(Components.Schemas.InvalidTxError.Case15Payload)
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case16/StorageError`.
                public var StorageError: Components.Schemas.StorageError
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - StorageError:
                public init(StorageError: Components.Schemas.StorageError) {
                    self.StorageError = StorageError
                }
                public enum CodingKeys: String, CodingKey {
                    case StorageError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.StorageError = try container.decode(
                        Components.Schemas.StorageError.self,
                        forKey: .StorageError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "StorageError"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case16`.
            case case16(Components.Schemas.InvalidTxError.Case16Payload)
            /// The receiver shard of the transaction is too congested to accept new
            /// transactions at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17/ShardCongested`.
                public struct ShardCongestedPayload: Codable, Hashable, Sendable {
                    /// A value between 0 (no congestion) and 1 (max congestion).
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17/ShardCongested/congestion_level`.
                    public var congestion_level: Swift.Double
                    /// The congested shard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17/ShardCongested/shard_id`.
                    public var shard_id: Swift.Int
                    /// Creates a new `ShardCongestedPayload`.
                    ///
                    /// - Parameters:
                    ///   - congestion_level: A value between 0 (no congestion) and 1 (max congestion).
                    ///   - shard_id: The congested shard.
                    public init(
                        congestion_level: Swift.Double,
                        shard_id: Swift.Int
                    ) {
                        self.congestion_level = congestion_level
                        self.shard_id = shard_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case congestion_level
                        case shard_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17/ShardCongested`.
                public var ShardCongested: Components.Schemas.InvalidTxError.Case17Payload.ShardCongestedPayload
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - ShardCongested:
                public init(ShardCongested: Components.Schemas.InvalidTxError.Case17Payload.ShardCongestedPayload) {
                    self.ShardCongested = ShardCongested
                }
                public enum CodingKeys: String, CodingKey {
                    case ShardCongested
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ShardCongested = try container.decode(
                        Components.Schemas.InvalidTxError.Case17Payload.ShardCongestedPayload.self,
                        forKey: .ShardCongested
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ShardCongested"
                    ])
                }
            }
            /// The receiver shard of the transaction is too congested to accept new
            /// transactions at the moment.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case17`.
            case case17(Components.Schemas.InvalidTxError.Case17Payload)
            /// The receiver shard of the transaction missed several chunks and rejects
            /// new transaction until it can make progress again.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18`.
            public struct Case18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18/ShardStuck`.
                public struct ShardStuckPayload: Codable, Hashable, Sendable {
                    /// The number of blocks since the last included chunk of the shard.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18/ShardStuck/missed_chunks`.
                    public var missed_chunks: Swift.Int
                    /// The shard that fails making progress.
                    ///
                    /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18/ShardStuck/shard_id`.
                    public var shard_id: Swift.Int
                    /// Creates a new `ShardStuckPayload`.
                    ///
                    /// - Parameters:
                    ///   - missed_chunks: The number of blocks since the last included chunk of the shard.
                    ///   - shard_id: The shard that fails making progress.
                    public init(
                        missed_chunks: Swift.Int,
                        shard_id: Swift.Int
                    ) {
                        self.missed_chunks = missed_chunks
                        self.shard_id = shard_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case missed_chunks
                        case shard_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18/ShardStuck`.
                public var ShardStuck: Components.Schemas.InvalidTxError.Case18Payload.ShardStuckPayload
                /// Creates a new `Case18Payload`.
                ///
                /// - Parameters:
                ///   - ShardStuck:
                public init(ShardStuck: Components.Schemas.InvalidTxError.Case18Payload.ShardStuckPayload) {
                    self.ShardStuck = ShardStuck
                }
                public enum CodingKeys: String, CodingKey {
                    case ShardStuck
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ShardStuck = try container.decode(
                        Components.Schemas.InvalidTxError.Case18Payload.ShardStuckPayload.self,
                        forKey: .ShardStuck
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ShardStuck"
                    ])
                }
            }
            /// The receiver shard of the transaction missed several chunks and rejects
            /// new transaction until it can make progress again.
            ///
            /// - Remark: Generated from `#/components/schemas/InvalidTxError/case18`.
            case case18(Components.Schemas.InvalidTxError.Case18Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case11(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case12(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                case let .case18(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_changes: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_changes = "EXPERIMENTAL_changes"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes/params`.
            public var params: Components.Schemas.RpcStateChangesInBlockByTypeRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_changes`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes.methodPayload,
                params: Components.Schemas.RpcStateChangesInBlockByTypeRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_changes_in_block: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_changes_in_block = "EXPERIMENTAL_changes_in_block"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes_in_block.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_changes_in_block/params`.
            public var params: Components.Schemas.RpcStateChangesInBlockRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_changes_in_block`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes_in_block.methodPayload,
                params: Components.Schemas.RpcStateChangesInBlockRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_congestion_level: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_congestion_level = "EXPERIMENTAL_congestion_level"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_congestion_level.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_congestion_level/params`.
            public var params: Components.Schemas.RpcCongestionLevelRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_congestion_level`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_congestion_level.methodPayload,
                params: Components.Schemas.RpcCongestionLevelRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_genesis_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_genesis_config = "EXPERIMENTAL_genesis_config"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_genesis_config.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_genesis_config/params`.
            public var params: Components.Schemas.GenesisConfigRequest?
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_genesis_config`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_genesis_config.methodPayload,
                params: Components.Schemas.GenesisConfigRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_light_client_block_proof = "EXPERIMENTAL_light_client_block_proof"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof/params`.
            public var params: Components.Schemas.RpcLightClientBlockProofRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof.methodPayload,
                params: Components.Schemas.RpcLightClientBlockProofRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_light_client_proof: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_light_client_proof = "EXPERIMENTAL_light_client_proof"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_proof.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_light_client_proof/params`.
            public var params: Components.Schemas.RpcLightClientExecutionProofRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_light_client_proof`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_proof.methodPayload,
                params: Components.Schemas.RpcLightClientExecutionProofRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_maintenance_windows = "EXPERIMENTAL_maintenance_windows"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows/params`.
            public var params: Components.Schemas.RpcMaintenanceWindowsRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows.methodPayload,
                params: Components.Schemas.RpcMaintenanceWindowsRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_protocol_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_protocol_config = "EXPERIMENTAL_protocol_config"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_protocol_config.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_protocol_config/params`.
            public var params: Components.Schemas.RpcProtocolConfigRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_protocol_config`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_protocol_config.methodPayload,
                params: Components.Schemas.RpcProtocolConfigRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_receipt: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_receipt = "EXPERIMENTAL_receipt"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_receipt.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_receipt/params`.
            public var params: Components.Schemas.RpcReceiptRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_receipt`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_receipt.methodPayload,
                params: Components.Schemas.RpcReceiptRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_split_storage_info: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_split_storage_info = "EXPERIMENTAL_split_storage_info"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_split_storage_info.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_split_storage_info/params`.
            public var params: Components.Schemas.RpcSplitStorageInfoRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_split_storage_info`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_split_storage_info.methodPayload,
                params: Components.Schemas.RpcSplitStorageInfoRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_tx_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_tx_status = "EXPERIMENTAL_tx_status"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_tx_status.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_tx_status/params`.
            public var params: Components.Schemas.RpcTransactionStatusRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_tx_status`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_tx_status.methodPayload,
                params: Components.Schemas.RpcTransactionStatusRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered`.
        public struct JsonRpcRequest_for_EXPERIMENTAL_validators_ordered: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXPERIMENTAL_validators_ordered = "EXPERIMENTAL_validators_ordered"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_validators_ordered.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_EXPERIMENTAL_validators_ordered/params`.
            public var params: Components.Schemas.RpcValidatorsOrderedRequest
            /// Creates a new `JsonRpcRequest_for_EXPERIMENTAL_validators_ordered`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_validators_ordered.methodPayload,
                params: Components.Schemas.RpcValidatorsOrderedRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block`.
        public struct JsonRpcRequest_for_block: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case block = "block"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_block.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block/params`.
            public var params: Components.Schemas.RpcBlockRequest
            /// Creates a new `JsonRpcRequest_for_block`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_block.methodPayload,
                params: Components.Schemas.RpcBlockRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects`.
        public struct JsonRpcRequest_for_block_effects: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case block_effects = "block_effects"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_block_effects.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_block_effects/params`.
            public var params: Components.Schemas.RpcStateChangesInBlockRequest
            /// Creates a new `JsonRpcRequest_for_block_effects`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_block_effects.methodPayload,
                params: Components.Schemas.RpcStateChangesInBlockRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async`.
        public struct JsonRpcRequest_for_broadcast_tx_async: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case broadcast_tx_async = "broadcast_tx_async"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_broadcast_tx_async.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_async/params`.
            public var params: Components.Schemas.RpcSendTransactionRequest
            /// Creates a new `JsonRpcRequest_for_broadcast_tx_async`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_broadcast_tx_async.methodPayload,
                params: Components.Schemas.RpcSendTransactionRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit`.
        public struct JsonRpcRequest_for_broadcast_tx_commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case broadcast_tx_commit = "broadcast_tx_commit"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_broadcast_tx_commit.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_broadcast_tx_commit/params`.
            public var params: Components.Schemas.RpcSendTransactionRequest
            /// Creates a new `JsonRpcRequest_for_broadcast_tx_commit`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_broadcast_tx_commit.methodPayload,
                params: Components.Schemas.RpcSendTransactionRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes`.
        public struct JsonRpcRequest_for_changes: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case changes = "changes"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_changes.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_changes/params`.
            public var params: Components.Schemas.RpcStateChangesInBlockByTypeRequest
            /// Creates a new `JsonRpcRequest_for_changes`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_changes.methodPayload,
                params: Components.Schemas.RpcStateChangesInBlockByTypeRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk`.
        public struct JsonRpcRequest_for_chunk: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chunk = "chunk"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_chunk.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_chunk/params`.
            public var params: Components.Schemas.RpcChunkRequest
            /// Creates a new `JsonRpcRequest_for_chunk`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_chunk.methodPayload,
                params: Components.Schemas.RpcChunkRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config`.
        public struct JsonRpcRequest_for_client_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case client_config = "client_config"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_client_config.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_client_config/params`.
            public var params: Components.Schemas.RpcClientConfigRequest?
            /// Creates a new `JsonRpcRequest_for_client_config`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_client_config.methodPayload,
                params: Components.Schemas.RpcClientConfigRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price`.
        public struct JsonRpcRequest_for_gas_price: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case gas_price = "gas_price"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_gas_price.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_gas_price/params`.
            public var params: Components.Schemas.RpcGasPriceRequest
            /// Creates a new `JsonRpcRequest_for_gas_price`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_gas_price.methodPayload,
                params: Components.Schemas.RpcGasPriceRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config`.
        public struct JsonRpcRequest_for_genesis_config: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case genesis_config = "genesis_config"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_genesis_config.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_genesis_config/params`.
            public var params: Components.Schemas.GenesisConfigRequest?
            /// Creates a new `JsonRpcRequest_for_genesis_config`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_genesis_config.methodPayload,
                params: Components.Schemas.GenesisConfigRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health`.
        public struct JsonRpcRequest_for_health: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case health = "health"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_health.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_health/params`.
            public var params: Components.Schemas.RpcHealthRequest?
            /// Creates a new `JsonRpcRequest_for_health`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_health.methodPayload,
                params: Components.Schemas.RpcHealthRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof`.
        public struct JsonRpcRequest_for_light_client_proof: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case light_client_proof = "light_client_proof"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_light_client_proof.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_light_client_proof/params`.
            public var params: Components.Schemas.RpcLightClientExecutionProofRequest
            /// Creates a new `JsonRpcRequest_for_light_client_proof`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_light_client_proof.methodPayload,
                params: Components.Schemas.RpcLightClientExecutionProofRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows`.
        public struct JsonRpcRequest_for_maintenance_windows: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case maintenance_windows = "maintenance_windows"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_maintenance_windows.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_maintenance_windows/params`.
            public var params: Components.Schemas.RpcMaintenanceWindowsRequest
            /// Creates a new `JsonRpcRequest_for_maintenance_windows`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_maintenance_windows.methodPayload,
                params: Components.Schemas.RpcMaintenanceWindowsRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info`.
        public struct JsonRpcRequest_for_network_info: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case network_info = "network_info"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_network_info.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_network_info/params`.
            public var params: Components.Schemas.RpcNetworkInfoRequest?
            /// Creates a new `JsonRpcRequest_for_network_info`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_network_info.methodPayload,
                params: Components.Schemas.RpcNetworkInfoRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block`.
        public struct JsonRpcRequest_for_next_light_client_block: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case next_light_client_block = "next_light_client_block"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_next_light_client_block.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_next_light_client_block/params`.
            public var params: Components.Schemas.RpcLightClientNextBlockRequest
            /// Creates a new `JsonRpcRequest_for_next_light_client_block`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_next_light_client_block.methodPayload,
                params: Components.Schemas.RpcLightClientNextBlockRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query`.
        public struct JsonRpcRequest_for_query: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case query = "query"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_query.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_query/params`.
            public var params: Components.Schemas.RpcQueryRequest
            /// Creates a new `JsonRpcRequest_for_query`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_query.methodPayload,
                params: Components.Schemas.RpcQueryRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx`.
        public struct JsonRpcRequest_for_send_tx: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case send_tx = "send_tx"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_send_tx.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_send_tx/params`.
            public var params: Components.Schemas.RpcSendTransactionRequest
            /// Creates a new `JsonRpcRequest_for_send_tx`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_send_tx.methodPayload,
                params: Components.Schemas.RpcSendTransactionRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status`.
        public struct JsonRpcRequest_for_status: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case status = "status"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_status.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_status/params`.
            public var params: Components.Schemas.RpcStatusRequest?
            /// Creates a new `JsonRpcRequest_for_status`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_status.methodPayload,
                params: Components.Schemas.RpcStatusRequest? = nil
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx`.
        public struct JsonRpcRequest_for_tx: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case tx = "tx"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_tx.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_tx/params`.
            public var params: Components.Schemas.RpcTransactionStatusRequest
            /// Creates a new `JsonRpcRequest_for_tx`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_tx.methodPayload,
                params: Components.Schemas.RpcTransactionStatusRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators`.
        public struct JsonRpcRequest_for_validators: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators/jsonrpc`.
            public var jsonrpc: Swift.String
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators/method`.
            @frozen public enum methodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case validators = "validators"
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators/method`.
            public var method: Components.Schemas.JsonRpcRequest_for_validators.methodPayload
            /// - Remark: Generated from `#/components/schemas/JsonRpcRequest_for_validators/params`.
            public var params: Components.Schemas.RpcValidatorRequest
            /// Creates a new `JsonRpcRequest_for_validators`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - jsonrpc:
            ///   - method:
            ///   - params:
            public init(
                id: Swift.String,
                jsonrpc: Swift.String,
                method: Components.Schemas.JsonRpcRequest_for_validators.methodPayload,
                params: Components.Schemas.RpcValidatorRequest
            ) {
                self.id = id
                self.jsonrpc = jsonrpc
                self.method = method
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case jsonrpc
                case method
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case1/result`.
                public var result: [Components.Schemas.Range_of_uint64]
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: [Components.Schemas.Range_of_uint64]) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case1/result`.
                public var result: [Components.Schemas.ValidatorStakeView]
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: [Components.Schemas.ValidatorStakeView]) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_CryptoHash_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case1/result`.
                public var result: Components.Schemas.CryptoHash
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.CryptoHash) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_CryptoHash_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_CryptoHash_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_CryptoHash_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_GenesisConfig_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case1/result`.
                public var result: Components.Schemas.GenesisConfig
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.GenesisConfig) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_GenesisConfig_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1/result`.
                public struct resultPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1/result/value1`.
                    public var value1: Components.Schemas.RpcHealthResponse?
                    /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1/result/value2`.
                    public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                    /// Creates a new `resultPayload`.
                    ///
                    /// - Parameters:
                    ///   - value1:
                    ///   - value2:
                    public init(
                        value1: Components.Schemas.RpcHealthResponse? = nil,
                        value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                    ) {
                        self.value1 = value1
                        self.value2 = value2
                    }
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self.value1 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self.value2 = try .init(from: decoder)
                        } catch {
                            errors.append(error)
                        }
                        try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                            [
                                self.value1,
                                self.value2
                            ],
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        try self.value1?.encode(to: encoder)
                        try self.value2?.encode(to: encoder)
                    }
                }
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError.Case1Payload.resultPayload?
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError.Case1Payload.resultPayload? = nil) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcBlockResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcBlockResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcBlockResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcBlockResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcBlockResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcChunkResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcChunkResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcChunkResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcChunkResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcChunkResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcChunkResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcClientConfigResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcClientConfigResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcCongestionLevelResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcCongestionLevelResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcGasPriceResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcGasPriceResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcLightClientBlockProofResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcLightClientBlockProofResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcLightClientExecutionProofResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcLightClientExecutionProofResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcLightClientNextBlockResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcLightClientNextBlockResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcNetworkInfoResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcNetworkInfoResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcProtocolConfigResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcProtocolConfigResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcQueryResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcQueryResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcQueryResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcQueryResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcQueryResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcQueryResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcReceiptResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcReceiptResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcReceiptResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcReceiptResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcReceiptResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcReceiptResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcSplitStorageInfoResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcSplitStorageInfoResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcStateChangesInBlockByTypeResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcStateChangesInBlockByTypeResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcStateChangesInBlockResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcStateChangesInBlockResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcStatusResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcStatusResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcStatusResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcStatusResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcStatusResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcTransactionResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcTransactionResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcTransactionResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError`.
        @frozen public enum JsonRpcResponse_for_RpcValidatorResponse_and_RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case1/result`.
                public var result: Components.Schemas.RpcValidatorResponse
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - result:
                public init(result: Components.Schemas.RpcValidatorResponse) {
                    self.result = result
                }
                public enum CodingKeys: String, CodingKey {
                    case result
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case1`.
            case case1(Components.Schemas.JsonRpcResponse_for_RpcValidatorResponse_and_RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case2/error`.
                public var error: Components.Schemas.RpcError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - error:
                public init(error: Components.Schemas.RpcError) {
                    self.error = error
                }
                public enum CodingKeys: String, CodingKey {
                    case error
                }
            }
            /// - Remark: Generated from `#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError/case2`.
            case case2(Components.Schemas.JsonRpcResponse_for_RpcValidatorResponse_and_RpcError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Information about a Producer: its account name, peer_id and a list of connected peers that
        /// the node can use to send message for this producer.
        ///
        /// - Remark: Generated from `#/components/schemas/KnownProducerView`.
        public struct KnownProducerView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/KnownProducerView/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/KnownProducerView/next_hops`.
            public var next_hops: [Components.Schemas.PublicKey]?
            /// - Remark: Generated from `#/components/schemas/KnownProducerView/peer_id`.
            public var peer_id: Components.Schemas.PublicKey
            /// Creates a new `KnownProducerView`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - next_hops:
            ///   - peer_id:
            public init(
                account_id: Components.Schemas.AccountId,
                next_hops: [Components.Schemas.PublicKey]? = nil,
                peer_id: Components.Schemas.PublicKey
            ) {
                self.account_id = account_id
                self.next_hops = next_hops
                self.peer_id = peer_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case next_hops
                case peer_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/LightClientBlockLiteView`.
        public struct LightClientBlockLiteView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LightClientBlockLiteView/inner_lite`.
            public var inner_lite: Components.Schemas.BlockHeaderInnerLiteView
            /// - Remark: Generated from `#/components/schemas/LightClientBlockLiteView/inner_rest_hash`.
            public var inner_rest_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/LightClientBlockLiteView/prev_block_hash`.
            public var prev_block_hash: Components.Schemas.CryptoHash
            /// Creates a new `LightClientBlockLiteView`.
            ///
            /// - Parameters:
            ///   - inner_lite:
            ///   - inner_rest_hash:
            ///   - prev_block_hash:
            public init(
                inner_lite: Components.Schemas.BlockHeaderInnerLiteView,
                inner_rest_hash: Components.Schemas.CryptoHash,
                prev_block_hash: Components.Schemas.CryptoHash
            ) {
                self.inner_lite = inner_lite
                self.inner_rest_hash = inner_rest_hash
                self.prev_block_hash = prev_block_hash
            }
            public enum CodingKeys: String, CodingKey {
                case inner_lite
                case inner_rest_hash
                case prev_block_hash
            }
        }
        /// Describes limits for VM and Runtime.
        /// TODO #4139: consider switching to strongly-typed wrappers instead of raw quantities
        ///
        /// - Remark: Generated from `#/components/schemas/LimitConfig`.
        public struct LimitConfig: Codable, Hashable, Sendable {
            /// Whether to enforce account_id well-formed-ness where it wasn't enforced
            /// historically.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/account_id_validity_rules_version`.
            public struct account_id_validity_rules_versionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LimitConfig/account_id_validity_rules_version/value1`.
                public var value1: Components.Schemas.AccountIdValidityRulesVersion
                /// Creates a new `account_id_validity_rules_versionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountIdValidityRulesVersion) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Whether to enforce account_id well-formed-ness where it wasn't enforced
            /// historically.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/account_id_validity_rules_version`.
            public var account_id_validity_rules_version: Components.Schemas.LimitConfig.account_id_validity_rules_versionPayload?
            /// The initial number of memory pages.
            /// NOTE: It's not a limiter itself, but it's a value we use for initial_memory_pages.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/initial_memory_pages`.
            public var initial_memory_pages: Swift.Int
            /// Max number of actions per receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_actions_per_receipt`.
            public var max_actions_per_receipt: Swift.Int
            /// Max length of arguments in a function call action.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_arguments_length`.
            public var max_arguments_length: Swift.Int
            /// Max contract size
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_contract_size`.
            public var max_contract_size: Swift.Int
            /// If present, stores max number of elements in a single contract's table
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_elements_per_contract_table`.
            public var max_elements_per_contract_table: Swift.Int?
            /// If present, stores max number of functions in one contract
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_functions_number_per_contract`.
            public var max_functions_number_per_contract: Swift.Int?
            /// Max amount of gas that can be used, excluding gas attached to promises.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_gas_burnt`.
            public struct max_gas_burntPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LimitConfig/max_gas_burnt/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_gas_burntPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Max amount of gas that can be used, excluding gas attached to promises.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_gas_burnt`.
            public var max_gas_burnt: Components.Schemas.LimitConfig.max_gas_burntPayload
            /// Max length of any method name (without terminating character).
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_length_method_name`.
            public var max_length_method_name: Swift.Int
            /// Max length of returned data
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_length_returned_data`.
            public var max_length_returned_data: Swift.Int
            /// Max storage key size
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_length_storage_key`.
            public var max_length_storage_key: Swift.Int
            /// Max storage value size
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_length_storage_value`.
            public var max_length_storage_value: Swift.Int
            /// If present, stores max number of locals declared globally in one contract
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_locals_per_contract`.
            public var max_locals_per_contract: Swift.Int?
            /// What is the maximal memory pages amount is allowed to have for a contract.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_memory_pages`.
            public var max_memory_pages: Swift.Int
            /// Max total length of all method names (including terminating character) for a function call
            /// permission access key.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_number_bytes_method_names`.
            public var max_number_bytes_method_names: Swift.Int
            /// Max number of input data dependencies
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_number_input_data_dependencies`.
            public var max_number_input_data_dependencies: Swift.Int
            /// Maximum number of log entries.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_number_logs`.
            public var max_number_logs: Swift.Int
            /// Maximum number of registers that can be used simultaneously.
            ///
            /// Note that due to an implementation quirk [read: a bug] in VMLogic, if we
            /// have this number of registers, no subsequent writes to the registers
            /// will succeed even if they replace an existing register.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_number_registers`.
            public var max_number_registers: Swift.Int
            /// Max number of promises that a function call can create
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_promises_per_function_call_action`.
            public var max_promises_per_function_call_action: Swift.Int
            /// Max receipt size
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_receipt_size`.
            public var max_receipt_size: Swift.Int
            /// Maximum number of bytes that can be stored in a single register.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_register_size`.
            public var max_register_size: Swift.Int
            /// How tall the stack is allowed to grow?
            ///
            /// See <https://wiki.parity.io/WebAssembly-StackHeight> to find out how the stack frame cost
            /// is calculated.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_stack_height`.
            public var max_stack_height: Swift.Int
            /// If present, stores max number of tables declared globally in one contract
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_tables_per_contract`.
            public var max_tables_per_contract: Swift.Int?
            /// Maximum total length in bytes of all log messages.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_total_log_length`.
            public var max_total_log_length: Swift.Int
            /// Max total prepaid gas for all function call actions per receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_total_prepaid_gas`.
            public struct max_total_prepaid_gasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/LimitConfig/max_total_prepaid_gas/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `max_total_prepaid_gasPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Max total prepaid gas for all function call actions per receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_total_prepaid_gas`.
            public var max_total_prepaid_gas: Components.Schemas.LimitConfig.max_total_prepaid_gasPayload
            /// Max transaction size
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_transaction_size`.
            public var max_transaction_size: Swift.Int
            /// Maximum number of bytes for payload passed over a yield resume.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/max_yield_payload_size`.
            public var max_yield_payload_size: Swift.Int
            /// Hard limit on the size of storage proof generated while executing a single receipt.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/per_receipt_storage_proof_size_limit`.
            public var per_receipt_storage_proof_size_limit: Swift.Int
            /// Limit of memory used by registers.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/registers_memory_limit`.
            public var registers_memory_limit: Swift.Int
            /// Number of blocks after which a yielded promise times out.
            ///
            /// - Remark: Generated from `#/components/schemas/LimitConfig/yield_timeout_length_in_blocks`.
            public var yield_timeout_length_in_blocks: Swift.Int
            /// Creates a new `LimitConfig`.
            ///
            /// - Parameters:
            ///   - account_id_validity_rules_version: Whether to enforce account_id well-formed-ness where it wasn't enforced
            ///   - initial_memory_pages: The initial number of memory pages.
            ///   - max_actions_per_receipt: Max number of actions per receipt.
            ///   - max_arguments_length: Max length of arguments in a function call action.
            ///   - max_contract_size: Max contract size
            ///   - max_elements_per_contract_table: If present, stores max number of elements in a single contract's table
            ///   - max_functions_number_per_contract: If present, stores max number of functions in one contract
            ///   - max_gas_burnt: Max amount of gas that can be used, excluding gas attached to promises.
            ///   - max_length_method_name: Max length of any method name (without terminating character).
            ///   - max_length_returned_data: Max length of returned data
            ///   - max_length_storage_key: Max storage key size
            ///   - max_length_storage_value: Max storage value size
            ///   - max_locals_per_contract: If present, stores max number of locals declared globally in one contract
            ///   - max_memory_pages: What is the maximal memory pages amount is allowed to have for a contract.
            ///   - max_number_bytes_method_names: Max total length of all method names (including terminating character) for a function call
            ///   - max_number_input_data_dependencies: Max number of input data dependencies
            ///   - max_number_logs: Maximum number of log entries.
            ///   - max_number_registers: Maximum number of registers that can be used simultaneously.
            ///   - max_promises_per_function_call_action: Max number of promises that a function call can create
            ///   - max_receipt_size: Max receipt size
            ///   - max_register_size: Maximum number of bytes that can be stored in a single register.
            ///   - max_stack_height: How tall the stack is allowed to grow?
            ///   - max_tables_per_contract: If present, stores max number of tables declared globally in one contract
            ///   - max_total_log_length: Maximum total length in bytes of all log messages.
            ///   - max_total_prepaid_gas: Max total prepaid gas for all function call actions per receipt.
            ///   - max_transaction_size: Max transaction size
            ///   - max_yield_payload_size: Maximum number of bytes for payload passed over a yield resume.
            ///   - per_receipt_storage_proof_size_limit: Hard limit on the size of storage proof generated while executing a single receipt.
            ///   - registers_memory_limit: Limit of memory used by registers.
            ///   - yield_timeout_length_in_blocks: Number of blocks after which a yielded promise times out.
            public init(
                account_id_validity_rules_version: Components.Schemas.LimitConfig.account_id_validity_rules_versionPayload? = nil,
                initial_memory_pages: Swift.Int,
                max_actions_per_receipt: Swift.Int,
                max_arguments_length: Swift.Int,
                max_contract_size: Swift.Int,
                max_elements_per_contract_table: Swift.Int? = nil,
                max_functions_number_per_contract: Swift.Int? = nil,
                max_gas_burnt: Components.Schemas.LimitConfig.max_gas_burntPayload,
                max_length_method_name: Swift.Int,
                max_length_returned_data: Swift.Int,
                max_length_storage_key: Swift.Int,
                max_length_storage_value: Swift.Int,
                max_locals_per_contract: Swift.Int? = nil,
                max_memory_pages: Swift.Int,
                max_number_bytes_method_names: Swift.Int,
                max_number_input_data_dependencies: Swift.Int,
                max_number_logs: Swift.Int,
                max_number_registers: Swift.Int,
                max_promises_per_function_call_action: Swift.Int,
                max_receipt_size: Swift.Int,
                max_register_size: Swift.Int,
                max_stack_height: Swift.Int,
                max_tables_per_contract: Swift.Int? = nil,
                max_total_log_length: Swift.Int,
                max_total_prepaid_gas: Components.Schemas.LimitConfig.max_total_prepaid_gasPayload,
                max_transaction_size: Swift.Int,
                max_yield_payload_size: Swift.Int,
                per_receipt_storage_proof_size_limit: Swift.Int,
                registers_memory_limit: Swift.Int,
                yield_timeout_length_in_blocks: Swift.Int
            ) {
                self.account_id_validity_rules_version = account_id_validity_rules_version
                self.initial_memory_pages = initial_memory_pages
                self.max_actions_per_receipt = max_actions_per_receipt
                self.max_arguments_length = max_arguments_length
                self.max_contract_size = max_contract_size
                self.max_elements_per_contract_table = max_elements_per_contract_table
                self.max_functions_number_per_contract = max_functions_number_per_contract
                self.max_gas_burnt = max_gas_burnt
                self.max_length_method_name = max_length_method_name
                self.max_length_returned_data = max_length_returned_data
                self.max_length_storage_key = max_length_storage_key
                self.max_length_storage_value = max_length_storage_value
                self.max_locals_per_contract = max_locals_per_contract
                self.max_memory_pages = max_memory_pages
                self.max_number_bytes_method_names = max_number_bytes_method_names
                self.max_number_input_data_dependencies = max_number_input_data_dependencies
                self.max_number_logs = max_number_logs
                self.max_number_registers = max_number_registers
                self.max_promises_per_function_call_action = max_promises_per_function_call_action
                self.max_receipt_size = max_receipt_size
                self.max_register_size = max_register_size
                self.max_stack_height = max_stack_height
                self.max_tables_per_contract = max_tables_per_contract
                self.max_total_log_length = max_total_log_length
                self.max_total_prepaid_gas = max_total_prepaid_gas
                self.max_transaction_size = max_transaction_size
                self.max_yield_payload_size = max_yield_payload_size
                self.per_receipt_storage_proof_size_limit = per_receipt_storage_proof_size_limit
                self.registers_memory_limit = registers_memory_limit
                self.yield_timeout_length_in_blocks = yield_timeout_length_in_blocks
            }
            public enum CodingKeys: String, CodingKey {
                case account_id_validity_rules_version
                case initial_memory_pages
                case max_actions_per_receipt
                case max_arguments_length
                case max_contract_size
                case max_elements_per_contract_table
                case max_functions_number_per_contract
                case max_gas_burnt
                case max_length_method_name
                case max_length_returned_data
                case max_length_storage_key
                case max_length_storage_value
                case max_locals_per_contract
                case max_memory_pages
                case max_number_bytes_method_names
                case max_number_input_data_dependencies
                case max_number_logs
                case max_number_registers
                case max_promises_per_function_call_action
                case max_receipt_size
                case max_register_size
                case max_stack_height
                case max_tables_per_contract
                case max_total_log_length
                case max_total_prepaid_gas
                case max_transaction_size
                case max_yield_payload_size
                case per_receipt_storage_proof_size_limit
                case registers_memory_limit
                case yield_timeout_length_in_blocks
            }
        }
        /// - Remark: Generated from `#/components/schemas/LogSummaryStyle`.
        @frozen public enum LogSummaryStyle: String, Codable, Hashable, Sendable, CaseIterable {
            case plain = "plain"
            case colored = "colored"
        }
        /// - Remark: Generated from `#/components/schemas/MerklePathItem`.
        public struct MerklePathItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MerklePathItem/direction`.
            public var direction: Components.Schemas.Direction
            /// - Remark: Generated from `#/components/schemas/MerklePathItem/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// Creates a new `MerklePathItem`.
            ///
            /// - Parameters:
            ///   - direction:
            ///   - hash:
            public init(
                direction: Components.Schemas.Direction,
                hash: Components.Schemas.CryptoHash
            ) {
                self.direction = direction
                self.hash = hash
            }
            public enum CodingKeys: String, CodingKey {
                case direction
                case hash
            }
        }
        /// - Remark: Generated from `#/components/schemas/MethodResolveError`.
        @frozen public enum MethodResolveError: String, Codable, Hashable, Sendable, CaseIterable {
            case MethodEmptyName = "MethodEmptyName"
            case MethodNotFound = "MethodNotFound"
            case MethodInvalidSignature = "MethodInvalidSignature"
        }
        /// - Remark: Generated from `#/components/schemas/MissingTrieValue`.
        public struct MissingTrieValue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MissingTrieValue/context`.
            public var context: Components.Schemas.MissingTrieValueContext
            /// - Remark: Generated from `#/components/schemas/MissingTrieValue/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// Creates a new `MissingTrieValue`.
            ///
            /// - Parameters:
            ///   - context:
            ///   - hash:
            public init(
                context: Components.Schemas.MissingTrieValueContext,
                hash: Components.Schemas.CryptoHash
            ) {
                self.context = context
                self.hash = hash
            }
            public enum CodingKeys: String, CodingKey {
                case context
                case hash
            }
        }
        /// Contexts in which `StorageError::MissingTrieValue` error might occur.
        ///
        /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext`.
        @frozen public enum MissingTrieValueContext: Codable, Hashable, Sendable {
            /// Missing trie value when reading from TrieIterator.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TrieIterator = "TrieIterator"
            }
            /// Missing trie value when reading from TrieIterator.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case1`.
            case case1(Components.Schemas.MissingTrieValueContext.Case1Payload)
            /// Missing trie value when reading from TriePrefetchingStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TriePrefetchingStorage = "TriePrefetchingStorage"
            }
            /// Missing trie value when reading from TriePrefetchingStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case2`.
            case case2(Components.Schemas.MissingTrieValueContext.Case2Payload)
            /// Missing trie value when reading from TrieMemoryPartialStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TrieMemoryPartialStorage = "TrieMemoryPartialStorage"
            }
            /// Missing trie value when reading from TrieMemoryPartialStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case3`.
            case case3(Components.Schemas.MissingTrieValueContext.Case3Payload)
            /// Missing trie value when reading from TrieStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TrieStorage = "TrieStorage"
            }
            /// Missing trie value when reading from TrieStorage.
            ///
            /// - Remark: Generated from `#/components/schemas/MissingTrieValueContext/case4`.
            case case4(Components.Schemas.MissingTrieValueContext.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/MutableConfigValue`.
        public typealias MutableConfigValue = Swift.String
        /// - Remark: Generated from `#/components/schemas/NearGas`.
        public typealias NearGas = Swift.Int
        /// - Remark: Generated from `#/components/schemas/NearToken`.
        public typealias NearToken = Swift.String
        /// - Remark: Generated from `#/components/schemas/NetworkInfoView`.
        public struct NetworkInfoView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/connected_peers`.
            public var connected_peers: [Components.Schemas.PeerInfoView]
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/known_producers`.
            public var known_producers: [Components.Schemas.KnownProducerView]
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/num_connected_peers`.
            public var num_connected_peers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/peer_max_count`.
            public var peer_max_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/tier1_accounts_data`.
            public var tier1_accounts_data: [Components.Schemas.AccountDataView]
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/tier1_accounts_keys`.
            public var tier1_accounts_keys: [Components.Schemas.PublicKey]
            /// - Remark: Generated from `#/components/schemas/NetworkInfoView/tier1_connections`.
            public var tier1_connections: [Components.Schemas.PeerInfoView]
            /// Creates a new `NetworkInfoView`.
            ///
            /// - Parameters:
            ///   - connected_peers:
            ///   - known_producers:
            ///   - num_connected_peers:
            ///   - peer_max_count:
            ///   - tier1_accounts_data:
            ///   - tier1_accounts_keys:
            ///   - tier1_connections:
            public init(
                connected_peers: [Components.Schemas.PeerInfoView],
                known_producers: [Components.Schemas.KnownProducerView],
                num_connected_peers: Swift.Int,
                peer_max_count: Swift.Int,
                tier1_accounts_data: [Components.Schemas.AccountDataView],
                tier1_accounts_keys: [Components.Schemas.PublicKey],
                tier1_connections: [Components.Schemas.PeerInfoView]
            ) {
                self.connected_peers = connected_peers
                self.known_producers = known_producers
                self.num_connected_peers = num_connected_peers
                self.peer_max_count = peer_max_count
                self.tier1_accounts_data = tier1_accounts_data
                self.tier1_accounts_keys = tier1_accounts_keys
                self.tier1_connections = tier1_connections
            }
            public enum CodingKeys: String, CodingKey {
                case connected_peers
                case known_producers
                case num_connected_peers
                case peer_max_count
                case tier1_accounts_data
                case tier1_accounts_keys
                case tier1_connections
            }
        }
        /// - Remark: Generated from `#/components/schemas/NextEpochValidatorInfo`.
        public struct NextEpochValidatorInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NextEpochValidatorInfo/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/NextEpochValidatorInfo/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// - Remark: Generated from `#/components/schemas/NextEpochValidatorInfo/shards`.
            public var shards: [Components.Schemas.ShardId]
            /// - Remark: Generated from `#/components/schemas/NextEpochValidatorInfo/stake`.
            public var stake: Components.Schemas.NearToken
            /// Creates a new `NextEpochValidatorInfo`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - public_key:
            ///   - shards:
            ///   - stake:
            public init(
                account_id: Components.Schemas.AccountId,
                public_key: Components.Schemas.PublicKey,
                shards: [Components.Schemas.ShardId],
                stake: Components.Schemas.NearToken
            ) {
                self.account_id = account_id
                self.public_key = public_key
                self.shards = shards
                self.stake = stake
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case public_key
                case shards
                case stake
            }
        }
        /// An Action that can be included in a transaction or receipt, excluding delegate actions. This type represents all possible action types except DelegateAction to prevent infinite recursion in meta-transactions.
        ///
        /// - Remark: Generated from `#/components/schemas/NonDelegateAction`.
        @frozen public enum NonDelegateAction: Codable, Hashable, Sendable {
            /// Create an (sub)account using a transaction `receiver_id` as an ID for
            /// a new account ID must pass validation rules described here
            /// <https://nomicon.io/DataStructures/Account>.
            ///
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case1/CreateAccount`.
                public var CreateAccount: Components.Schemas.CreateAccountAction
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - CreateAccount:
                public init(CreateAccount: Components.Schemas.CreateAccountAction) {
                    self.CreateAccount = CreateAccount
                }
                public enum CodingKeys: String, CodingKey {
                    case CreateAccount
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.CreateAccount = try container.decode(
                        Components.Schemas.CreateAccountAction.self,
                        forKey: .CreateAccount
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "CreateAccount"
                    ])
                }
            }
            /// Create an (sub)account using a transaction `receiver_id` as an ID for
            /// a new account ID must pass validation rules described here
            /// <https://nomicon.io/DataStructures/Account>.
            ///
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case1`.
            case case1(Components.Schemas.NonDelegateAction.Case1Payload)
            /// Sets a Wasm code to a receiver_id
            ///
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case2/DeployContract`.
                public var DeployContract: Components.Schemas.DeployContractAction
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - DeployContract:
                public init(DeployContract: Components.Schemas.DeployContractAction) {
                    self.DeployContract = DeployContract
                }
                public enum CodingKeys: String, CodingKey {
                    case DeployContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeployContract = try container.decode(
                        Components.Schemas.DeployContractAction.self,
                        forKey: .DeployContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeployContract"
                    ])
                }
            }
            /// Sets a Wasm code to a receiver_id
            ///
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case2`.
            case case2(Components.Schemas.NonDelegateAction.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case3/FunctionCall`.
                public var FunctionCall: Components.Schemas.FunctionCallAction
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - FunctionCall:
                public init(FunctionCall: Components.Schemas.FunctionCallAction) {
                    self.FunctionCall = FunctionCall
                }
                public enum CodingKeys: String, CodingKey {
                    case FunctionCall
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FunctionCall = try container.decode(
                        Components.Schemas.FunctionCallAction.self,
                        forKey: .FunctionCall
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FunctionCall"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case3`.
            case case3(Components.Schemas.NonDelegateAction.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case4/Transfer`.
                public var Transfer: Components.Schemas.TransferAction
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - Transfer:
                public init(Transfer: Components.Schemas.TransferAction) {
                    self.Transfer = Transfer
                }
                public enum CodingKeys: String, CodingKey {
                    case Transfer
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Transfer = try container.decode(
                        Components.Schemas.TransferAction.self,
                        forKey: .Transfer
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Transfer"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case4`.
            case case4(Components.Schemas.NonDelegateAction.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case5/Stake`.
                public var Stake: Components.Schemas.StakeAction
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - Stake:
                public init(Stake: Components.Schemas.StakeAction) {
                    self.Stake = Stake
                }
                public enum CodingKeys: String, CodingKey {
                    case Stake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Stake = try container.decode(
                        Components.Schemas.StakeAction.self,
                        forKey: .Stake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Stake"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case5`.
            case case5(Components.Schemas.NonDelegateAction.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case6/AddKey`.
                public var AddKey: Components.Schemas.AddKeyAction
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - AddKey:
                public init(AddKey: Components.Schemas.AddKeyAction) {
                    self.AddKey = AddKey
                }
                public enum CodingKeys: String, CodingKey {
                    case AddKey
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.AddKey = try container.decode(
                        Components.Schemas.AddKeyAction.self,
                        forKey: .AddKey
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "AddKey"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case6`.
            case case6(Components.Schemas.NonDelegateAction.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case7/DeleteKey`.
                public var DeleteKey: Components.Schemas.DeleteKeyAction
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - DeleteKey:
                public init(DeleteKey: Components.Schemas.DeleteKeyAction) {
                    self.DeleteKey = DeleteKey
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteKey
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteKey = try container.decode(
                        Components.Schemas.DeleteKeyAction.self,
                        forKey: .DeleteKey
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteKey"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case7`.
            case case7(Components.Schemas.NonDelegateAction.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case8/DeleteAccount`.
                public var DeleteAccount: Components.Schemas.DeleteAccountAction
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - DeleteAccount:
                public init(DeleteAccount: Components.Schemas.DeleteAccountAction) {
                    self.DeleteAccount = DeleteAccount
                }
                public enum CodingKeys: String, CodingKey {
                    case DeleteAccount
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeleteAccount = try container.decode(
                        Components.Schemas.DeleteAccountAction.self,
                        forKey: .DeleteAccount
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeleteAccount"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case8`.
            case case8(Components.Schemas.NonDelegateAction.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case9/DeployGlobalContract`.
                public var DeployGlobalContract: Components.Schemas.DeployGlobalContractAction
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - DeployGlobalContract:
                public init(DeployGlobalContract: Components.Schemas.DeployGlobalContractAction) {
                    self.DeployGlobalContract = DeployGlobalContract
                }
                public enum CodingKeys: String, CodingKey {
                    case DeployGlobalContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeployGlobalContract = try container.decode(
                        Components.Schemas.DeployGlobalContractAction.self,
                        forKey: .DeployGlobalContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeployGlobalContract"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case9`.
            case case9(Components.Schemas.NonDelegateAction.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case10/UseGlobalContract`.
                public var UseGlobalContract: Components.Schemas.UseGlobalContractAction
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - UseGlobalContract:
                public init(UseGlobalContract: Components.Schemas.UseGlobalContractAction) {
                    self.UseGlobalContract = UseGlobalContract
                }
                public enum CodingKeys: String, CodingKey {
                    case UseGlobalContract
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.UseGlobalContract = try container.decode(
                        Components.Schemas.UseGlobalContractAction.self,
                        forKey: .UseGlobalContract
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "UseGlobalContract"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case10`.
            case case10(Components.Schemas.NonDelegateAction.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case11/DeterministicStateInit`.
                public var DeterministicStateInit: Components.Schemas.DeterministicStateInitAction
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - DeterministicStateInit:
                public init(DeterministicStateInit: Components.Schemas.DeterministicStateInitAction) {
                    self.DeterministicStateInit = DeterministicStateInit
                }
                public enum CodingKeys: String, CodingKey {
                    case DeterministicStateInit
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.DeterministicStateInit = try container.decode(
                        Components.Schemas.DeterministicStateInitAction.self,
                        forKey: .DeterministicStateInit
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "DeterministicStateInit"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/NonDelegateAction/case11`.
            case case11(Components.Schemas.NonDelegateAction.Case11Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Peer id is the public key.
        ///
        /// - Remark: Generated from `#/components/schemas/PeerId`.
        public struct PeerId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PeerId/value1`.
            public var value1: Components.Schemas.PublicKey
            /// Creates a new `PeerId`.
            ///
            /// - Parameters:
            ///   - value1:
            public init(value1: Components.Schemas.PublicKey) {
                self.value1 = value1
            }
            public init(from decoder: any Decoder) throws {
                self.value1 = try decoder.decodeFromSingleValueContainer()
            }
            public func encode(to encoder: any Encoder) throws {
                try encoder.encodeToSingleValueContainer(self.value1)
            }
        }
        /// - Remark: Generated from `#/components/schemas/PeerInfoView`.
        public struct PeerInfoView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/account_id`.
            public struct account_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PeerInfoView/account_id/value1`.
                public var value1: Components.Schemas.AccountId?
                /// - Remark: Generated from `#/components/schemas/PeerInfoView/account_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `account_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AccountId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/account_id`.
            public var account_id: Components.Schemas.PeerInfoView.account_idPayload?
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/addr`.
            public var addr: Swift.String
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/archival`.
            public var archival: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/block_hash`.
            public struct block_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PeerInfoView/block_hash/value1`.
                public var value1: Components.Schemas.CryptoHash?
                /// - Remark: Generated from `#/components/schemas/PeerInfoView/block_hash/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `block_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CryptoHash? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/block_hash`.
            public var block_hash: Components.Schemas.PeerInfoView.block_hashPayload?
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/connection_established_time_millis`.
            public var connection_established_time_millis: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/height`.
            public var height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/is_highest_block_invalid`.
            public var is_highest_block_invalid: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/is_outbound_peer`.
            public var is_outbound_peer: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/last_time_peer_requested_millis`.
            public var last_time_peer_requested_millis: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/last_time_received_message_millis`.
            public var last_time_received_message_millis: Swift.Int
            /// Connection nonce.
            ///
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/nonce`.
            public var nonce: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/peer_id`.
            public var peer_id: Components.Schemas.PublicKey
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/received_bytes_per_sec`.
            public var received_bytes_per_sec: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/sent_bytes_per_sec`.
            public var sent_bytes_per_sec: Swift.Int
            /// - Remark: Generated from `#/components/schemas/PeerInfoView/tracked_shards`.
            public var tracked_shards: [Components.Schemas.ShardId]
            /// Creates a new `PeerInfoView`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - addr:
            ///   - archival:
            ///   - block_hash:
            ///   - connection_established_time_millis:
            ///   - height:
            ///   - is_highest_block_invalid:
            ///   - is_outbound_peer:
            ///   - last_time_peer_requested_millis:
            ///   - last_time_received_message_millis:
            ///   - nonce: Connection nonce.
            ///   - peer_id:
            ///   - received_bytes_per_sec:
            ///   - sent_bytes_per_sec:
            ///   - tracked_shards:
            public init(
                account_id: Components.Schemas.PeerInfoView.account_idPayload? = nil,
                addr: Swift.String,
                archival: Swift.Bool,
                block_hash: Components.Schemas.PeerInfoView.block_hashPayload? = nil,
                connection_established_time_millis: Swift.Int,
                height: Swift.Int? = nil,
                is_highest_block_invalid: Swift.Bool,
                is_outbound_peer: Swift.Bool,
                last_time_peer_requested_millis: Swift.Int,
                last_time_received_message_millis: Swift.Int,
                nonce: Swift.Int,
                peer_id: Components.Schemas.PublicKey,
                received_bytes_per_sec: Swift.Int,
                sent_bytes_per_sec: Swift.Int,
                tracked_shards: [Components.Schemas.ShardId]
            ) {
                self.account_id = account_id
                self.addr = addr
                self.archival = archival
                self.block_hash = block_hash
                self.connection_established_time_millis = connection_established_time_millis
                self.height = height
                self.is_highest_block_invalid = is_highest_block_invalid
                self.is_outbound_peer = is_outbound_peer
                self.last_time_peer_requested_millis = last_time_peer_requested_millis
                self.last_time_received_message_millis = last_time_received_message_millis
                self.nonce = nonce
                self.peer_id = peer_id
                self.received_bytes_per_sec = received_bytes_per_sec
                self.sent_bytes_per_sec = sent_bytes_per_sec
                self.tracked_shards = tracked_shards
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case addr
                case archival
                case block_hash
                case connection_established_time_millis
                case height
                case is_highest_block_invalid
                case is_outbound_peer
                case last_time_peer_requested_millis
                case last_time_received_message_millis
                case nonce
                case peer_id
                case received_bytes_per_sec
                case sent_bytes_per_sec
                case tracked_shards
            }
        }
        /// Error that can occur while preparing or executing Wasm smart-contract.
        ///
        /// - Remark: Generated from `#/components/schemas/PrepareError`.
        @frozen public enum PrepareError: Codable, Hashable, Sendable {
            /// Error happened while serializing the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Serialization = "Serialization"
            }
            /// Error happened while serializing the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case1`.
            case case1(Components.Schemas.PrepareError.Case1Payload)
            /// Error happened while deserializing the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Deserialization = "Deserialization"
            }
            /// Error happened while deserializing the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case2`.
            case case2(Components.Schemas.PrepareError.Case2Payload)
            /// Internal memory declaration has been found in the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case InternalMemoryDeclared = "InternalMemoryDeclared"
            }
            /// Internal memory declaration has been found in the module.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case3`.
            case case3(Components.Schemas.PrepareError.Case3Payload)
            /// Gas instrumentation failed.
            ///
            /// This most likely indicates the module isn't valid.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case GasInstrumentation = "GasInstrumentation"
            }
            /// Gas instrumentation failed.
            ///
            /// This most likely indicates the module isn't valid.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case4`.
            case case4(Components.Schemas.PrepareError.Case4Payload)
            /// Stack instrumentation failed.
            ///
            /// This  most likely indicates the module isn't valid.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case5`.
            @frozen public enum Case5Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case StackHeightInstrumentation = "StackHeightInstrumentation"
            }
            /// Stack instrumentation failed.
            ///
            /// This  most likely indicates the module isn't valid.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case5`.
            case case5(Components.Schemas.PrepareError.Case5Payload)
            /// Error happened during instantiation.
            ///
            /// This might indicate that `start` function trapped, or module isn't
            /// instantiable and/or un-linkable.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Instantiate = "Instantiate"
            }
            /// Error happened during instantiation.
            ///
            /// This might indicate that `start` function trapped, or module isn't
            /// instantiable and/or un-linkable.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case6`.
            case case6(Components.Schemas.PrepareError.Case6Payload)
            /// Error creating memory.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case7`.
            @frozen public enum Case7Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Memory = "Memory"
            }
            /// Error creating memory.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case7`.
            case case7(Components.Schemas.PrepareError.Case7Payload)
            /// Contract contains too many functions.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case8`.
            @frozen public enum Case8Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TooManyFunctions = "TooManyFunctions"
            }
            /// Contract contains too many functions.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case8`.
            case case8(Components.Schemas.PrepareError.Case8Payload)
            /// Contract contains too many locals.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case9`.
            @frozen public enum Case9Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TooManyLocals = "TooManyLocals"
            }
            /// Contract contains too many locals.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case9`.
            case case9(Components.Schemas.PrepareError.Case9Payload)
            /// Contract contains too many tables.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case10`.
            @frozen public enum Case10Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TooManyTables = "TooManyTables"
            }
            /// Contract contains too many tables.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case10`.
            case case10(Components.Schemas.PrepareError.Case10Payload)
            /// Contract contains too many table elements.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case11`.
            @frozen public enum Case11Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case TooManyTableElements = "TooManyTableElements"
            }
            /// Contract contains too many table elements.
            ///
            /// - Remark: Generated from `#/components/schemas/PrepareError/case11`.
            case case11(Components.Schemas.PrepareError.Case11Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case7(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case8(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case9(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case10(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case11(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Configures whether the node checks the next or the next next epoch for network version compatibility.
        ///
        /// - Remark: Generated from `#/components/schemas/ProtocolVersionCheckConfig`.
        @frozen public enum ProtocolVersionCheckConfig: String, Codable, Hashable, Sendable, CaseIterable {
            case Next = "Next"
            case NextNext = "NextNext"
        }
        /// - Remark: Generated from `#/components/schemas/PublicKey`.
        public typealias PublicKey = Swift.String
        /// - Remark: Generated from `#/components/schemas/Range_of_uint64`.
        public struct Range_of_uint64: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Range_of_uint64/end`.
            public var end: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Range_of_uint64/start`.
            public var start: Swift.Int
            /// Creates a new `Range_of_uint64`.
            ///
            /// - Parameters:
            ///   - end:
            ///   - start:
            public init(
                end: Swift.Int,
                start: Swift.Int
            ) {
                self.end = end
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case end
                case start
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReceiptEnumView`.
        @frozen public enum ReceiptEnumView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action`.
                public struct ActionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/actions`.
                    public var actions: [Components.Schemas.ActionView]
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/gas_price`.
                    public var gas_price: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/input_data_ids`.
                    public var input_data_ids: [Components.Schemas.CryptoHash]
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/is_promise_yield`.
                    public var is_promise_yield: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/output_data_receivers`.
                    public var output_data_receivers: [Components.Schemas.DataReceiverView]
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/signer_id`.
                    public var signer_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action/signer_public_key`.
                    public var signer_public_key: Components.Schemas.PublicKey
                    /// Creates a new `ActionPayload`.
                    ///
                    /// - Parameters:
                    ///   - actions:
                    ///   - gas_price:
                    ///   - input_data_ids:
                    ///   - is_promise_yield:
                    ///   - output_data_receivers:
                    ///   - signer_id:
                    ///   - signer_public_key:
                    public init(
                        actions: [Components.Schemas.ActionView],
                        gas_price: Components.Schemas.NearToken,
                        input_data_ids: [Components.Schemas.CryptoHash],
                        is_promise_yield: Swift.Bool? = nil,
                        output_data_receivers: [Components.Schemas.DataReceiverView],
                        signer_id: Components.Schemas.AccountId,
                        signer_public_key: Components.Schemas.PublicKey
                    ) {
                        self.actions = actions
                        self.gas_price = gas_price
                        self.input_data_ids = input_data_ids
                        self.is_promise_yield = is_promise_yield
                        self.output_data_receivers = output_data_receivers
                        self.signer_id = signer_id
                        self.signer_public_key = signer_public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case actions
                        case gas_price
                        case input_data_ids
                        case is_promise_yield
                        case output_data_receivers
                        case signer_id
                        case signer_public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1/Action`.
                public var Action: Components.Schemas.ReceiptEnumView.Case1Payload.ActionPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - Action:
                public init(Action: Components.Schemas.ReceiptEnumView.Case1Payload.ActionPayload) {
                    self.Action = Action
                }
                public enum CodingKeys: String, CodingKey {
                    case Action
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Action = try container.decode(
                        Components.Schemas.ReceiptEnumView.Case1Payload.ActionPayload.self,
                        forKey: .Action
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Action"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case1`.
            case case1(Components.Schemas.ReceiptEnumView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2/Data`.
                public struct DataPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2/Data/data`.
                    public var data: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2/Data/data_id`.
                    public var data_id: Components.Schemas.CryptoHash
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2/Data/is_promise_resume`.
                    public var is_promise_resume: Swift.Bool?
                    /// Creates a new `DataPayload`.
                    ///
                    /// - Parameters:
                    ///   - data:
                    ///   - data_id:
                    ///   - is_promise_resume:
                    public init(
                        data: Swift.String? = nil,
                        data_id: Components.Schemas.CryptoHash,
                        is_promise_resume: Swift.Bool? = nil
                    ) {
                        self.data = data
                        self.data_id = data_id
                        self.is_promise_resume = is_promise_resume
                    }
                    public enum CodingKeys: String, CodingKey {
                        case data
                        case data_id
                        case is_promise_resume
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2/Data`.
                public var Data: Components.Schemas.ReceiptEnumView.Case2Payload.DataPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - Data:
                public init(Data: Components.Schemas.ReceiptEnumView.Case2Payload.DataPayload) {
                    self.Data = Data
                }
                public enum CodingKeys: String, CodingKey {
                    case Data
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Data = try container.decode(
                        Components.Schemas.ReceiptEnumView.Case2Payload.DataPayload.self,
                        forKey: .Data
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Data"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case2`.
            case case2(Components.Schemas.ReceiptEnumView.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution`.
                public struct GlobalContractDistributionPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution/already_delivered_shards`.
                    public var already_delivered_shards: [Components.Schemas.ShardId]
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution/code`.
                    public var code: Swift.String
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution/id`.
                    public var id: Components.Schemas.GlobalContractIdentifier
                    /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution/target_shard`.
                    public var target_shard: Components.Schemas.ShardId
                    /// Creates a new `GlobalContractDistributionPayload`.
                    ///
                    /// - Parameters:
                    ///   - already_delivered_shards:
                    ///   - code:
                    ///   - id:
                    ///   - target_shard:
                    public init(
                        already_delivered_shards: [Components.Schemas.ShardId],
                        code: Swift.String,
                        id: Components.Schemas.GlobalContractIdentifier,
                        target_shard: Components.Schemas.ShardId
                    ) {
                        self.already_delivered_shards = already_delivered_shards
                        self.code = code
                        self.id = id
                        self.target_shard = target_shard
                    }
                    public enum CodingKeys: String, CodingKey {
                        case already_delivered_shards
                        case code
                        case id
                        case target_shard
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3/GlobalContractDistribution`.
                public var GlobalContractDistribution: Components.Schemas.ReceiptEnumView.Case3Payload.GlobalContractDistributionPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - GlobalContractDistribution:
                public init(GlobalContractDistribution: Components.Schemas.ReceiptEnumView.Case3Payload.GlobalContractDistributionPayload) {
                    self.GlobalContractDistribution = GlobalContractDistribution
                }
                public enum CodingKeys: String, CodingKey {
                    case GlobalContractDistribution
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.GlobalContractDistribution = try container.decode(
                        Components.Schemas.ReceiptEnumView.Case3Payload.GlobalContractDistributionPayload.self,
                        forKey: .GlobalContractDistribution
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "GlobalContractDistribution"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ReceiptEnumView/case3`.
            case case3(Components.Schemas.ReceiptEnumView.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Describes the error for validating a receipt.
        ///
        /// - Remark: Generated from `#/components/schemas/ReceiptValidationError`.
        @frozen public enum ReceiptValidationError: Codable, Hashable, Sendable {
            /// The `predecessor_id` of a Receipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case1/InvalidPredecessorId`.
                public struct InvalidPredecessorIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case1/InvalidPredecessorId/account_id`.
                    public var account_id: Swift.String
                    /// Creates a new `InvalidPredecessorIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Swift.String) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case1/InvalidPredecessorId`.
                public var InvalidPredecessorId: Components.Schemas.ReceiptValidationError.Case1Payload.InvalidPredecessorIdPayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - InvalidPredecessorId:
                public init(InvalidPredecessorId: Components.Schemas.ReceiptValidationError.Case1Payload.InvalidPredecessorIdPayload) {
                    self.InvalidPredecessorId = InvalidPredecessorId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidPredecessorId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidPredecessorId = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case1Payload.InvalidPredecessorIdPayload.self,
                        forKey: .InvalidPredecessorId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidPredecessorId"
                    ])
                }
            }
            /// The `predecessor_id` of a Receipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case1`.
            case case1(Components.Schemas.ReceiptValidationError.Case1Payload)
            /// The `receiver_id` of a Receipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case2/InvalidReceiverId`.
                public struct InvalidReceiverIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case2/InvalidReceiverId/account_id`.
                    public var account_id: Swift.String
                    /// Creates a new `InvalidReceiverIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Swift.String) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case2/InvalidReceiverId`.
                public var InvalidReceiverId: Components.Schemas.ReceiptValidationError.Case2Payload.InvalidReceiverIdPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - InvalidReceiverId:
                public init(InvalidReceiverId: Components.Schemas.ReceiptValidationError.Case2Payload.InvalidReceiverIdPayload) {
                    self.InvalidReceiverId = InvalidReceiverId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidReceiverId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidReceiverId = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case2Payload.InvalidReceiverIdPayload.self,
                        forKey: .InvalidReceiverId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidReceiverId"
                    ])
                }
            }
            /// The `receiver_id` of a Receipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case2`.
            case case2(Components.Schemas.ReceiptValidationError.Case2Payload)
            /// The `signer_id` of an ActionReceipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case3/InvalidSignerId`.
                public struct InvalidSignerIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case3/InvalidSignerId/account_id`.
                    public var account_id: Swift.String
                    /// Creates a new `InvalidSignerIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Swift.String) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case3/InvalidSignerId`.
                public var InvalidSignerId: Components.Schemas.ReceiptValidationError.Case3Payload.InvalidSignerIdPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - InvalidSignerId:
                public init(InvalidSignerId: Components.Schemas.ReceiptValidationError.Case3Payload.InvalidSignerIdPayload) {
                    self.InvalidSignerId = InvalidSignerId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidSignerId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidSignerId = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case3Payload.InvalidSignerIdPayload.self,
                        forKey: .InvalidSignerId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidSignerId"
                    ])
                }
            }
            /// The `signer_id` of an ActionReceipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case3`.
            case case3(Components.Schemas.ReceiptValidationError.Case3Payload)
            /// The `receiver_id` of a DataReceiver within an ActionReceipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case4/InvalidDataReceiverId`.
                public struct InvalidDataReceiverIdPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case4/InvalidDataReceiverId/account_id`.
                    public var account_id: Swift.String
                    /// Creates a new `InvalidDataReceiverIdPayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Swift.String) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case4/InvalidDataReceiverId`.
                public var InvalidDataReceiverId: Components.Schemas.ReceiptValidationError.Case4Payload.InvalidDataReceiverIdPayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - InvalidDataReceiverId:
                public init(InvalidDataReceiverId: Components.Schemas.ReceiptValidationError.Case4Payload.InvalidDataReceiverIdPayload) {
                    self.InvalidDataReceiverId = InvalidDataReceiverId
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidDataReceiverId
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidDataReceiverId = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case4Payload.InvalidDataReceiverIdPayload.self,
                        forKey: .InvalidDataReceiverId
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidDataReceiverId"
                    ])
                }
            }
            /// The `receiver_id` of a DataReceiver within an ActionReceipt is not valid.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case4`.
            case case4(Components.Schemas.ReceiptValidationError.Case4Payload)
            /// The length of the returned data exceeded the limit in a DataReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5/ReturnedValueLengthExceeded`.
                public struct ReturnedValueLengthExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5/ReturnedValueLengthExceeded/length`.
                    public var length: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5/ReturnedValueLengthExceeded/limit`.
                    public var limit: Swift.Int
                    /// Creates a new `ReturnedValueLengthExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - length:
                    ///   - limit:
                    public init(
                        length: Swift.Int,
                        limit: Swift.Int
                    ) {
                        self.length = length
                        self.limit = limit
                    }
                    public enum CodingKeys: String, CodingKey {
                        case length
                        case limit
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5/ReturnedValueLengthExceeded`.
                public var ReturnedValueLengthExceeded: Components.Schemas.ReceiptValidationError.Case5Payload.ReturnedValueLengthExceededPayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - ReturnedValueLengthExceeded:
                public init(ReturnedValueLengthExceeded: Components.Schemas.ReceiptValidationError.Case5Payload.ReturnedValueLengthExceededPayload) {
                    self.ReturnedValueLengthExceeded = ReturnedValueLengthExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ReturnedValueLengthExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ReturnedValueLengthExceeded = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case5Payload.ReturnedValueLengthExceededPayload.self,
                        forKey: .ReturnedValueLengthExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ReturnedValueLengthExceeded"
                    ])
                }
            }
            /// The length of the returned data exceeded the limit in a DataReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case5`.
            case case5(Components.Schemas.ReceiptValidationError.Case5Payload)
            /// The number of input data dependencies exceeds the limit in an ActionReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6/NumberInputDataDependenciesExceeded`.
                public struct NumberInputDataDependenciesExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6/NumberInputDataDependenciesExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6/NumberInputDataDependenciesExceeded/number_of_input_data_dependencies`.
                    public var number_of_input_data_dependencies: Swift.Int
                    /// Creates a new `NumberInputDataDependenciesExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - number_of_input_data_dependencies:
                    public init(
                        limit: Swift.Int,
                        number_of_input_data_dependencies: Swift.Int
                    ) {
                        self.limit = limit
                        self.number_of_input_data_dependencies = number_of_input_data_dependencies
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case number_of_input_data_dependencies
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6/NumberInputDataDependenciesExceeded`.
                public var NumberInputDataDependenciesExceeded: Components.Schemas.ReceiptValidationError.Case6Payload.NumberInputDataDependenciesExceededPayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - NumberInputDataDependenciesExceeded:
                public init(NumberInputDataDependenciesExceeded: Components.Schemas.ReceiptValidationError.Case6Payload.NumberInputDataDependenciesExceededPayload) {
                    self.NumberInputDataDependenciesExceeded = NumberInputDataDependenciesExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case NumberInputDataDependenciesExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NumberInputDataDependenciesExceeded = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case6Payload.NumberInputDataDependenciesExceededPayload.self,
                        forKey: .NumberInputDataDependenciesExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NumberInputDataDependenciesExceeded"
                    ])
                }
            }
            /// The number of input data dependencies exceeds the limit in an ActionReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case6`.
            case case6(Components.Schemas.ReceiptValidationError.Case6Payload)
            /// An error occurred while validating actions of an ActionReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case7/ActionsValidation`.
                public var ActionsValidation: Components.Schemas.ActionsValidationError
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - ActionsValidation:
                public init(ActionsValidation: Components.Schemas.ActionsValidationError) {
                    self.ActionsValidation = ActionsValidation
                }
                public enum CodingKeys: String, CodingKey {
                    case ActionsValidation
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ActionsValidation = try container.decode(
                        Components.Schemas.ActionsValidationError.self,
                        forKey: .ActionsValidation
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ActionsValidation"
                    ])
                }
            }
            /// An error occurred while validating actions of an ActionReceipt.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case7`.
            case case7(Components.Schemas.ReceiptValidationError.Case7Payload)
            /// Receipt is bigger than the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8/ReceiptSizeExceeded`.
                public struct ReceiptSizeExceededPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8/ReceiptSizeExceeded/limit`.
                    public var limit: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8/ReceiptSizeExceeded/size`.
                    public var size: Swift.Int
                    /// Creates a new `ReceiptSizeExceededPayload`.
                    ///
                    /// - Parameters:
                    ///   - limit:
                    ///   - size:
                    public init(
                        limit: Swift.Int,
                        size: Swift.Int
                    ) {
                        self.limit = limit
                        self.size = size
                    }
                    public enum CodingKeys: String, CodingKey {
                        case limit
                        case size
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8/ReceiptSizeExceeded`.
                public var ReceiptSizeExceeded: Components.Schemas.ReceiptValidationError.Case8Payload.ReceiptSizeExceededPayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - ReceiptSizeExceeded:
                public init(ReceiptSizeExceeded: Components.Schemas.ReceiptValidationError.Case8Payload.ReceiptSizeExceededPayload) {
                    self.ReceiptSizeExceeded = ReceiptSizeExceeded
                }
                public enum CodingKeys: String, CodingKey {
                    case ReceiptSizeExceeded
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ReceiptSizeExceeded = try container.decode(
                        Components.Schemas.ReceiptValidationError.Case8Payload.ReceiptSizeExceededPayload.self,
                        forKey: .ReceiptSizeExceeded
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ReceiptSizeExceeded"
                    ])
                }
            }
            /// Receipt is bigger than the limit.
            ///
            /// - Remark: Generated from `#/components/schemas/ReceiptValidationError/case8`.
            case case8(Components.Schemas.ReceiptValidationError.Case8Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ReceiptView`.
        public struct ReceiptView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ReceiptView/predecessor_id`.
            public var predecessor_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/ReceiptView/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ReceiptView/receipt`.
            public var receipt: Components.Schemas.ReceiptEnumView
            /// - Remark: Generated from `#/components/schemas/ReceiptView/receipt_id`.
            public var receipt_id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/ReceiptView/receiver_id`.
            public var receiver_id: Components.Schemas.AccountId
            /// Creates a new `ReceiptView`.
            ///
            /// - Parameters:
            ///   - predecessor_id:
            ///   - priority:
            ///   - receipt:
            ///   - receipt_id:
            ///   - receiver_id:
            public init(
                predecessor_id: Components.Schemas.AccountId,
                priority: Swift.Int? = nil,
                receipt: Components.Schemas.ReceiptEnumView,
                receipt_id: Components.Schemas.CryptoHash,
                receiver_id: Components.Schemas.AccountId
            ) {
                self.predecessor_id = predecessor_id
                self.priority = priority
                self.receipt = receipt
                self.receipt_id = receipt_id
                self.receiver_id = receiver_id
            }
            public enum CodingKeys: String, CodingKey {
                case predecessor_id
                case priority
                case receipt
                case receipt_id
                case receiver_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcBlockRequest`.
        @frozen public enum RpcBlockRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case1/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                public init(block_id: Components.Schemas.BlockId) {
                    self.block_id = block_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case1`.
            case case1(Components.Schemas.RpcBlockRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case2/finality`.
                public var finality: Components.Schemas.Finality
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - finality:
                public init(finality: Components.Schemas.Finality) {
                    self.finality = finality
                }
                public enum CodingKeys: String, CodingKey {
                    case finality
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case2`.
            case case2(Components.Schemas.RpcBlockRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case3/sync_checkpoint`.
                public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - sync_checkpoint:
                public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                    self.sync_checkpoint = sync_checkpoint
                }
                public enum CodingKeys: String, CodingKey {
                    case sync_checkpoint
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcBlockRequest/case3`.
            case case3(Components.Schemas.RpcBlockRequest.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcBlockResponse`.
        public struct RpcBlockResponse: Codable, Hashable, Sendable {
            /// The AccountId of the author of the Block
            ///
            /// - Remark: Generated from `#/components/schemas/RpcBlockResponse/author`.
            public struct authorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcBlockResponse/author/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `authorPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// The AccountId of the author of the Block
            ///
            /// - Remark: Generated from `#/components/schemas/RpcBlockResponse/author`.
            public var author: Components.Schemas.RpcBlockResponse.authorPayload
            /// - Remark: Generated from `#/components/schemas/RpcBlockResponse/chunks`.
            public var chunks: [Components.Schemas.ChunkHeaderView]
            /// - Remark: Generated from `#/components/schemas/RpcBlockResponse/header`.
            public var header: Components.Schemas.BlockHeaderView
            /// Creates a new `RpcBlockResponse`.
            ///
            /// - Parameters:
            ///   - author: The AccountId of the author of the Block
            ///   - chunks:
            ///   - header:
            public init(
                author: Components.Schemas.RpcBlockResponse.authorPayload,
                chunks: [Components.Schemas.ChunkHeaderView],
                header: Components.Schemas.BlockHeaderView
            ) {
                self.author = author
                self.chunks = chunks
                self.header = header
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case chunks
                case header
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcChunkRequest`.
        public struct RpcChunkRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value1/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value1/shard_id`.
                public var shard_id: Components.Schemas.ShardId
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                ///   - shard_id:
                public init(
                    block_id: Components.Schemas.BlockId,
                    shard_id: Components.Schemas.ShardId
                ) {
                    self.block_id = block_id
                    self.shard_id = shard_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                    case shard_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value1`.
            public var value1: Components.Schemas.RpcChunkRequest.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value2/chunk_id`.
                public var chunk_id: Components.Schemas.CryptoHash
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - chunk_id:
                public init(chunk_id: Components.Schemas.CryptoHash) {
                    self.chunk_id = chunk_id
                }
                public enum CodingKeys: String, CodingKey {
                    case chunk_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcChunkRequest/value2`.
            public var value2: Components.Schemas.RpcChunkRequest.Value2Payload?
            /// Creates a new `RpcChunkRequest`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RpcChunkRequest.Value1Payload? = nil,
                value2: Components.Schemas.RpcChunkRequest.Value2Payload? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcChunkResponse`.
        public struct RpcChunkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcChunkResponse/author`.
            public var author: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/RpcChunkResponse/header`.
            public var header: Components.Schemas.ChunkHeaderView
            /// - Remark: Generated from `#/components/schemas/RpcChunkResponse/receipts`.
            public var receipts: [Components.Schemas.ReceiptView]
            /// - Remark: Generated from `#/components/schemas/RpcChunkResponse/transactions`.
            public var transactions: [Components.Schemas.SignedTransactionView]
            /// Creates a new `RpcChunkResponse`.
            ///
            /// - Parameters:
            ///   - author:
            ///   - header:
            ///   - receipts:
            ///   - transactions:
            public init(
                author: Components.Schemas.AccountId,
                header: Components.Schemas.ChunkHeaderView,
                receipts: [Components.Schemas.ReceiptView],
                transactions: [Components.Schemas.SignedTransactionView]
            ) {
                self.author = author
                self.header = header
                self.receipts = receipts
                self.transactions = transactions
            }
            public enum CodingKeys: String, CodingKey {
                case author
                case header
                case receipts
                case transactions
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcClientConfigRequest`.
        public typealias RpcClientConfigRequest = OpenAPIRuntime.OpenAPIValueContainer
        /// ClientConfig where some fields can be updated at runtime.
        ///
        /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse`.
        public struct RpcClientConfigResponse: Codable, Hashable, Sendable {
            /// Not clear old data, set `true` for archive nodes.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/archive`.
            public var archive: Swift.Bool
            /// Horizon at which instead of fetching block, fetch full state.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/block_fetch_horizon`.
            public var block_fetch_horizon: Swift.Int
            /// Behind this horizon header fetch kicks in.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/block_header_fetch_horizon`.
            public var block_header_fetch_horizon: Swift.Int
            /// Duration to check for producing / skipping block.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/block_production_tracking_delay`.
            public var block_production_tracking_delay: [Swift.Int]
            /// Time between check to perform catchup.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/catchup_step_period`.
            public var catchup_step_period: [Swift.Int]
            /// Chain id for status.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chain_id`.
            public var chain_id: Swift.String
            /// Optional config for the Chunk Distribution Network feature.
            /// If set to `None` then this node does not participate in the Chunk Distribution Network.
            /// Nodes not participating will still function fine, but possibly with higher
            /// latency due to the need of requesting chunks over the peer-to-peer network.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_distribution_network`.
            public struct chunk_distribution_networkPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_distribution_network/value1`.
                public var value1: Components.Schemas.ChunkDistributionNetworkConfig?
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_distribution_network/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `chunk_distribution_networkPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.ChunkDistributionNetworkConfig? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Optional config for the Chunk Distribution Network feature.
            /// If set to `None` then this node does not participate in the Chunk Distribution Network.
            /// Nodes not participating will still function fine, but possibly with higher
            /// latency due to the need of requesting chunks over the peer-to-peer network.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_distribution_network`.
            public var chunk_distribution_network: Components.Schemas.RpcClientConfigResponse.chunk_distribution_networkPayload?
            /// Time between checking to re-request chunks.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_request_retry_period`.
            public var chunk_request_retry_period: [Swift.Int]
            /// Number of threads for ChunkValidationActor pool.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_validation_threads`.
            public var chunk_validation_threads: Swift.Int
            /// Multiplier for the wait time for all chunks to be received.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/chunk_wait_mult`.
            public var chunk_wait_mult: [Swift.Int32]
            /// Number of threads to execute background migration work in client.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/client_background_migration_threads`.
            public var client_background_migration_threads: Swift.Int
            /// Configuration for a cloud-based archival writer. If this config is present, the writer is enabled and
            /// writes chunk-related data based on the tracked shards.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/cloud_archival_writer`.
            public struct cloud_archival_writerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/cloud_archival_writer/value1`.
                public var value1: Components.Schemas.CloudArchivalWriterConfig?
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/cloud_archival_writer/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `cloud_archival_writerPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CloudArchivalWriterConfig? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Configuration for a cloud-based archival writer. If this config is present, the writer is enabled and
            /// writes chunk-related data based on the tracked shards.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/cloud_archival_writer`.
            public var cloud_archival_writer: Components.Schemas.RpcClientConfigResponse.cloud_archival_writerPayload?
            /// Time between running doomslug timer.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/doomslug_step_period`.
            public var doomslug_step_period: [Swift.Int]
            /// If true, transactions for the next chunk will be prepared early, right after the previous chunk's
            /// post-state is ready. This can help produce chunks faster, for high-throughput chains.
            /// The current implementation increases latency on low-load chains, which will be fixed in the future.
            /// The default is disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/enable_early_prepare_transactions`.
            public var enable_early_prepare_transactions: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/enable_multiline_logging`.
            public var enable_multiline_logging: Swift.Bool
            /// Re-export storage layer statistics as prometheus metrics.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/enable_statistics_export`.
            public var enable_statistics_export: Swift.Bool
            /// Epoch length.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/epoch_length`.
            public var epoch_length: Swift.Int
            /// Options for epoch sync.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/epoch_sync`.
            public struct epoch_syncPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/epoch_sync/value1`.
                public var value1: Components.Schemas.EpochSyncConfig
                /// Creates a new `epoch_syncPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.EpochSyncConfig) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Options for epoch sync.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/epoch_sync`.
            public var epoch_sync: Components.Schemas.RpcClientConfigResponse.epoch_syncPayload
            /// Graceful shutdown at expected block height.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/expected_shutdown`.
            public struct expected_shutdownPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/expected_shutdown/value1`.
                public var value1: Components.Schemas.MutableConfigValue
                /// Creates a new `expected_shutdownPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.MutableConfigValue) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Graceful shutdown at expected block height.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/expected_shutdown`.
            public var expected_shutdown: Components.Schemas.RpcClientConfigResponse.expected_shutdownPayload
            /// Garbage collection configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/gc`.
            public struct gcPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/gc/value1`.
                public var value1: Components.Schemas.GCConfig
                /// Creates a new `gcPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.GCConfig) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Garbage collection configuration.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/gc`.
            public var gc: Components.Schemas.RpcClientConfigResponse.gcPayload
            /// Expected increase of header head height per second during header sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/header_sync_expected_height_per_second`.
            public var header_sync_expected_height_per_second: Swift.Int
            /// How much time to wait after initial header sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/header_sync_initial_timeout`.
            public var header_sync_initial_timeout: [Swift.Int]
            /// How much time to wait after some progress is made in header sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/header_sync_progress_timeout`.
            public var header_sync_progress_timeout: [Swift.Int]
            /// How much time to wait before banning a peer in header sync if sync is too slow
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/header_sync_stall_ban_timeout`.
            public var header_sync_stall_ban_timeout: [Swift.Int]
            /// Period between logging summary information.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/log_summary_period`.
            public var log_summary_period: [Swift.Int]
            /// Enable coloring of the logs
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/log_summary_style`.
            public struct log_summary_stylePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/log_summary_style/value1`.
                public var value1: Components.Schemas.LogSummaryStyle
                /// Creates a new `log_summary_stylePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.LogSummaryStyle) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Enable coloring of the logs
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/log_summary_style`.
            public var log_summary_style: Components.Schemas.RpcClientConfigResponse.log_summary_stylePayload
            /// Maximum wait for approvals before producing block.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_block_production_delay`.
            public var max_block_production_delay: [Swift.Int]
            /// Maximum duration before skipping given height.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_block_wait_delay`.
            public var max_block_wait_delay: [Swift.Int]
            /// Max burnt gas per view method.  If present, overrides value stored in
            /// genesis file.  The value only affects the RPCs without influencing the
            /// protocol thus changing it per-node doesn’t affect the blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_gas_burnt_view`.
            public struct max_gas_burnt_viewPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_gas_burnt_view/value1`.
                public var value1: Components.Schemas.NearGas?
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_gas_burnt_view/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `max_gas_burnt_viewPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.NearGas? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Max burnt gas per view method.  If present, overrides value stored in
            /// genesis file.  The value only affects the RPCs without influencing the
            /// protocol thus changing it per-node doesn’t affect the blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/max_gas_burnt_view`.
            public var max_gas_burnt_view: Components.Schemas.RpcClientConfigResponse.max_gas_burnt_viewPayload?
            /// Minimum duration before producing block.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/min_block_production_delay`.
            public var min_block_production_delay: [Swift.Int]
            /// Minimum number of peers to start syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/min_num_peers`.
            public var min_num_peers: Swift.Int
            /// Number of block producer seats
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/num_block_producer_seats`.
            public var num_block_producer_seats: Swift.Int
            /// Maximum size of state witnesses in the OrphanStateWitnessPool.
            ///
            /// We keep only orphan witnesses which are smaller than this size.
            /// This limits the maximum memory usage of OrphanStateWitnessPool.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/orphan_state_witness_max_size`.
            public var orphan_state_witness_max_size: Swift.Int
            /// OrphanStateWitnessPool keeps instances of ChunkStateWitness which can't be processed
            /// because the previous block isn't available. The witnesses wait in the pool until the
            /// required block appears. This variable controls how many witnesses can be stored in the pool.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/orphan_state_witness_pool_size`.
            public var orphan_state_witness_pool_size: Swift.Int
            /// Limit the time of adding transactions to a chunk.
            /// A node produces a chunk by adding transactions from the transaction pool until
            /// some limit is reached. This time limit ensures that adding transactions won't take
            /// longer than the specified duration, which helps to produce the chunk quickly.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/produce_chunk_add_transactions_time_limit`.
            public var produce_chunk_add_transactions_time_limit: Swift.String
            /// Produce empty blocks, use `false` for testing.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/produce_empty_blocks`.
            public var produce_empty_blocks: Swift.Bool
            /// Determines whether client should exit if the protocol version is not supported
            /// for the next or next next epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/protocol_version_check`.
            public struct protocol_version_checkPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/protocol_version_check/value1`.
                public var value1: Components.Schemas.ProtocolVersionCheckConfig
                /// Creates a new `protocol_version_checkPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ProtocolVersionCheckConfig) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Determines whether client should exit if the protocol version is not supported
            /// for the next or next next epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/protocol_version_check`.
            public var protocol_version_check: Components.Schemas.RpcClientConfigResponse.protocol_version_checkPayload
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/resharding_config`.
            public var resharding_config: Components.Schemas.MutableConfigValue
            /// Listening rpc port for status.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/rpc_addr`.
            public var rpc_addr: Swift.String?
            /// Save observed instances of invalid ChunkStateWitness to the database in DBCol::InvalidChunkStateWitnesses.
            /// Saving invalid witnesses is useful for analysis and debugging.
            /// This option can cause extra load on the database and is not recommended for production use.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/save_invalid_witnesses`.
            public var save_invalid_witnesses: Swift.Bool
            /// Save observed instances of ChunkStateWitness to the database in DBCol::LatestChunkStateWitnesses.
            /// Saving the latest witnesses is useful for analysis and debugging.
            /// This option can cause extra load on the database and is not recommended for production use.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/save_latest_witnesses`.
            public var save_latest_witnesses: Swift.Bool
            /// save_trie_changes should be set to true iff
            /// - archive if false - non-archival nodes need trie changes to perform garbage collection
            /// - archive is true, cold_store is configured and migration to split_storage is finished - node
            /// working in split storage mode needs trie changes in order to do garbage collection on hot.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/save_trie_changes`.
            public var save_trie_changes: Swift.Bool
            /// Whether to persist transaction outcomes to disk or not.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/save_tx_outcomes`.
            public var save_tx_outcomes: Swift.Bool
            /// Whether to persist partial chunk parts for untracked shards or not.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/save_untracked_partial_chunks_parts`.
            public var save_untracked_partial_chunks_parts: Swift.Bool
            /// Skip waiting for sync (for testing or single node testnet).
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/skip_sync_wait`.
            public var skip_sync_wait: Swift.Bool
            /// Number of threads for StateRequestActor pool.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_request_server_threads`.
            public var state_request_server_threads: Swift.Int
            /// Number of seconds between state requests for view client.
            /// Throttling window for state requests (headers and parts).
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_request_throttle_period`.
            public var state_request_throttle_period: [Swift.Int]
            /// Maximum number of state requests served per throttle period
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_requests_per_throttle_period`.
            public var state_requests_per_throttle_period: Swift.Int
            /// Options for syncing state.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync`.
            public struct state_syncPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync/value1`.
                public var value1: Components.Schemas.StateSyncConfig
                /// Creates a new `state_syncPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StateSyncConfig) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Options for syncing state.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync`.
            public var state_sync: Components.Schemas.RpcClientConfigResponse.state_syncPayload
            /// Whether to use the State Sync mechanism.
            /// If disabled, the node will do Block Sync instead of State Sync.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync_enabled`.
            public var state_sync_enabled: Swift.Bool
            /// Additional waiting period after a failed request to external storage
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync_external_backoff`.
            public var state_sync_external_backoff: [Swift.Int]
            /// How long to wait for a response from centralized state sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync_external_timeout`.
            public var state_sync_external_timeout: [Swift.Int]
            /// How long to wait for a response from p2p state sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync_p2p_timeout`.
            public var state_sync_p2p_timeout: [Swift.Int]
            /// How long to wait after a failed state sync request
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/state_sync_retry_backoff`.
            public var state_sync_retry_backoff: [Swift.Int]
            /// How often to check that we are not out of sync.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/sync_check_period`.
            public var sync_check_period: [Swift.Int]
            /// Sync height threshold: below this difference in height don't start syncing.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/sync_height_threshold`.
            public var sync_height_threshold: Swift.Int
            /// Maximum number of block requests to send to peers to sync
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/sync_max_block_requests`.
            public var sync_max_block_requests: Swift.Int
            /// While syncing, how long to check for each step.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/sync_step_period`.
            public var sync_step_period: [Swift.Int]
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/tracked_shards_config`.
            public var tracked_shards_config: Components.Schemas.TrackedShardsConfig
            /// Limit of the size of per-shard transaction pool measured in bytes. If not set, the size
            /// will be unbounded.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/transaction_pool_size_limit`.
            public var transaction_pool_size_limit: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/transaction_request_handler_threads`.
            public var transaction_request_handler_threads: Swift.Int
            /// Upper bound of the byte size of contract state that is still viewable. None is no limit
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/trie_viewer_state_size_limit`.
            public var trie_viewer_state_size_limit: Swift.Int?
            /// Time to persist Accounts Id in the router without removing them.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/ttl_account_id_router`.
            public var ttl_account_id_router: [Swift.Int]
            /// If the node is not a chunk producer within that many blocks, then route
            /// to upcoming chunk producers.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/tx_routing_height_horizon`.
            public var tx_routing_height_horizon: Swift.Int
            /// Version of the binary.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/version`.
            public struct versionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/version/value1`.
                public var value1: Components.Schemas.Version
                /// Creates a new `versionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Version) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Version of the binary.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/version`.
            public var version: Components.Schemas.RpcClientConfigResponse.versionPayload
            /// Number of threads for ViewClientActor pool.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcClientConfigResponse/view_client_threads`.
            public var view_client_threads: Swift.Int
            /// Creates a new `RpcClientConfigResponse`.
            ///
            /// - Parameters:
            ///   - archive: Not clear old data, set `true` for archive nodes.
            ///   - block_fetch_horizon: Horizon at which instead of fetching block, fetch full state.
            ///   - block_header_fetch_horizon: Behind this horizon header fetch kicks in.
            ///   - block_production_tracking_delay: Duration to check for producing / skipping block.
            ///   - catchup_step_period: Time between check to perform catchup.
            ///   - chain_id: Chain id for status.
            ///   - chunk_distribution_network: Optional config for the Chunk Distribution Network feature.
            ///   - chunk_request_retry_period: Time between checking to re-request chunks.
            ///   - chunk_validation_threads: Number of threads for ChunkValidationActor pool.
            ///   - chunk_wait_mult: Multiplier for the wait time for all chunks to be received.
            ///   - client_background_migration_threads: Number of threads to execute background migration work in client.
            ///   - cloud_archival_writer: Configuration for a cloud-based archival writer. If this config is present, the writer is enabled and
            ///   - doomslug_step_period: Time between running doomslug timer.
            ///   - enable_early_prepare_transactions: If true, transactions for the next chunk will be prepared early, right after the previous chunk's
            ///   - enable_multiline_logging:
            ///   - enable_statistics_export: Re-export storage layer statistics as prometheus metrics.
            ///   - epoch_length: Epoch length.
            ///   - epoch_sync: Options for epoch sync.
            ///   - expected_shutdown: Graceful shutdown at expected block height.
            ///   - gc: Garbage collection configuration.
            ///   - header_sync_expected_height_per_second: Expected increase of header head height per second during header sync
            ///   - header_sync_initial_timeout: How much time to wait after initial header sync
            ///   - header_sync_progress_timeout: How much time to wait after some progress is made in header sync
            ///   - header_sync_stall_ban_timeout: How much time to wait before banning a peer in header sync if sync is too slow
            ///   - log_summary_period: Period between logging summary information.
            ///   - log_summary_style: Enable coloring of the logs
            ///   - max_block_production_delay: Maximum wait for approvals before producing block.
            ///   - max_block_wait_delay: Maximum duration before skipping given height.
            ///   - max_gas_burnt_view: Max burnt gas per view method.  If present, overrides value stored in
            ///   - min_block_production_delay: Minimum duration before producing block.
            ///   - min_num_peers: Minimum number of peers to start syncing.
            ///   - num_block_producer_seats: Number of block producer seats
            ///   - orphan_state_witness_max_size: Maximum size of state witnesses in the OrphanStateWitnessPool.
            ///   - orphan_state_witness_pool_size: OrphanStateWitnessPool keeps instances of ChunkStateWitness which can't be processed
            ///   - produce_chunk_add_transactions_time_limit: Limit the time of adding transactions to a chunk.
            ///   - produce_empty_blocks: Produce empty blocks, use `false` for testing.
            ///   - protocol_version_check: Determines whether client should exit if the protocol version is not supported
            ///   - resharding_config:
            ///   - rpc_addr: Listening rpc port for status.
            ///   - save_invalid_witnesses: Save observed instances of invalid ChunkStateWitness to the database in DBCol::InvalidChunkStateWitnesses.
            ///   - save_latest_witnesses: Save observed instances of ChunkStateWitness to the database in DBCol::LatestChunkStateWitnesses.
            ///   - save_trie_changes: save_trie_changes should be set to true iff
            ///   - save_tx_outcomes: Whether to persist transaction outcomes to disk or not.
            ///   - save_untracked_partial_chunks_parts: Whether to persist partial chunk parts for untracked shards or not.
            ///   - skip_sync_wait: Skip waiting for sync (for testing or single node testnet).
            ///   - state_request_server_threads: Number of threads for StateRequestActor pool.
            ///   - state_request_throttle_period: Number of seconds between state requests for view client.
            ///   - state_requests_per_throttle_period: Maximum number of state requests served per throttle period
            ///   - state_sync: Options for syncing state.
            ///   - state_sync_enabled: Whether to use the State Sync mechanism.
            ///   - state_sync_external_backoff: Additional waiting period after a failed request to external storage
            ///   - state_sync_external_timeout: How long to wait for a response from centralized state sync
            ///   - state_sync_p2p_timeout: How long to wait for a response from p2p state sync
            ///   - state_sync_retry_backoff: How long to wait after a failed state sync request
            ///   - sync_check_period: How often to check that we are not out of sync.
            ///   - sync_height_threshold: Sync height threshold: below this difference in height don't start syncing.
            ///   - sync_max_block_requests: Maximum number of block requests to send to peers to sync
            ///   - sync_step_period: While syncing, how long to check for each step.
            ///   - tracked_shards_config:
            ///   - transaction_pool_size_limit: Limit of the size of per-shard transaction pool measured in bytes. If not set, the size
            ///   - transaction_request_handler_threads:
            ///   - trie_viewer_state_size_limit: Upper bound of the byte size of contract state that is still viewable. None is no limit
            ///   - ttl_account_id_router: Time to persist Accounts Id in the router without removing them.
            ///   - tx_routing_height_horizon: If the node is not a chunk producer within that many blocks, then route
            ///   - version: Version of the binary.
            ///   - view_client_threads: Number of threads for ViewClientActor pool.
            public init(
                archive: Swift.Bool,
                block_fetch_horizon: Swift.Int,
                block_header_fetch_horizon: Swift.Int,
                block_production_tracking_delay: [Swift.Int],
                catchup_step_period: [Swift.Int],
                chain_id: Swift.String,
                chunk_distribution_network: Components.Schemas.RpcClientConfigResponse.chunk_distribution_networkPayload? = nil,
                chunk_request_retry_period: [Swift.Int],
                chunk_validation_threads: Swift.Int,
                chunk_wait_mult: [Swift.Int32],
                client_background_migration_threads: Swift.Int,
                cloud_archival_writer: Components.Schemas.RpcClientConfigResponse.cloud_archival_writerPayload? = nil,
                doomslug_step_period: [Swift.Int],
                enable_early_prepare_transactions: Swift.Bool,
                enable_multiline_logging: Swift.Bool,
                enable_statistics_export: Swift.Bool,
                epoch_length: Swift.Int,
                epoch_sync: Components.Schemas.RpcClientConfigResponse.epoch_syncPayload,
                expected_shutdown: Components.Schemas.RpcClientConfigResponse.expected_shutdownPayload,
                gc: Components.Schemas.RpcClientConfigResponse.gcPayload,
                header_sync_expected_height_per_second: Swift.Int,
                header_sync_initial_timeout: [Swift.Int],
                header_sync_progress_timeout: [Swift.Int],
                header_sync_stall_ban_timeout: [Swift.Int],
                log_summary_period: [Swift.Int],
                log_summary_style: Components.Schemas.RpcClientConfigResponse.log_summary_stylePayload,
                max_block_production_delay: [Swift.Int],
                max_block_wait_delay: [Swift.Int],
                max_gas_burnt_view: Components.Schemas.RpcClientConfigResponse.max_gas_burnt_viewPayload? = nil,
                min_block_production_delay: [Swift.Int],
                min_num_peers: Swift.Int,
                num_block_producer_seats: Swift.Int,
                orphan_state_witness_max_size: Swift.Int,
                orphan_state_witness_pool_size: Swift.Int,
                produce_chunk_add_transactions_time_limit: Swift.String,
                produce_empty_blocks: Swift.Bool,
                protocol_version_check: Components.Schemas.RpcClientConfigResponse.protocol_version_checkPayload,
                resharding_config: Components.Schemas.MutableConfigValue,
                rpc_addr: Swift.String? = nil,
                save_invalid_witnesses: Swift.Bool,
                save_latest_witnesses: Swift.Bool,
                save_trie_changes: Swift.Bool,
                save_tx_outcomes: Swift.Bool,
                save_untracked_partial_chunks_parts: Swift.Bool,
                skip_sync_wait: Swift.Bool,
                state_request_server_threads: Swift.Int,
                state_request_throttle_period: [Swift.Int],
                state_requests_per_throttle_period: Swift.Int,
                state_sync: Components.Schemas.RpcClientConfigResponse.state_syncPayload,
                state_sync_enabled: Swift.Bool,
                state_sync_external_backoff: [Swift.Int],
                state_sync_external_timeout: [Swift.Int],
                state_sync_p2p_timeout: [Swift.Int],
                state_sync_retry_backoff: [Swift.Int],
                sync_check_period: [Swift.Int],
                sync_height_threshold: Swift.Int,
                sync_max_block_requests: Swift.Int,
                sync_step_period: [Swift.Int],
                tracked_shards_config: Components.Schemas.TrackedShardsConfig,
                transaction_pool_size_limit: Swift.Int? = nil,
                transaction_request_handler_threads: Swift.Int,
                trie_viewer_state_size_limit: Swift.Int? = nil,
                ttl_account_id_router: [Swift.Int],
                tx_routing_height_horizon: Swift.Int,
                version: Components.Schemas.RpcClientConfigResponse.versionPayload,
                view_client_threads: Swift.Int
            ) {
                self.archive = archive
                self.block_fetch_horizon = block_fetch_horizon
                self.block_header_fetch_horizon = block_header_fetch_horizon
                self.block_production_tracking_delay = block_production_tracking_delay
                self.catchup_step_period = catchup_step_period
                self.chain_id = chain_id
                self.chunk_distribution_network = chunk_distribution_network
                self.chunk_request_retry_period = chunk_request_retry_period
                self.chunk_validation_threads = chunk_validation_threads
                self.chunk_wait_mult = chunk_wait_mult
                self.client_background_migration_threads = client_background_migration_threads
                self.cloud_archival_writer = cloud_archival_writer
                self.doomslug_step_period = doomslug_step_period
                self.enable_early_prepare_transactions = enable_early_prepare_transactions
                self.enable_multiline_logging = enable_multiline_logging
                self.enable_statistics_export = enable_statistics_export
                self.epoch_length = epoch_length
                self.epoch_sync = epoch_sync
                self.expected_shutdown = expected_shutdown
                self.gc = gc
                self.header_sync_expected_height_per_second = header_sync_expected_height_per_second
                self.header_sync_initial_timeout = header_sync_initial_timeout
                self.header_sync_progress_timeout = header_sync_progress_timeout
                self.header_sync_stall_ban_timeout = header_sync_stall_ban_timeout
                self.log_summary_period = log_summary_period
                self.log_summary_style = log_summary_style
                self.max_block_production_delay = max_block_production_delay
                self.max_block_wait_delay = max_block_wait_delay
                self.max_gas_burnt_view = max_gas_burnt_view
                self.min_block_production_delay = min_block_production_delay
                self.min_num_peers = min_num_peers
                self.num_block_producer_seats = num_block_producer_seats
                self.orphan_state_witness_max_size = orphan_state_witness_max_size
                self.orphan_state_witness_pool_size = orphan_state_witness_pool_size
                self.produce_chunk_add_transactions_time_limit = produce_chunk_add_transactions_time_limit
                self.produce_empty_blocks = produce_empty_blocks
                self.protocol_version_check = protocol_version_check
                self.resharding_config = resharding_config
                self.rpc_addr = rpc_addr
                self.save_invalid_witnesses = save_invalid_witnesses
                self.save_latest_witnesses = save_latest_witnesses
                self.save_trie_changes = save_trie_changes
                self.save_tx_outcomes = save_tx_outcomes
                self.save_untracked_partial_chunks_parts = save_untracked_partial_chunks_parts
                self.skip_sync_wait = skip_sync_wait
                self.state_request_server_threads = state_request_server_threads
                self.state_request_throttle_period = state_request_throttle_period
                self.state_requests_per_throttle_period = state_requests_per_throttle_period
                self.state_sync = state_sync
                self.state_sync_enabled = state_sync_enabled
                self.state_sync_external_backoff = state_sync_external_backoff
                self.state_sync_external_timeout = state_sync_external_timeout
                self.state_sync_p2p_timeout = state_sync_p2p_timeout
                self.state_sync_retry_backoff = state_sync_retry_backoff
                self.sync_check_period = sync_check_period
                self.sync_height_threshold = sync_height_threshold
                self.sync_max_block_requests = sync_max_block_requests
                self.sync_step_period = sync_step_period
                self.tracked_shards_config = tracked_shards_config
                self.transaction_pool_size_limit = transaction_pool_size_limit
                self.transaction_request_handler_threads = transaction_request_handler_threads
                self.trie_viewer_state_size_limit = trie_viewer_state_size_limit
                self.ttl_account_id_router = ttl_account_id_router
                self.tx_routing_height_horizon = tx_routing_height_horizon
                self.version = version
                self.view_client_threads = view_client_threads
            }
            public enum CodingKeys: String, CodingKey {
                case archive
                case block_fetch_horizon
                case block_header_fetch_horizon
                case block_production_tracking_delay
                case catchup_step_period
                case chain_id
                case chunk_distribution_network
                case chunk_request_retry_period
                case chunk_validation_threads
                case chunk_wait_mult
                case client_background_migration_threads
                case cloud_archival_writer
                case doomslug_step_period
                case enable_early_prepare_transactions
                case enable_multiline_logging
                case enable_statistics_export
                case epoch_length
                case epoch_sync
                case expected_shutdown
                case gc
                case header_sync_expected_height_per_second
                case header_sync_initial_timeout
                case header_sync_progress_timeout
                case header_sync_stall_ban_timeout
                case log_summary_period
                case log_summary_style
                case max_block_production_delay
                case max_block_wait_delay
                case max_gas_burnt_view
                case min_block_production_delay
                case min_num_peers
                case num_block_producer_seats
                case orphan_state_witness_max_size
                case orphan_state_witness_pool_size
                case produce_chunk_add_transactions_time_limit
                case produce_empty_blocks
                case protocol_version_check
                case resharding_config
                case rpc_addr
                case save_invalid_witnesses
                case save_latest_witnesses
                case save_trie_changes
                case save_tx_outcomes
                case save_untracked_partial_chunks_parts
                case skip_sync_wait
                case state_request_server_threads
                case state_request_throttle_period
                case state_requests_per_throttle_period
                case state_sync
                case state_sync_enabled
                case state_sync_external_backoff
                case state_sync_external_timeout
                case state_sync_p2p_timeout
                case state_sync_retry_backoff
                case sync_check_period
                case sync_height_threshold
                case sync_max_block_requests
                case sync_step_period
                case tracked_shards_config
                case transaction_pool_size_limit
                case transaction_request_handler_threads
                case trie_viewer_state_size_limit
                case ttl_account_id_router
                case tx_routing_height_horizon
                case version
                case view_client_threads
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest`.
        public struct RpcCongestionLevelRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value1/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value1/shard_id`.
                public var shard_id: Components.Schemas.ShardId
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                ///   - shard_id:
                public init(
                    block_id: Components.Schemas.BlockId,
                    shard_id: Components.Schemas.ShardId
                ) {
                    self.block_id = block_id
                    self.shard_id = shard_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                    case shard_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value1`.
            public var value1: Components.Schemas.RpcCongestionLevelRequest.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value2/chunk_id`.
                public var chunk_id: Components.Schemas.CryptoHash
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - chunk_id:
                public init(chunk_id: Components.Schemas.CryptoHash) {
                    self.chunk_id = chunk_id
                }
                public enum CodingKeys: String, CodingKey {
                    case chunk_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelRequest/value2`.
            public var value2: Components.Schemas.RpcCongestionLevelRequest.Value2Payload?
            /// Creates a new `RpcCongestionLevelRequest`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RpcCongestionLevelRequest.Value1Payload? = nil,
                value2: Components.Schemas.RpcCongestionLevelRequest.Value2Payload? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelResponse`.
        public struct RpcCongestionLevelResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcCongestionLevelResponse/congestion_level`.
            public var congestion_level: Swift.Double
            /// Creates a new `RpcCongestionLevelResponse`.
            ///
            /// - Parameters:
            ///   - congestion_level:
            public init(congestion_level: Swift.Double) {
                self.congestion_level = congestion_level
            }
            public enum CodingKeys: String, CodingKey {
                case congestion_level
            }
        }
        /// This struct may be returned from JSON RPC server in case of error
        /// It is expected that this struct has impl From<_> all other RPC errors
        /// like [RpcBlockError](crate::types::blocks::RpcBlockError)
        ///
        /// - Remark: Generated from `#/components/schemas/RpcError`.
        @frozen public enum RpcError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcError/case1/cause`.
                public var cause: Components.Schemas.RpcRequestValidationErrorKind
                /// - Remark: Generated from `#/components/schemas/RpcError/case1/name`.
                @frozen public enum namePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case REQUEST_VALIDATION_ERROR = "REQUEST_VALIDATION_ERROR"
                }
                /// - Remark: Generated from `#/components/schemas/RpcError/case1/name`.
                public var name: Components.Schemas.RpcError.Case1Payload.namePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - cause:
                ///   - name:
                public init(
                    cause: Components.Schemas.RpcRequestValidationErrorKind,
                    name: Components.Schemas.RpcError.Case1Payload.namePayload
                ) {
                    self.cause = cause
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cause
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcError/case1`.
            case case1(Components.Schemas.RpcError.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcError/case2/cause`.
                public var cause: OpenAPIRuntime.OpenAPIValueContainer
                /// - Remark: Generated from `#/components/schemas/RpcError/case2/name`.
                @frozen public enum namePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case HANDLER_ERROR = "HANDLER_ERROR"
                }
                /// - Remark: Generated from `#/components/schemas/RpcError/case2/name`.
                public var name: Components.Schemas.RpcError.Case2Payload.namePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - cause:
                ///   - name:
                public init(
                    cause: OpenAPIRuntime.OpenAPIValueContainer,
                    name: Components.Schemas.RpcError.Case2Payload.namePayload
                ) {
                    self.cause = cause
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cause
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcError/case2`.
            case case2(Components.Schemas.RpcError.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcError/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcError/case3/cause`.
                public var cause: OpenAPIRuntime.OpenAPIValueContainer
                /// - Remark: Generated from `#/components/schemas/RpcError/case3/name`.
                @frozen public enum namePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case INTERNAL_ERROR = "INTERNAL_ERROR"
                }
                /// - Remark: Generated from `#/components/schemas/RpcError/case3/name`.
                public var name: Components.Schemas.RpcError.Case3Payload.namePayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - cause:
                ///   - name:
                public init(
                    cause: OpenAPIRuntime.OpenAPIValueContainer,
                    name: Components.Schemas.RpcError.Case3Payload.namePayload
                ) {
                    self.cause = cause
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case cause
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcError/case3`.
            case case3(Components.Schemas.RpcError.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcGasPriceRequest`.
        public struct RpcGasPriceRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcGasPriceRequest/block_id`.
            public struct block_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcGasPriceRequest/block_id/value1`.
                public var value1: Components.Schemas.BlockId?
                /// - Remark: Generated from `#/components/schemas/RpcGasPriceRequest/block_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `block_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.BlockId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcGasPriceRequest/block_id`.
            public var block_id: Components.Schemas.RpcGasPriceRequest.block_idPayload?
            /// Creates a new `RpcGasPriceRequest`.
            ///
            /// - Parameters:
            ///   - block_id:
            public init(block_id: Components.Schemas.RpcGasPriceRequest.block_idPayload? = nil) {
                self.block_id = block_id
            }
            public enum CodingKeys: String, CodingKey {
                case block_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcGasPriceResponse`.
        public struct RpcGasPriceResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcGasPriceResponse/gas_price`.
            public var gas_price: Components.Schemas.NearToken
            /// Creates a new `RpcGasPriceResponse`.
            ///
            /// - Parameters:
            ///   - gas_price:
            public init(gas_price: Components.Schemas.NearToken) {
                self.gas_price = gas_price
            }
            public enum CodingKeys: String, CodingKey {
                case gas_price
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcHealthRequest`.
        public typealias RpcHealthRequest = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/RpcHealthResponse`.
        public typealias RpcHealthResponse = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/RpcKnownProducer`.
        public struct RpcKnownProducer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcKnownProducer/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/RpcKnownProducer/addr`.
            public var addr: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RpcKnownProducer/peer_id`.
            public var peer_id: Components.Schemas.PeerId
            /// Creates a new `RpcKnownProducer`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - addr:
            ///   - peer_id:
            public init(
                account_id: Components.Schemas.AccountId,
                addr: Swift.String? = nil,
                peer_id: Components.Schemas.PeerId
            ) {
                self.account_id = account_id
                self.addr = addr
                self.peer_id = peer_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case addr
                case peer_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofRequest`.
        public struct RpcLightClientBlockProofRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofRequest/block_hash`.
            public var block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofRequest/light_client_head`.
            public var light_client_head: Components.Schemas.CryptoHash
            /// Creates a new `RpcLightClientBlockProofRequest`.
            ///
            /// - Parameters:
            ///   - block_hash:
            ///   - light_client_head:
            public init(
                block_hash: Components.Schemas.CryptoHash,
                light_client_head: Components.Schemas.CryptoHash
            ) {
                self.block_hash = block_hash
                self.light_client_head = light_client_head
            }
            public enum CodingKeys: String, CodingKey {
                case block_hash
                case light_client_head
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofResponse`.
        public struct RpcLightClientBlockProofResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofResponse/block_header_lite`.
            public var block_header_lite: Components.Schemas.LightClientBlockLiteView
            /// - Remark: Generated from `#/components/schemas/RpcLightClientBlockProofResponse/block_proof`.
            public var block_proof: [Components.Schemas.MerklePathItem]
            /// Creates a new `RpcLightClientBlockProofResponse`.
            ///
            /// - Parameters:
            ///   - block_header_lite:
            ///   - block_proof:
            public init(
                block_header_lite: Components.Schemas.LightClientBlockLiteView,
                block_proof: [Components.Schemas.MerklePathItem]
            ) {
                self.block_header_lite = block_header_lite
                self.block_proof = block_proof
            }
            public enum CodingKeys: String, CodingKey {
                case block_header_lite
                case block_proof
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest`.
        @frozen public enum RpcLightClientExecutionProofRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1/sender_id`.
                public var sender_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1/transaction_hash`.
                public var transaction_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case transaction = "transaction"
                }
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1/type`.
                public var _type: Components.Schemas.RpcLightClientExecutionProofRequest.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - sender_id:
                ///   - transaction_hash:
                ///   - _type:
                public init(
                    sender_id: Components.Schemas.AccountId,
                    transaction_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.RpcLightClientExecutionProofRequest.Case1Payload._typePayload
                ) {
                    self.sender_id = sender_id
                    self.transaction_hash = transaction_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case sender_id
                    case transaction_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case1`.
            case case1(Components.Schemas.RpcLightClientExecutionProofRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2/receipt_id`.
                public var receipt_id: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2/receiver_id`.
                public var receiver_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case receipt = "receipt"
                }
                /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2/type`.
                public var _type: Components.Schemas.RpcLightClientExecutionProofRequest.Case2Payload._typePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - receipt_id:
                ///   - receiver_id:
                ///   - _type:
                public init(
                    receipt_id: Components.Schemas.CryptoHash,
                    receiver_id: Components.Schemas.AccountId,
                    _type: Components.Schemas.RpcLightClientExecutionProofRequest.Case2Payload._typePayload
                ) {
                    self.receipt_id = receipt_id
                    self.receiver_id = receiver_id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case receipt_id
                    case receiver_id
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofRequest/case2`.
            case case2(Components.Schemas.RpcLightClientExecutionProofRequest.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofResponse`.
        public struct RpcLightClientExecutionProofResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofResponse/block_header_lite`.
            public var block_header_lite: Components.Schemas.LightClientBlockLiteView
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofResponse/block_proof`.
            public var block_proof: [Components.Schemas.MerklePathItem]
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofResponse/outcome_proof`.
            public var outcome_proof: Components.Schemas.ExecutionOutcomeWithIdView
            /// - Remark: Generated from `#/components/schemas/RpcLightClientExecutionProofResponse/outcome_root_proof`.
            public var outcome_root_proof: [Components.Schemas.MerklePathItem]
            /// Creates a new `RpcLightClientExecutionProofResponse`.
            ///
            /// - Parameters:
            ///   - block_header_lite:
            ///   - block_proof:
            ///   - outcome_proof:
            ///   - outcome_root_proof:
            public init(
                block_header_lite: Components.Schemas.LightClientBlockLiteView,
                block_proof: [Components.Schemas.MerklePathItem],
                outcome_proof: Components.Schemas.ExecutionOutcomeWithIdView,
                outcome_root_proof: [Components.Schemas.MerklePathItem]
            ) {
                self.block_header_lite = block_header_lite
                self.block_proof = block_proof
                self.outcome_proof = outcome_proof
                self.outcome_root_proof = outcome_root_proof
            }
            public enum CodingKeys: String, CodingKey {
                case block_header_lite
                case block_proof
                case outcome_proof
                case outcome_root_proof
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockRequest`.
        public struct RpcLightClientNextBlockRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockRequest/last_block_hash`.
            public var last_block_hash: Components.Schemas.CryptoHash
            /// Creates a new `RpcLightClientNextBlockRequest`.
            ///
            /// - Parameters:
            ///   - last_block_hash:
            public init(last_block_hash: Components.Schemas.CryptoHash) {
                self.last_block_hash = last_block_hash
            }
            public enum CodingKeys: String, CodingKey {
                case last_block_hash
            }
        }
        /// A state for the current head of a light client. More info [here](https://nomicon.io/ChainSpec/LightClient).
        ///
        /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse`.
        public struct RpcLightClientNextBlockResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/approvals_after_nextPayload`.
            public struct approvals_after_nextPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/approvals_after_nextPayload/value1`.
                public var value1: Components.Schemas.Signature?
                /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/approvals_after_nextPayload/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `approvals_after_nextPayloadPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.Signature? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/approvals_after_next`.
            public typealias approvals_after_nextPayload = [Components.Schemas.RpcLightClientNextBlockResponse.approvals_after_nextPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/approvals_after_next`.
            public var approvals_after_next: Components.Schemas.RpcLightClientNextBlockResponse.approvals_after_nextPayload?
            /// Inner part of the block header that gets hashed, split into two parts, one that is sent
            ///    to light clients, and the rest
            ///
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/inner_lite`.
            public struct inner_litePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/inner_lite/value1`.
                public var value1: Components.Schemas.BlockHeaderInnerLiteView
                /// Creates a new `inner_litePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.BlockHeaderInnerLiteView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Inner part of the block header that gets hashed, split into two parts, one that is sent
            ///    to light clients, and the rest
            ///
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/inner_lite`.
            public var inner_lite: Components.Schemas.RpcLightClientNextBlockResponse.inner_litePayload?
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/inner_rest_hash`.
            public var inner_rest_hash: Components.Schemas.CryptoHash?
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/next_block_inner_hash`.
            public var next_block_inner_hash: Components.Schemas.CryptoHash?
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/next_bps`.
            public var next_bps: [Components.Schemas.ValidatorStakeView]?
            /// - Remark: Generated from `#/components/schemas/RpcLightClientNextBlockResponse/prev_block_hash`.
            public var prev_block_hash: Components.Schemas.CryptoHash?
            /// Creates a new `RpcLightClientNextBlockResponse`.
            ///
            /// - Parameters:
            ///   - approvals_after_next:
            ///   - inner_lite: Inner part of the block header that gets hashed, split into two parts, one that is sent
            ///   - inner_rest_hash:
            ///   - next_block_inner_hash:
            ///   - next_bps:
            ///   - prev_block_hash:
            public init(
                approvals_after_next: Components.Schemas.RpcLightClientNextBlockResponse.approvals_after_nextPayload? = nil,
                inner_lite: Components.Schemas.RpcLightClientNextBlockResponse.inner_litePayload? = nil,
                inner_rest_hash: Components.Schemas.CryptoHash? = nil,
                next_block_inner_hash: Components.Schemas.CryptoHash? = nil,
                next_bps: [Components.Schemas.ValidatorStakeView]? = nil,
                prev_block_hash: Components.Schemas.CryptoHash? = nil
            ) {
                self.approvals_after_next = approvals_after_next
                self.inner_lite = inner_lite
                self.inner_rest_hash = inner_rest_hash
                self.next_block_inner_hash = next_block_inner_hash
                self.next_bps = next_bps
                self.prev_block_hash = prev_block_hash
            }
            public enum CodingKeys: String, CodingKey {
                case approvals_after_next
                case inner_lite
                case inner_rest_hash
                case next_block_inner_hash
                case next_bps
                case prev_block_hash
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcMaintenanceWindowsRequest`.
        public struct RpcMaintenanceWindowsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcMaintenanceWindowsRequest/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// Creates a new `RpcMaintenanceWindowsRequest`.
            ///
            /// - Parameters:
            ///   - account_id:
            public init(account_id: Components.Schemas.AccountId) {
                self.account_id = account_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoRequest`.
        public typealias RpcNetworkInfoRequest = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse`.
        public struct RpcNetworkInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/active_peers`.
            public var active_peers: [Components.Schemas.RpcPeerInfo]
            /// Accounts of known block and chunk producers from routing table.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/known_producers`.
            public var known_producers: [Components.Schemas.RpcKnownProducer]
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/num_active_peers`.
            public var num_active_peers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/peer_max_count`.
            public var peer_max_count: Swift.Int
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/received_bytes_per_sec`.
            public var received_bytes_per_sec: Swift.Int
            /// - Remark: Generated from `#/components/schemas/RpcNetworkInfoResponse/sent_bytes_per_sec`.
            public var sent_bytes_per_sec: Swift.Int
            /// Creates a new `RpcNetworkInfoResponse`.
            ///
            /// - Parameters:
            ///   - active_peers:
            ///   - known_producers: Accounts of known block and chunk producers from routing table.
            ///   - num_active_peers:
            ///   - peer_max_count:
            ///   - received_bytes_per_sec:
            ///   - sent_bytes_per_sec:
            public init(
                active_peers: [Components.Schemas.RpcPeerInfo],
                known_producers: [Components.Schemas.RpcKnownProducer],
                num_active_peers: Swift.Int,
                peer_max_count: Swift.Int,
                received_bytes_per_sec: Swift.Int,
                sent_bytes_per_sec: Swift.Int
            ) {
                self.active_peers = active_peers
                self.known_producers = known_producers
                self.num_active_peers = num_active_peers
                self.peer_max_count = peer_max_count
                self.received_bytes_per_sec = received_bytes_per_sec
                self.sent_bytes_per_sec = sent_bytes_per_sec
            }
            public enum CodingKeys: String, CodingKey {
                case active_peers
                case known_producers
                case num_active_peers
                case peer_max_count
                case received_bytes_per_sec
                case sent_bytes_per_sec
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcPeerInfo`.
        public struct RpcPeerInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/account_id`.
            public struct account_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/account_id/value1`.
                public var value1: Components.Schemas.AccountId?
                /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/account_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `account_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AccountId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/account_id`.
            public var account_id: Components.Schemas.RpcPeerInfo.account_idPayload?
            /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/addr`.
            public var addr: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RpcPeerInfo/id`.
            public var id: Components.Schemas.PeerId
            /// Creates a new `RpcPeerInfo`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - addr:
            ///   - id:
            public init(
                account_id: Components.Schemas.RpcPeerInfo.account_idPayload? = nil,
                addr: Swift.String? = nil,
                id: Components.Schemas.PeerId
            ) {
                self.account_id = account_id
                self.addr = addr
                self.id = id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case addr
                case id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest`.
        @frozen public enum RpcProtocolConfigRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case1/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                public init(block_id: Components.Schemas.BlockId) {
                    self.block_id = block_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case1`.
            case case1(Components.Schemas.RpcProtocolConfigRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case2/finality`.
                public var finality: Components.Schemas.Finality
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - finality:
                public init(finality: Components.Schemas.Finality) {
                    self.finality = finality
                }
                public enum CodingKeys: String, CodingKey {
                    case finality
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case2`.
            case case2(Components.Schemas.RpcProtocolConfigRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case3/sync_checkpoint`.
                public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - sync_checkpoint:
                public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                    self.sync_checkpoint = sync_checkpoint
                }
                public enum CodingKeys: String, CodingKey {
                    case sync_checkpoint
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigRequest/case3`.
            case case3(Components.Schemas.RpcProtocolConfigRequest.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse`.
        public struct RpcProtocolConfigResponse: Codable, Hashable, Sendable {
            /// Expected number of hidden validators per shard.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/avg_hidden_validator_seats_per_shard`.
            public var avg_hidden_validator_seats_per_shard: [Swift.Int]
            /// Threshold for kicking out block producers, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/block_producer_kickout_threshold`.
            public var block_producer_kickout_threshold: Swift.Int
            /// ID of the blockchain. This must be unique for every blockchain.
            /// If your testnet blockchains do not have unique chain IDs, you will have a bad time.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/chain_id`.
            public var chain_id: Swift.String
            /// Threshold for kicking out chunk producers, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/chunk_producer_kickout_threshold`.
            public var chunk_producer_kickout_threshold: Swift.Int
            /// Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/chunk_validator_only_kickout_threshold`.
            public var chunk_validator_only_kickout_threshold: Swift.Int
            /// Enable dynamic re-sharding.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/dynamic_resharding`.
            public var dynamic_resharding: Swift.Bool
            /// Epoch length counted in block heights.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/epoch_length`.
            public var epoch_length: Swift.Int
            /// Fishermen stake threshold.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/fishermen_threshold`.
            public struct fishermen_thresholdPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/fishermen_threshold/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `fishermen_thresholdPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Fishermen stake threshold.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/fishermen_threshold`.
            public var fishermen_threshold: Components.Schemas.RpcProtocolConfigResponse.fishermen_thresholdPayload
            /// Initial gas limit.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/gas_limit`.
            public struct gas_limitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/gas_limit/value1`.
                public var value1: Components.Schemas.NearGas
                /// Creates a new `gas_limitPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearGas) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Initial gas limit.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/gas_limit`.
            public var gas_limit: Components.Schemas.RpcProtocolConfigResponse.gas_limitPayload
            /// Gas price adjustment rate
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/gas_price_adjustment_rate`.
            public var gas_price_adjustment_rate: [Swift.Int32]
            /// Height of genesis block.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/genesis_height`.
            public var genesis_height: Swift.Int
            /// Official time of blockchain start.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/genesis_time`.
            public var genesis_time: Foundation.Date
            /// Maximum gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/max_gas_price`.
            public struct max_gas_pricePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/max_gas_price/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `max_gas_pricePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Maximum gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/max_gas_price`.
            public var max_gas_price: Components.Schemas.RpcProtocolConfigResponse.max_gas_pricePayload
            /// Maximum inflation on the total supply every epoch.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/max_inflation_rate`.
            public var max_inflation_rate: [Swift.Int32]
            /// Max stake percentage of the validators we will kick out.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/max_kickout_stake_perc`.
            public var max_kickout_stake_perc: Swift.Int
            /// Minimum gas price. It is also the initial gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/min_gas_price`.
            public struct min_gas_pricePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/min_gas_price/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `min_gas_pricePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Minimum gas price. It is also the initial gas price.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/min_gas_price`.
            public var min_gas_price: Components.Schemas.RpcProtocolConfigResponse.min_gas_pricePayload
            /// The minimum stake required for staking is last seat price divided by this number.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/minimum_stake_divisor`.
            public var minimum_stake_divisor: Swift.Int
            /// The lowest ratio s/s_total any block producer can have.
            /// See <https://github.com/near/NEPs/pull/167> for details
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/minimum_stake_ratio`.
            public var minimum_stake_ratio: [Swift.Int32]
            /// The minimum number of validators each shard must have
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/minimum_validators_per_shard`.
            public var minimum_validators_per_shard: Swift.Int
            /// Number of block producer seats at genesis.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/num_block_producer_seats`.
            public var num_block_producer_seats: Swift.Int
            /// Defines number of shards and number of block producer seats per each shard at genesis.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/num_block_producer_seats_per_shard`.
            public var num_block_producer_seats_per_shard: [Swift.Int]
            /// Expected number of blocks per year
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/num_blocks_per_year`.
            public var num_blocks_per_year: Swift.Int
            /// Online maximum threshold above which validator gets full reward.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/online_max_threshold`.
            public var online_max_threshold: [Swift.Int32]
            /// Online minimum threshold below which validator doesn't receive reward.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/online_min_threshold`.
            public var online_min_threshold: [Swift.Int32]
            /// Protocol treasury rate
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_reward_rate`.
            public var protocol_reward_rate: [Swift.Int32]
            /// Protocol treasury account
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_treasury_account`.
            public struct protocol_treasury_accountPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_treasury_account/value1`.
                public var value1: Components.Schemas.AccountId
                /// Creates a new `protocol_treasury_accountPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountId) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Protocol treasury account
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_treasury_account`.
            public var protocol_treasury_account: Components.Schemas.RpcProtocolConfigResponse.protocol_treasury_accountPayload
            /// Threshold of stake that needs to indicate that they ready for upgrade.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_upgrade_stake_threshold`.
            public var protocol_upgrade_stake_threshold: [Swift.Int32]
            /// Current Protocol Version
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/protocol_version`.
            public var protocol_version: Swift.Int
            /// Runtime configuration (mostly economics constants).
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/runtime_config`.
            public struct runtime_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/runtime_config/value1`.
                public var value1: Components.Schemas.RuntimeConfigView
                /// Creates a new `runtime_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.RuntimeConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Runtime configuration (mostly economics constants).
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/runtime_config`.
            public var runtime_config: Components.Schemas.RpcProtocolConfigResponse.runtime_configPayload
            /// Layout information regarding how to split accounts to shards
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/shard_layout`.
            public struct shard_layoutPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/shard_layout/value1`.
                public var value1: Components.Schemas.ShardLayout
                /// Creates a new `shard_layoutPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ShardLayout) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Layout information regarding how to split accounts to shards
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/shard_layout`.
            public var shard_layout: Components.Schemas.RpcProtocolConfigResponse.shard_layoutPayload
            /// If true, shuffle the chunk producers across shards. In other words, if
            /// the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents
            /// the set of chunk producers for shard `i`, if this flag were true, the
            /// shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/shuffle_shard_assignment_for_chunk_producers`.
            public var shuffle_shard_assignment_for_chunk_producers: Swift.Bool
            /// Number of target chunk validator mandates for each shard.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/target_validator_mandates_per_shard`.
            public var target_validator_mandates_per_shard: Swift.Int
            /// Number of blocks for which a given transaction is valid
            ///
            /// - Remark: Generated from `#/components/schemas/RpcProtocolConfigResponse/transaction_validity_period`.
            public var transaction_validity_period: Swift.Int
            /// Creates a new `RpcProtocolConfigResponse`.
            ///
            /// - Parameters:
            ///   - avg_hidden_validator_seats_per_shard: Expected number of hidden validators per shard.
            ///   - block_producer_kickout_threshold: Threshold for kicking out block producers, between 0 and 100.
            ///   - chain_id: ID of the blockchain. This must be unique for every blockchain.
            ///   - chunk_producer_kickout_threshold: Threshold for kicking out chunk producers, between 0 and 100.
            ///   - chunk_validator_only_kickout_threshold: Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
            ///   - dynamic_resharding: Enable dynamic re-sharding.
            ///   - epoch_length: Epoch length counted in block heights.
            ///   - fishermen_threshold: Fishermen stake threshold.
            ///   - gas_limit: Initial gas limit.
            ///   - gas_price_adjustment_rate: Gas price adjustment rate
            ///   - genesis_height: Height of genesis block.
            ///   - genesis_time: Official time of blockchain start.
            ///   - max_gas_price: Maximum gas price.
            ///   - max_inflation_rate: Maximum inflation on the total supply every epoch.
            ///   - max_kickout_stake_perc: Max stake percentage of the validators we will kick out.
            ///   - min_gas_price: Minimum gas price. It is also the initial gas price.
            ///   - minimum_stake_divisor: The minimum stake required for staking is last seat price divided by this number.
            ///   - minimum_stake_ratio: The lowest ratio s/s_total any block producer can have.
            ///   - minimum_validators_per_shard: The minimum number of validators each shard must have
            ///   - num_block_producer_seats: Number of block producer seats at genesis.
            ///   - num_block_producer_seats_per_shard: Defines number of shards and number of block producer seats per each shard at genesis.
            ///   - num_blocks_per_year: Expected number of blocks per year
            ///   - online_max_threshold: Online maximum threshold above which validator gets full reward.
            ///   - online_min_threshold: Online minimum threshold below which validator doesn't receive reward.
            ///   - protocol_reward_rate: Protocol treasury rate
            ///   - protocol_treasury_account: Protocol treasury account
            ///   - protocol_upgrade_stake_threshold: Threshold of stake that needs to indicate that they ready for upgrade.
            ///   - protocol_version: Current Protocol Version
            ///   - runtime_config: Runtime configuration (mostly economics constants).
            ///   - shard_layout: Layout information regarding how to split accounts to shards
            ///   - shuffle_shard_assignment_for_chunk_producers: If true, shuffle the chunk producers across shards. In other words, if
            ///   - target_validator_mandates_per_shard: Number of target chunk validator mandates for each shard.
            ///   - transaction_validity_period: Number of blocks for which a given transaction is valid
            public init(
                avg_hidden_validator_seats_per_shard: [Swift.Int],
                block_producer_kickout_threshold: Swift.Int,
                chain_id: Swift.String,
                chunk_producer_kickout_threshold: Swift.Int,
                chunk_validator_only_kickout_threshold: Swift.Int,
                dynamic_resharding: Swift.Bool,
                epoch_length: Swift.Int,
                fishermen_threshold: Components.Schemas.RpcProtocolConfigResponse.fishermen_thresholdPayload,
                gas_limit: Components.Schemas.RpcProtocolConfigResponse.gas_limitPayload,
                gas_price_adjustment_rate: [Swift.Int32],
                genesis_height: Swift.Int,
                genesis_time: Foundation.Date,
                max_gas_price: Components.Schemas.RpcProtocolConfigResponse.max_gas_pricePayload,
                max_inflation_rate: [Swift.Int32],
                max_kickout_stake_perc: Swift.Int,
                min_gas_price: Components.Schemas.RpcProtocolConfigResponse.min_gas_pricePayload,
                minimum_stake_divisor: Swift.Int,
                minimum_stake_ratio: [Swift.Int32],
                minimum_validators_per_shard: Swift.Int,
                num_block_producer_seats: Swift.Int,
                num_block_producer_seats_per_shard: [Swift.Int],
                num_blocks_per_year: Swift.Int,
                online_max_threshold: [Swift.Int32],
                online_min_threshold: [Swift.Int32],
                protocol_reward_rate: [Swift.Int32],
                protocol_treasury_account: Components.Schemas.RpcProtocolConfigResponse.protocol_treasury_accountPayload,
                protocol_upgrade_stake_threshold: [Swift.Int32],
                protocol_version: Swift.Int,
                runtime_config: Components.Schemas.RpcProtocolConfigResponse.runtime_configPayload,
                shard_layout: Components.Schemas.RpcProtocolConfigResponse.shard_layoutPayload,
                shuffle_shard_assignment_for_chunk_producers: Swift.Bool,
                target_validator_mandates_per_shard: Swift.Int,
                transaction_validity_period: Swift.Int
            ) {
                self.avg_hidden_validator_seats_per_shard = avg_hidden_validator_seats_per_shard
                self.block_producer_kickout_threshold = block_producer_kickout_threshold
                self.chain_id = chain_id
                self.chunk_producer_kickout_threshold = chunk_producer_kickout_threshold
                self.chunk_validator_only_kickout_threshold = chunk_validator_only_kickout_threshold
                self.dynamic_resharding = dynamic_resharding
                self.epoch_length = epoch_length
                self.fishermen_threshold = fishermen_threshold
                self.gas_limit = gas_limit
                self.gas_price_adjustment_rate = gas_price_adjustment_rate
                self.genesis_height = genesis_height
                self.genesis_time = genesis_time
                self.max_gas_price = max_gas_price
                self.max_inflation_rate = max_inflation_rate
                self.max_kickout_stake_perc = max_kickout_stake_perc
                self.min_gas_price = min_gas_price
                self.minimum_stake_divisor = minimum_stake_divisor
                self.minimum_stake_ratio = minimum_stake_ratio
                self.minimum_validators_per_shard = minimum_validators_per_shard
                self.num_block_producer_seats = num_block_producer_seats
                self.num_block_producer_seats_per_shard = num_block_producer_seats_per_shard
                self.num_blocks_per_year = num_blocks_per_year
                self.online_max_threshold = online_max_threshold
                self.online_min_threshold = online_min_threshold
                self.protocol_reward_rate = protocol_reward_rate
                self.protocol_treasury_account = protocol_treasury_account
                self.protocol_upgrade_stake_threshold = protocol_upgrade_stake_threshold
                self.protocol_version = protocol_version
                self.runtime_config = runtime_config
                self.shard_layout = shard_layout
                self.shuffle_shard_assignment_for_chunk_producers = shuffle_shard_assignment_for_chunk_producers
                self.target_validator_mandates_per_shard = target_validator_mandates_per_shard
                self.transaction_validity_period = transaction_validity_period
            }
            public enum CodingKeys: String, CodingKey {
                case avg_hidden_validator_seats_per_shard
                case block_producer_kickout_threshold
                case chain_id
                case chunk_producer_kickout_threshold
                case chunk_validator_only_kickout_threshold
                case dynamic_resharding
                case epoch_length
                case fishermen_threshold
                case gas_limit
                case gas_price_adjustment_rate
                case genesis_height
                case genesis_time
                case max_gas_price
                case max_inflation_rate
                case max_kickout_stake_perc
                case min_gas_price
                case minimum_stake_divisor
                case minimum_stake_ratio
                case minimum_validators_per_shard
                case num_block_producer_seats
                case num_block_producer_seats_per_shard
                case num_blocks_per_year
                case online_max_threshold
                case online_min_threshold
                case protocol_reward_rate
                case protocol_treasury_account
                case protocol_upgrade_stake_threshold
                case protocol_version
                case runtime_config
                case shard_layout
                case shuffle_shard_assignment_for_chunk_producers
                case target_validator_mandates_per_shard
                case transaction_validity_period
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcQueryRequest`.
        @frozen public enum RpcQueryRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case1Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_account = "view_account"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case1Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case1Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case1Payload.Value2Payload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case1Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case1Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case1`.
            case case1(Components.Schemas.RpcQueryRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case2Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_code = "view_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case2Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case2Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case2Payload.Value2Payload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case2Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case2Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case2`.
            case case2(Components.Schemas.RpcQueryRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case3Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2/include_proof`.
                    public var include_proof: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2/prefix_base64`.
                    public var prefix_base64: Components.Schemas.StoreKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_state = "view_state"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case3Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - include_proof:
                    ///   - prefix_base64:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        include_proof: Swift.Bool? = nil,
                        prefix_base64: Components.Schemas.StoreKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case3Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.include_proof = include_proof
                        self.prefix_base64 = prefix_base64
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case include_proof
                        case prefix_base64
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case3Payload.Value2Payload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case3Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case3Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case3`.
            case case3(Components.Schemas.RpcQueryRequest.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case4Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key = "view_access_key"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case4Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case4Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case4Payload.Value2Payload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case4Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case4Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case4`.
            case case4(Components.Schemas.RpcQueryRequest.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case5Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key_list = "view_access_key_list"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case5Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case5Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case5Payload.Value2Payload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case5Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case5Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case5`.
            case case5(Components.Schemas.RpcQueryRequest.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case6Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2/args_base64`.
                    public var args_base64: Components.Schemas.FunctionArgs
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2/method_name`.
                    public var method_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case call_function = "call_function"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case6Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - args_base64:
                    ///   - method_name:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        args_base64: Components.Schemas.FunctionArgs,
                        method_name: Swift.String,
                        request_type: Components.Schemas.RpcQueryRequest.Case6Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.args_base64 = args_base64
                        self.method_name = method_name
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case args_base64
                        case method_name
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case6Payload.Value2Payload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case6Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case6Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case6`.
            case case6(Components.Schemas.RpcQueryRequest.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case7Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value2/code_hash`.
                    public var code_hash: Components.Schemas.CryptoHash
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code = "view_global_contract_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case7Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - code_hash:
                    ///   - request_type:
                    public init(
                        code_hash: Components.Schemas.CryptoHash,
                        request_type: Components.Schemas.RpcQueryRequest.Case7Payload.Value2Payload.request_typePayload
                    ) {
                        self.code_hash = code_hash
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code_hash
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case7Payload.Value2Payload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case7Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case7Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case7`.
            case case7(Components.Schemas.RpcQueryRequest.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case8Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code_by_account_id = "view_global_contract_code_by_account_id"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case8Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case8Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case8Payload.Value2Payload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case8Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case8Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case8`.
            case case8(Components.Schemas.RpcQueryRequest.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case9Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_account = "view_account"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case9Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case9Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case9Payload.Value2Payload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case9Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case9Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case9`.
            case case9(Components.Schemas.RpcQueryRequest.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case10Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_code = "view_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case10Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case10Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case10Payload.Value2Payload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case10Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case10Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case10`.
            case case10(Components.Schemas.RpcQueryRequest.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case11Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2/include_proof`.
                    public var include_proof: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2/prefix_base64`.
                    public var prefix_base64: Components.Schemas.StoreKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_state = "view_state"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case11Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - include_proof:
                    ///   - prefix_base64:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        include_proof: Swift.Bool? = nil,
                        prefix_base64: Components.Schemas.StoreKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case11Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.include_proof = include_proof
                        self.prefix_base64 = prefix_base64
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case include_proof
                        case prefix_base64
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case11Payload.Value2Payload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case11Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case11Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case11`.
            case case11(Components.Schemas.RpcQueryRequest.Case11Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case12Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key = "view_access_key"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case12Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case12Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case12Payload.Value2Payload
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case12Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case12Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case12`.
            case case12(Components.Schemas.RpcQueryRequest.Case12Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case13Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key_list = "view_access_key_list"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case13Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case13Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case13Payload.Value2Payload
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case13Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case13Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case13`.
            case case13(Components.Schemas.RpcQueryRequest.Case13Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case14Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2/args_base64`.
                    public var args_base64: Components.Schemas.FunctionArgs
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2/method_name`.
                    public var method_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case call_function = "call_function"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case14Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - args_base64:
                    ///   - method_name:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        args_base64: Components.Schemas.FunctionArgs,
                        method_name: Swift.String,
                        request_type: Components.Schemas.RpcQueryRequest.Case14Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.args_base64 = args_base64
                        self.method_name = method_name
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case args_base64
                        case method_name
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case14Payload.Value2Payload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case14Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case14Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case14`.
            case case14(Components.Schemas.RpcQueryRequest.Case14Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15`.
            public struct Case15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case15Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value2/code_hash`.
                    public var code_hash: Components.Schemas.CryptoHash
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code = "view_global_contract_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case15Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - code_hash:
                    ///   - request_type:
                    public init(
                        code_hash: Components.Schemas.CryptoHash,
                        request_type: Components.Schemas.RpcQueryRequest.Case15Payload.Value2Payload.request_typePayload
                    ) {
                        self.code_hash = code_hash
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code_hash
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case15Payload.Value2Payload
                /// Creates a new `Case15Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case15Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case15Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case15`.
            case case15(Components.Schemas.RpcQueryRequest.Case15Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case16Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code_by_account_id = "view_global_contract_code_by_account_id"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case16Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case16Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case16Payload.Value2Payload
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case16Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case16Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case16`.
            case case16(Components.Schemas.RpcQueryRequest.Case16Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case17Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_account = "view_account"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case17Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case17Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case17Payload.Value2Payload
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case17Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case17Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case17`.
            case case17(Components.Schemas.RpcQueryRequest.Case17Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18`.
            public struct Case18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case18Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_code = "view_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case18Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case18Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case18Payload.Value2Payload
                /// Creates a new `Case18Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case18Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case18Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case18`.
            case case18(Components.Schemas.RpcQueryRequest.Case18Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19`.
            public struct Case19Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case19Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2/include_proof`.
                    public var include_proof: Swift.Bool?
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2/prefix_base64`.
                    public var prefix_base64: Components.Schemas.StoreKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_state = "view_state"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case19Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - include_proof:
                    ///   - prefix_base64:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        include_proof: Swift.Bool? = nil,
                        prefix_base64: Components.Schemas.StoreKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case19Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.include_proof = include_proof
                        self.prefix_base64 = prefix_base64
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case include_proof
                        case prefix_base64
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case19Payload.Value2Payload
                /// Creates a new `Case19Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case19Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case19Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case19`.
            case case19(Components.Schemas.RpcQueryRequest.Case19Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20`.
            public struct Case20Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case20Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key = "view_access_key"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case20Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey,
                        request_type: Components.Schemas.RpcQueryRequest.Case20Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case20Payload.Value2Payload
                /// Creates a new `Case20Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case20Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case20Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case20`.
            case case20(Components.Schemas.RpcQueryRequest.Case20Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21`.
            public struct Case21Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case21Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_access_key_list = "view_access_key_list"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case21Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case21Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case21Payload.Value2Payload
                /// Creates a new `Case21Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case21Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case21Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case21`.
            case case21(Components.Schemas.RpcQueryRequest.Case21Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22`.
            public struct Case22Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case22Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2/args_base64`.
                    public var args_base64: Components.Schemas.FunctionArgs
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2/method_name`.
                    public var method_name: Swift.String
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case call_function = "call_function"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case22Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - args_base64:
                    ///   - method_name:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        args_base64: Components.Schemas.FunctionArgs,
                        method_name: Swift.String,
                        request_type: Components.Schemas.RpcQueryRequest.Case22Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.args_base64 = args_base64
                        self.method_name = method_name
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case args_base64
                        case method_name
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case22Payload.Value2Payload
                /// Creates a new `Case22Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case22Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case22Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case22`.
            case case22(Components.Schemas.RpcQueryRequest.Case22Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23`.
            public struct Case23Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case23Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value2/code_hash`.
                    public var code_hash: Components.Schemas.CryptoHash
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code = "view_global_contract_code"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case23Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - code_hash:
                    ///   - request_type:
                    public init(
                        code_hash: Components.Schemas.CryptoHash,
                        request_type: Components.Schemas.RpcQueryRequest.Case23Payload.Value2Payload.request_typePayload
                    ) {
                        self.code_hash = code_hash
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code_hash
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case23Payload.Value2Payload
                /// Creates a new `Case23Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case23Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case23Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case23`.
            case case23(Components.Schemas.RpcQueryRequest.Case23Payload)
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24`.
            public struct Case24Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value1`.
                public var value1: Components.Schemas.RpcQueryRequest.Case24Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value2/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value2/request_type`.
                    @frozen public enum request_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case view_global_contract_code_by_account_id = "view_global_contract_code_by_account_id"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value2/request_type`.
                    public var request_type: Components.Schemas.RpcQueryRequest.Case24Payload.Value2Payload.request_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - request_type:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        request_type: Components.Schemas.RpcQueryRequest.Case24Payload.Value2Payload.request_typePayload
                    ) {
                        self.account_id = account_id
                        self.request_type = request_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case request_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24/value2`.
                public var value2: Components.Schemas.RpcQueryRequest.Case24Payload.Value2Payload
                /// Creates a new `Case24Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcQueryRequest.Case24Payload.Value1Payload,
                    value2: Components.Schemas.RpcQueryRequest.Case24Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcQueryRequest/case24`.
            case case24(Components.Schemas.RpcQueryRequest.Case24Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case19(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case20(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case21(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case22(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case23(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case24(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                case let .case18(value):
                    try value.encode(to: encoder)
                case let .case19(value):
                    try value.encode(to: encoder)
                case let .case20(value):
                    try value.encode(to: encoder)
                case let .case21(value):
                    try value.encode(to: encoder)
                case let .case22(value):
                    try value.encode(to: encoder)
                case let .case23(value):
                    try value.encode(to: encoder)
                case let .case24(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcQueryResponse`.
        public struct RpcQueryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value1`.
            public var value1: Components.Schemas.AccountView?
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value2`.
            public var value2: Components.Schemas.ContractCodeView?
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value3`.
            public var value3: Components.Schemas.ViewStateResult?
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value4`.
            public var value4: Components.Schemas.CallResult?
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value5`.
            public var value5: Components.Schemas.AccessKeyView?
            /// - Remark: Generated from `#/components/schemas/RpcQueryResponse/value6`.
            public var value6: Components.Schemas.AccessKeyList?
            /// Creates a new `RpcQueryResponse`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            ///   - value3:
            ///   - value4:
            ///   - value5:
            ///   - value6:
            public init(
                value1: Components.Schemas.AccountView? = nil,
                value2: Components.Schemas.ContractCodeView? = nil,
                value3: Components.Schemas.ViewStateResult? = nil,
                value4: Components.Schemas.CallResult? = nil,
                value5: Components.Schemas.AccessKeyView? = nil,
                value6: Components.Schemas.AccessKeyList? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
                self.value3 = value3
                self.value4 = value4
                self.value5 = value5
                self.value6 = value6
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value3 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value4 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value5 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value6 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2,
                        self.value3,
                        self.value4,
                        self.value5,
                        self.value6
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
                try self.value3?.encode(to: encoder)
                try self.value4?.encode(to: encoder)
                try self.value5?.encode(to: encoder)
                try self.value6?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcReceiptRequest`.
        public struct RpcReceiptRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcReceiptRequest/receipt_id`.
            public var receipt_id: Components.Schemas.CryptoHash
            /// Creates a new `RpcReceiptRequest`.
            ///
            /// - Parameters:
            ///   - receipt_id:
            public init(receipt_id: Components.Schemas.CryptoHash) {
                self.receipt_id = receipt_id
            }
            public enum CodingKeys: String, CodingKey {
                case receipt_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse`.
        public struct RpcReceiptResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse/predecessor_id`.
            public var predecessor_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse/receipt`.
            public var receipt: Components.Schemas.ReceiptEnumView
            /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse/receipt_id`.
            public var receipt_id: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/RpcReceiptResponse/receiver_id`.
            public var receiver_id: Components.Schemas.AccountId
            /// Creates a new `RpcReceiptResponse`.
            ///
            /// - Parameters:
            ///   - predecessor_id:
            ///   - priority:
            ///   - receipt:
            ///   - receipt_id:
            ///   - receiver_id:
            public init(
                predecessor_id: Components.Schemas.AccountId,
                priority: Swift.Int? = nil,
                receipt: Components.Schemas.ReceiptEnumView,
                receipt_id: Components.Schemas.CryptoHash,
                receiver_id: Components.Schemas.AccountId
            ) {
                self.predecessor_id = predecessor_id
                self.priority = priority
                self.receipt = receipt
                self.receipt_id = receipt_id
                self.receiver_id = receiver_id
            }
            public enum CodingKeys: String, CodingKey {
                case predecessor_id
                case priority
                case receipt
                case receipt_id
                case receiver_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind`.
        @frozen public enum RpcRequestValidationErrorKind: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1/info`.
                public struct infoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1/info/method_name`.
                    public var method_name: Swift.String
                    /// Creates a new `infoPayload`.
                    ///
                    /// - Parameters:
                    ///   - method_name:
                    public init(method_name: Swift.String) {
                        self.method_name = method_name
                    }
                    public enum CodingKeys: String, CodingKey {
                        case method_name
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1/info`.
                public var info: Components.Schemas.RpcRequestValidationErrorKind.Case1Payload.infoPayload
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1/name`.
                @frozen public enum namePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case METHOD_NOT_FOUND = "METHOD_NOT_FOUND"
                }
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1/name`.
                public var name: Components.Schemas.RpcRequestValidationErrorKind.Case1Payload.namePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - info:
                ///   - name:
                public init(
                    info: Components.Schemas.RpcRequestValidationErrorKind.Case1Payload.infoPayload,
                    name: Components.Schemas.RpcRequestValidationErrorKind.Case1Payload.namePayload
                ) {
                    self.info = info
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case info
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case1`.
            case case1(Components.Schemas.RpcRequestValidationErrorKind.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2/info`.
                public struct infoPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2/info/error_message`.
                    public var error_message: Swift.String
                    /// Creates a new `infoPayload`.
                    ///
                    /// - Parameters:
                    ///   - error_message:
                    public init(error_message: Swift.String) {
                        self.error_message = error_message
                    }
                    public enum CodingKeys: String, CodingKey {
                        case error_message
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2/info`.
                public var info: Components.Schemas.RpcRequestValidationErrorKind.Case2Payload.infoPayload
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2/name`.
                @frozen public enum namePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case PARSE_ERROR = "PARSE_ERROR"
                }
                /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2/name`.
                public var name: Components.Schemas.RpcRequestValidationErrorKind.Case2Payload.namePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - info:
                ///   - name:
                public init(
                    info: Components.Schemas.RpcRequestValidationErrorKind.Case2Payload.infoPayload,
                    name: Components.Schemas.RpcRequestValidationErrorKind.Case2Payload.namePayload
                ) {
                    self.info = info
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case info
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcRequestValidationErrorKind/case2`.
            case case2(Components.Schemas.RpcRequestValidationErrorKind.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcSendTransactionRequest`.
        public struct RpcSendTransactionRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcSendTransactionRequest/signed_tx_base64`.
            public var signed_tx_base64: Components.Schemas.SignedTransaction
            /// - Remark: Generated from `#/components/schemas/RpcSendTransactionRequest/wait_until`.
            public struct wait_untilPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcSendTransactionRequest/wait_until/value1`.
                public var value1: Components.Schemas.TxExecutionStatus
                /// Creates a new `wait_untilPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.TxExecutionStatus) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcSendTransactionRequest/wait_until`.
            public var wait_until: Components.Schemas.RpcSendTransactionRequest.wait_untilPayload?
            /// Creates a new `RpcSendTransactionRequest`.
            ///
            /// - Parameters:
            ///   - signed_tx_base64:
            ///   - wait_until:
            public init(
                signed_tx_base64: Components.Schemas.SignedTransaction,
                wait_until: Components.Schemas.RpcSendTransactionRequest.wait_untilPayload? = nil
            ) {
                self.signed_tx_base64 = signed_tx_base64
                self.wait_until = wait_until
            }
            public enum CodingKeys: String, CodingKey {
                case signed_tx_base64
                case wait_until
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoRequest`.
        public typealias RpcSplitStorageInfoRequest = OpenAPIRuntime.OpenAPIObjectContainer
        /// Contains the split storage information.
        ///
        /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoResponse`.
        public struct RpcSplitStorageInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoResponse/cold_head_height`.
            public var cold_head_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoResponse/final_head_height`.
            public var final_head_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoResponse/head_height`.
            public var head_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/RpcSplitStorageInfoResponse/hot_db_kind`.
            public var hot_db_kind: Swift.String?
            /// Creates a new `RpcSplitStorageInfoResponse`.
            ///
            /// - Parameters:
            ///   - cold_head_height:
            ///   - final_head_height:
            ///   - head_height:
            ///   - hot_db_kind:
            public init(
                cold_head_height: Swift.Int? = nil,
                final_head_height: Swift.Int? = nil,
                head_height: Swift.Int? = nil,
                hot_db_kind: Swift.String? = nil
            ) {
                self.cold_head_height = cold_head_height
                self.final_head_height = final_head_height
                self.head_height = head_height
                self.hot_db_kind = hot_db_kind
            }
            public enum CodingKeys: String, CodingKey {
                case cold_head_height
                case final_head_height
                case head_height
                case hot_db_kind
            }
        }
        /// It is a [serializable view] of [`StateChangesRequest`].
        ///
        /// [serializable view]: ./index.html
        /// [`StateChangesRequest`]: ../types/struct.StateChangesRequest.html
        ///
        /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest`.
        @frozen public enum RpcStateChangesInBlockByTypeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case account_changes = "account_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value2Payload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case1`.
            case case1(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_access_key_changes = "single_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value2Payload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case2`.
            case case2(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_gas_key_changes = "single_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value2Payload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case3`.
            case case3(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_access_key_changes = "all_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value2Payload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case4`.
            case case4(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_gas_key_changes = "all_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value2Payload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case5`.
            case case5(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case contract_code_changes = "contract_code_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value2Payload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case6`.
            case case6(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value1/block_id`.
                    public var block_id: Components.Schemas.BlockId
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - block_id:
                    public init(block_id: Components.Schemas.BlockId) {
                        self.block_id = block_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case block_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case data_changes = "data_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2/key_prefix_base64`.
                    public var key_prefix_base64: Components.Schemas.StoreKey
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    ///   - key_prefix_base64:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value2Payload.changes_typePayload,
                        key_prefix_base64: Components.Schemas.StoreKey
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                        self.key_prefix_base64 = key_prefix_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                        case key_prefix_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value2Payload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case7`.
            case case7(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case account_changes = "account_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value2Payload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case8`.
            case case8(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_access_key_changes = "single_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value2Payload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case9`.
            case case9(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_gas_key_changes = "single_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value2Payload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case10`.
            case case10(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_access_key_changes = "all_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value2Payload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case11`.
            case case11(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case11Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12`.
            public struct Case12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_gas_key_changes = "all_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value2Payload
                /// Creates a new `Case12Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case12`.
            case case12(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case12Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13`.
            public struct Case13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case contract_code_changes = "contract_code_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value2Payload
                /// Creates a new `Case13Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case13`.
            case case13(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case13Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14`.
            public struct Case14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value1/finality`.
                    public var finality: Components.Schemas.Finality
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - finality:
                    public init(finality: Components.Schemas.Finality) {
                        self.finality = finality
                    }
                    public enum CodingKeys: String, CodingKey {
                        case finality
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case data_changes = "data_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2/key_prefix_base64`.
                    public var key_prefix_base64: Components.Schemas.StoreKey
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    ///   - key_prefix_base64:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value2Payload.changes_typePayload,
                        key_prefix_base64: Components.Schemas.StoreKey
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                        self.key_prefix_base64 = key_prefix_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                        case key_prefix_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value2Payload
                /// Creates a new `Case14Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case14`.
            case case14(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case14Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15`.
            public struct Case15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case account_changes = "account_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value2Payload
                /// Creates a new `Case15Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case15`.
            case case15(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case15Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16`.
            public struct Case16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_access_key_changes = "single_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value2Payload
                /// Creates a new `Case16Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case16`.
            case case16(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case16Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17`.
            public struct Case17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case single_gas_key_changes = "single_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value2/keys`.
                    public var keys: [Components.Schemas.AccountWithPublicKey]
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - changes_type:
                    ///   - keys:
                    public init(
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value2Payload.changes_typePayload,
                        keys: [Components.Schemas.AccountWithPublicKey]
                    ) {
                        self.changes_type = changes_type
                        self.keys = keys
                    }
                    public enum CodingKeys: String, CodingKey {
                        case changes_type
                        case keys
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value2Payload
                /// Creates a new `Case17Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case17`.
            case case17(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case17Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18`.
            public struct Case18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_access_key_changes = "all_access_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value2Payload
                /// Creates a new `Case18Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case18`.
            case case18(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case18Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19`.
            public struct Case19Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case all_gas_key_changes = "all_gas_key_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value2Payload
                /// Creates a new `Case19Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case19`.
            case case19(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case19Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20`.
            public struct Case20Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case contract_code_changes = "contract_code_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value2Payload.changes_typePayload
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value2Payload.changes_typePayload
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value2Payload
                /// Creates a new `Case20Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case20`.
            case case20(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case20Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21`.
            public struct Case21Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value1`.
                public struct Value1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value1/sync_checkpoint`.
                    public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                    /// Creates a new `Value1Payload`.
                    ///
                    /// - Parameters:
                    ///   - sync_checkpoint:
                    public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                        self.sync_checkpoint = sync_checkpoint
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sync_checkpoint
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value1`.
                public var value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value1Payload
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2`.
                public struct Value2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2/account_ids`.
                    public var account_ids: [Components.Schemas.AccountId]
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2/changes_type`.
                    @frozen public enum changes_typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case data_changes = "data_changes"
                    }
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2/changes_type`.
                    public var changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value2Payload.changes_typePayload
                    /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2/key_prefix_base64`.
                    public var key_prefix_base64: Components.Schemas.StoreKey
                    /// Creates a new `Value2Payload`.
                    ///
                    /// - Parameters:
                    ///   - account_ids:
                    ///   - changes_type:
                    ///   - key_prefix_base64:
                    public init(
                        account_ids: [Components.Schemas.AccountId],
                        changes_type: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value2Payload.changes_typePayload,
                        key_prefix_base64: Components.Schemas.StoreKey
                    ) {
                        self.account_ids = account_ids
                        self.changes_type = changes_type
                        self.key_prefix_base64 = key_prefix_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_ids
                        case changes_type
                        case key_prefix_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21/value2`.
                public var value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value2Payload
                /// Creates a new `Case21Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value1Payload,
                    value2: Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload.Value2Payload
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                    self.value2 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                    try self.value2.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeRequest/case21`.
            case case21(Components.Schemas.RpcStateChangesInBlockByTypeRequest.Case21Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case12(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case13(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case14(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case15(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case16(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case17(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case18(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case19(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case20(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case21(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                case let .case12(value):
                    try value.encode(to: encoder)
                case let .case13(value):
                    try value.encode(to: encoder)
                case let .case14(value):
                    try value.encode(to: encoder)
                case let .case15(value):
                    try value.encode(to: encoder)
                case let .case16(value):
                    try value.encode(to: encoder)
                case let .case17(value):
                    try value.encode(to: encoder)
                case let .case18(value):
                    try value.encode(to: encoder)
                case let .case19(value):
                    try value.encode(to: encoder)
                case let .case20(value):
                    try value.encode(to: encoder)
                case let .case21(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeResponse`.
        public struct RpcStateChangesInBlockByTypeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeResponse/block_hash`.
            public var block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockByTypeResponse/changes`.
            public var changes: [Components.Schemas.StateChangeKindView]
            /// Creates a new `RpcStateChangesInBlockByTypeResponse`.
            ///
            /// - Parameters:
            ///   - block_hash:
            ///   - changes:
            public init(
                block_hash: Components.Schemas.CryptoHash,
                changes: [Components.Schemas.StateChangeKindView]
            ) {
                self.block_hash = block_hash
                self.changes = changes
            }
            public enum CodingKeys: String, CodingKey {
                case block_hash
                case changes
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest`.
        @frozen public enum RpcStateChangesInBlockRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case1/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                public init(block_id: Components.Schemas.BlockId) {
                    self.block_id = block_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case1`.
            case case1(Components.Schemas.RpcStateChangesInBlockRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case2/finality`.
                public var finality: Components.Schemas.Finality
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - finality:
                public init(finality: Components.Schemas.Finality) {
                    self.finality = finality
                }
                public enum CodingKeys: String, CodingKey {
                    case finality
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case2`.
            case case2(Components.Schemas.RpcStateChangesInBlockRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case3/sync_checkpoint`.
                public var sync_checkpoint: Components.Schemas.SyncCheckpoint
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - sync_checkpoint:
                public init(sync_checkpoint: Components.Schemas.SyncCheckpoint) {
                    self.sync_checkpoint = sync_checkpoint
                }
                public enum CodingKeys: String, CodingKey {
                    case sync_checkpoint
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockRequest/case3`.
            case case3(Components.Schemas.RpcStateChangesInBlockRequest.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockResponse`.
        public struct RpcStateChangesInBlockResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockResponse/block_hash`.
            public var block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/RpcStateChangesInBlockResponse/changes`.
            public var changes: [Components.Schemas.StateChangeWithCauseView]
            /// Creates a new `RpcStateChangesInBlockResponse`.
            ///
            /// - Parameters:
            ///   - block_hash:
            ///   - changes:
            public init(
                block_hash: Components.Schemas.CryptoHash,
                changes: [Components.Schemas.StateChangeWithCauseView]
            ) {
                self.block_hash = block_hash
                self.changes = changes
            }
            public enum CodingKeys: String, CodingKey {
                case block_hash
                case changes
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcStatusRequest`.
        public typealias RpcStatusRequest = OpenAPIRuntime.OpenAPIValueContainer
        /// - Remark: Generated from `#/components/schemas/RpcStatusResponse`.
        public struct RpcStatusResponse: Codable, Hashable, Sendable {
            /// Unique chain id.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/chain_id`.
            public var chain_id: Swift.String
            /// Information about last blocks, network, epoch and chain & chunk info.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/detailed_debug_status`.
            public struct detailed_debug_statusPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/detailed_debug_status/value1`.
                public var value1: Components.Schemas.DetailedDebugStatus?
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/detailed_debug_status/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `detailed_debug_statusPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.DetailedDebugStatus? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Information about last blocks, network, epoch and chain & chunk info.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/detailed_debug_status`.
            public var detailed_debug_status: Components.Schemas.RpcStatusResponse.detailed_debug_statusPayload?
            /// Genesis hash of the chain.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/genesis_hash`.
            public struct genesis_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/genesis_hash/value1`.
                public var value1: Components.Schemas.CryptoHash
                /// Creates a new `genesis_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CryptoHash) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Genesis hash of the chain.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/genesis_hash`.
            public var genesis_hash: Components.Schemas.RpcStatusResponse.genesis_hashPayload
            /// Latest protocol version that this client supports.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/latest_protocol_version`.
            public var latest_protocol_version: Swift.Int
            /// Deprecated; same as `validator_public_key` which you should use instead.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_key`.
            public struct node_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_key/value1`.
                public var value1: Components.Schemas.PublicKey?
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_key/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `node_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.PublicKey? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Deprecated; same as `validator_public_key` which you should use instead.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_key`.
            public var node_key: Components.Schemas.RpcStatusResponse.node_keyPayload?
            /// Public key of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_public_key`.
            public struct node_public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_public_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `node_public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Public key of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/node_public_key`.
            public var node_public_key: Components.Schemas.RpcStatusResponse.node_public_keyPayload
            /// Currently active protocol version.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/protocol_version`.
            public var protocol_version: Swift.Int
            /// Address for RPC server.  None if node doesn't have RPC endpoint enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/rpc_addr`.
            public var rpc_addr: Swift.String?
            /// Sync status of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/sync_info`.
            public struct sync_infoPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/sync_info/value1`.
                public var value1: Components.Schemas.StatusSyncInfo
                /// Creates a new `sync_infoPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StatusSyncInfo) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Sync status of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/sync_info`.
            public var sync_info: Components.Schemas.RpcStatusResponse.sync_infoPayload
            /// Uptime of the node.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/uptime_sec`.
            public var uptime_sec: Swift.Int64
            /// Validator id of the node
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_account_id`.
            public struct validator_account_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_account_id/value1`.
                public var value1: Components.Schemas.AccountId?
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_account_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `validator_account_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.AccountId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Validator id of the node
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_account_id`.
            public var validator_account_id: Components.Schemas.RpcStatusResponse.validator_account_idPayload?
            /// Public key of the validator.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_public_key`.
            public struct validator_public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_public_key/value1`.
                public var value1: Components.Schemas.PublicKey?
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_public_key/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `validator_public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.PublicKey? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// Public key of the validator.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validator_public_key`.
            public var validator_public_key: Components.Schemas.RpcStatusResponse.validator_public_keyPayload?
            /// Current epoch validators.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/validators`.
            public var validators: [Components.Schemas.ValidatorInfo]
            /// Binary version.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/version`.
            public struct versionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/version/value1`.
                public var value1: Components.Schemas.Version
                /// Creates a new `versionPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Version) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Binary version.
            ///
            /// - Remark: Generated from `#/components/schemas/RpcStatusResponse/version`.
            public var version: Components.Schemas.RpcStatusResponse.versionPayload
            /// Creates a new `RpcStatusResponse`.
            ///
            /// - Parameters:
            ///   - chain_id: Unique chain id.
            ///   - detailed_debug_status: Information about last blocks, network, epoch and chain & chunk info.
            ///   - genesis_hash: Genesis hash of the chain.
            ///   - latest_protocol_version: Latest protocol version that this client supports.
            ///   - node_key: Deprecated; same as `validator_public_key` which you should use instead.
            ///   - node_public_key: Public key of the node.
            ///   - protocol_version: Currently active protocol version.
            ///   - rpc_addr: Address for RPC server.  None if node doesn't have RPC endpoint enabled.
            ///   - sync_info: Sync status of the node.
            ///   - uptime_sec: Uptime of the node.
            ///   - validator_account_id: Validator id of the node
            ///   - validator_public_key: Public key of the validator.
            ///   - validators: Current epoch validators.
            ///   - version: Binary version.
            public init(
                chain_id: Swift.String,
                detailed_debug_status: Components.Schemas.RpcStatusResponse.detailed_debug_statusPayload? = nil,
                genesis_hash: Components.Schemas.RpcStatusResponse.genesis_hashPayload,
                latest_protocol_version: Swift.Int,
                node_key: Components.Schemas.RpcStatusResponse.node_keyPayload? = nil,
                node_public_key: Components.Schemas.RpcStatusResponse.node_public_keyPayload,
                protocol_version: Swift.Int,
                rpc_addr: Swift.String? = nil,
                sync_info: Components.Schemas.RpcStatusResponse.sync_infoPayload,
                uptime_sec: Swift.Int64,
                validator_account_id: Components.Schemas.RpcStatusResponse.validator_account_idPayload? = nil,
                validator_public_key: Components.Schemas.RpcStatusResponse.validator_public_keyPayload? = nil,
                validators: [Components.Schemas.ValidatorInfo],
                version: Components.Schemas.RpcStatusResponse.versionPayload
            ) {
                self.chain_id = chain_id
                self.detailed_debug_status = detailed_debug_status
                self.genesis_hash = genesis_hash
                self.latest_protocol_version = latest_protocol_version
                self.node_key = node_key
                self.node_public_key = node_public_key
                self.protocol_version = protocol_version
                self.rpc_addr = rpc_addr
                self.sync_info = sync_info
                self.uptime_sec = uptime_sec
                self.validator_account_id = validator_account_id
                self.validator_public_key = validator_public_key
                self.validators = validators
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case chain_id
                case detailed_debug_status
                case genesis_hash
                case latest_protocol_version
                case node_key
                case node_public_key
                case protocol_version
                case rpc_addr
                case sync_info
                case uptime_sec
                case validator_account_id
                case validator_public_key
                case validators
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcTransactionResponse`.
        public struct RpcTransactionResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcTransactionResponse/value1`.
            public var value1: Components.Schemas.FinalExecutionOutcomeWithReceiptView?
            /// - Remark: Generated from `#/components/schemas/RpcTransactionResponse/value2`.
            public var value2: Components.Schemas.FinalExecutionOutcomeView?
            /// Creates a new `RpcTransactionResponse`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.FinalExecutionOutcomeWithReceiptView? = nil,
                value2: Components.Schemas.FinalExecutionOutcomeView? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest`.
        public struct RpcTransactionStatusRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value1`.
            public struct Value1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value1/signed_tx_base64`.
                public var signed_tx_base64: Components.Schemas.SignedTransaction
                /// Creates a new `Value1Payload`.
                ///
                /// - Parameters:
                ///   - signed_tx_base64:
                public init(signed_tx_base64: Components.Schemas.SignedTransaction) {
                    self.signed_tx_base64 = signed_tx_base64
                }
                public enum CodingKeys: String, CodingKey {
                    case signed_tx_base64
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value1`.
            public var value1: Components.Schemas.RpcTransactionStatusRequest.Value1Payload?
            /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value2/sender_account_id`.
                public var sender_account_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value2/tx_hash`.
                public var tx_hash: Components.Schemas.CryptoHash
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - sender_account_id:
                ///   - tx_hash:
                public init(
                    sender_account_id: Components.Schemas.AccountId,
                    tx_hash: Components.Schemas.CryptoHash
                ) {
                    self.sender_account_id = sender_account_id
                    self.tx_hash = tx_hash
                }
                public enum CodingKeys: String, CodingKey {
                    case sender_account_id
                    case tx_hash
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcTransactionStatusRequest/value2`.
            public var value2: Components.Schemas.RpcTransactionStatusRequest.Value2Payload?
            /// Creates a new `RpcTransactionStatusRequest`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.RpcTransactionStatusRequest.Value1Payload? = nil,
                value2: Components.Schemas.RpcTransactionStatusRequest.Value2Payload? = nil
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self.value1 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                do {
                    self.value2 = try .init(from: decoder)
                } catch {
                    errors.append(error)
                }
                try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                    [
                        self.value1,
                        self.value2
                    ],
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                try self.value1?.encode(to: encoder)
                try self.value2?.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest`.
        @frozen public enum RpcValidatorRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case latest = "latest"
            }
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case1`.
            case case1(Components.Schemas.RpcValidatorRequest.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case2/epoch_id`.
                public var epoch_id: Components.Schemas.EpochId
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - epoch_id:
                public init(epoch_id: Components.Schemas.EpochId) {
                    self.epoch_id = epoch_id
                }
                public enum CodingKeys: String, CodingKey {
                    case epoch_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case2`.
            case case2(Components.Schemas.RpcValidatorRequest.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case3/block_id`.
                public var block_id: Components.Schemas.BlockId
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - block_id:
                public init(block_id: Components.Schemas.BlockId) {
                    self.block_id = block_id
                }
                public enum CodingKeys: String, CodingKey {
                    case block_id
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcValidatorRequest/case3`.
            case case3(Components.Schemas.RpcValidatorRequest.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Information about this epoch validators and next epoch validators
        ///
        /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse`.
        public struct RpcValidatorResponse: Codable, Hashable, Sendable {
            /// Fishermen for the current epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/current_fishermen`.
            public var current_fishermen: [Components.Schemas.ValidatorStakeView]
            /// Proposals in the current epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/current_proposals`.
            public var current_proposals: [Components.Schemas.ValidatorStakeView]
            /// Validators for the current epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/current_validators`.
            public var current_validators: [Components.Schemas.CurrentEpochValidatorInfo]
            /// Epoch height
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/epoch_height`.
            public var epoch_height: Swift.Int
            /// Epoch start block height
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/epoch_start_height`.
            public var epoch_start_height: Swift.Int
            /// Fishermen for the next epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/next_fishermen`.
            public var next_fishermen: [Components.Schemas.ValidatorStakeView]
            /// Validators for the next epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/next_validators`.
            public var next_validators: [Components.Schemas.NextEpochValidatorInfo]
            /// Kickout in the previous epoch
            ///
            /// - Remark: Generated from `#/components/schemas/RpcValidatorResponse/prev_epoch_kickout`.
            public var prev_epoch_kickout: [Components.Schemas.ValidatorKickoutView]
            /// Creates a new `RpcValidatorResponse`.
            ///
            /// - Parameters:
            ///   - current_fishermen: Fishermen for the current epoch
            ///   - current_proposals: Proposals in the current epoch
            ///   - current_validators: Validators for the current epoch
            ///   - epoch_height: Epoch height
            ///   - epoch_start_height: Epoch start block height
            ///   - next_fishermen: Fishermen for the next epoch
            ///   - next_validators: Validators for the next epoch
            ///   - prev_epoch_kickout: Kickout in the previous epoch
            public init(
                current_fishermen: [Components.Schemas.ValidatorStakeView],
                current_proposals: [Components.Schemas.ValidatorStakeView],
                current_validators: [Components.Schemas.CurrentEpochValidatorInfo],
                epoch_height: Swift.Int,
                epoch_start_height: Swift.Int,
                next_fishermen: [Components.Schemas.ValidatorStakeView],
                next_validators: [Components.Schemas.NextEpochValidatorInfo],
                prev_epoch_kickout: [Components.Schemas.ValidatorKickoutView]
            ) {
                self.current_fishermen = current_fishermen
                self.current_proposals = current_proposals
                self.current_validators = current_validators
                self.epoch_height = epoch_height
                self.epoch_start_height = epoch_start_height
                self.next_fishermen = next_fishermen
                self.next_validators = next_validators
                self.prev_epoch_kickout = prev_epoch_kickout
            }
            public enum CodingKeys: String, CodingKey {
                case current_fishermen
                case current_proposals
                case current_validators
                case epoch_height
                case epoch_start_height
                case next_fishermen
                case next_validators
                case prev_epoch_kickout
            }
        }
        /// - Remark: Generated from `#/components/schemas/RpcValidatorsOrderedRequest`.
        public struct RpcValidatorsOrderedRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RpcValidatorsOrderedRequest/block_id`.
            public struct block_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RpcValidatorsOrderedRequest/block_id/value1`.
                public var value1: Components.Schemas.BlockId?
                /// - Remark: Generated from `#/components/schemas/RpcValidatorsOrderedRequest/block_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `block_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.BlockId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RpcValidatorsOrderedRequest/block_id`.
            public var block_id: Components.Schemas.RpcValidatorsOrderedRequest.block_idPayload?
            /// Creates a new `RpcValidatorsOrderedRequest`.
            ///
            /// - Parameters:
            ///   - block_id:
            public init(block_id: Components.Schemas.RpcValidatorsOrderedRequest.block_idPayload? = nil) {
                self.block_id = block_id
            }
            public enum CodingKeys: String, CodingKey {
                case block_id
            }
        }
        /// View that preserves JSON format of the runtime config.
        ///
        /// - Remark: Generated from `#/components/schemas/RuntimeConfigView`.
        public struct RuntimeConfigView: Codable, Hashable, Sendable {
            /// Config that defines rules for account creation.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/account_creation_config`.
            public struct account_creation_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/account_creation_config/value1`.
                public var value1: Components.Schemas.AccountCreationConfigView
                /// Creates a new `account_creation_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.AccountCreationConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Config that defines rules for account creation.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/account_creation_config`.
            public var account_creation_config: Components.Schemas.RuntimeConfigView.account_creation_configPayload
            /// The configuration for congestion control.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/congestion_control_config`.
            public struct congestion_control_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/congestion_control_config/value1`.
                public var value1: Components.Schemas.CongestionControlConfigView
                /// Creates a new `congestion_control_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.CongestionControlConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// The configuration for congestion control.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/congestion_control_config`.
            public var congestion_control_config: Components.Schemas.RuntimeConfigView.congestion_control_configPayload
            /// Amount of yN per byte required to have on the account.  See
            /// <https://nomicon.io/Economics/Economic#state-stake> for details.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/storage_amount_per_byte`.
            public struct storage_amount_per_bytePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/storage_amount_per_byte/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `storage_amount_per_bytePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Amount of yN per byte required to have on the account.  See
            /// <https://nomicon.io/Economics/Economic#state-stake> for details.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/storage_amount_per_byte`.
            public var storage_amount_per_byte: Components.Schemas.RuntimeConfigView.storage_amount_per_bytePayload
            /// Costs of different actions that need to be performed when sending and
            /// processing transaction and receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/transaction_costs`.
            public struct transaction_costsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/transaction_costs/value1`.
                public var value1: Components.Schemas.RuntimeFeesConfigView
                /// Creates a new `transaction_costsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.RuntimeFeesConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Costs of different actions that need to be performed when sending and
            /// processing transaction and receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/transaction_costs`.
            public var transaction_costs: Components.Schemas.RuntimeConfigView.transaction_costsPayload
            /// Config of wasm operations.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/wasm_config`.
            public struct wasm_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/wasm_config/value1`.
                public var value1: Components.Schemas.VMConfigView
                /// Creates a new `wasm_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.VMConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Config of wasm operations.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/wasm_config`.
            public var wasm_config: Components.Schemas.RuntimeConfigView.wasm_configPayload
            /// Configuration specific to ChunkStateWitness.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/witness_config`.
            public struct witness_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/witness_config/value1`.
                public var value1: Components.Schemas.WitnessConfigView
                /// Creates a new `witness_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.WitnessConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Configuration specific to ChunkStateWitness.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeConfigView/witness_config`.
            public var witness_config: Components.Schemas.RuntimeConfigView.witness_configPayload
            /// Creates a new `RuntimeConfigView`.
            ///
            /// - Parameters:
            ///   - account_creation_config: Config that defines rules for account creation.
            ///   - congestion_control_config: The configuration for congestion control.
            ///   - storage_amount_per_byte: Amount of yN per byte required to have on the account.  See
            ///   - transaction_costs: Costs of different actions that need to be performed when sending and
            ///   - wasm_config: Config of wasm operations.
            ///   - witness_config: Configuration specific to ChunkStateWitness.
            public init(
                account_creation_config: Components.Schemas.RuntimeConfigView.account_creation_configPayload,
                congestion_control_config: Components.Schemas.RuntimeConfigView.congestion_control_configPayload,
                storage_amount_per_byte: Components.Schemas.RuntimeConfigView.storage_amount_per_bytePayload,
                transaction_costs: Components.Schemas.RuntimeConfigView.transaction_costsPayload,
                wasm_config: Components.Schemas.RuntimeConfigView.wasm_configPayload,
                witness_config: Components.Schemas.RuntimeConfigView.witness_configPayload
            ) {
                self.account_creation_config = account_creation_config
                self.congestion_control_config = congestion_control_config
                self.storage_amount_per_byte = storage_amount_per_byte
                self.transaction_costs = transaction_costs
                self.wasm_config = wasm_config
                self.witness_config = witness_config
            }
            public enum CodingKeys: String, CodingKey {
                case account_creation_config
                case congestion_control_config
                case storage_amount_per_byte
                case transaction_costs
                case wasm_config
                case witness_config
            }
        }
        /// Describes different fees for the runtime
        ///
        /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView`.
        public struct RuntimeFeesConfigView: Codable, Hashable, Sendable {
            /// Describes the cost of creating a certain action, `Action`. Includes all variants.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_creation_config`.
            public struct action_creation_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_creation_config/value1`.
                public var value1: Components.Schemas.ActionCreationConfigView
                /// Creates a new `action_creation_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ActionCreationConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Describes the cost of creating a certain action, `Action`. Includes all variants.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_creation_config`.
            public var action_creation_config: Components.Schemas.RuntimeFeesConfigView.action_creation_configPayload
            /// Describes the cost of creating an action receipt, `ActionReceipt`, excluding the actual cost
            /// of actions.
            /// - `send` cost is burned when a receipt is created using `promise_create` or
            ///     `promise_batch_create`
            /// - `exec` cost is burned when the receipt is being executed.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_receipt_creation_config`.
            public struct action_receipt_creation_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_receipt_creation_config/value1`.
                public var value1: Components.Schemas.Fee
                /// Creates a new `action_receipt_creation_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.Fee) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Describes the cost of creating an action receipt, `ActionReceipt`, excluding the actual cost
            /// of actions.
            /// - `send` cost is burned when a receipt is created using `promise_create` or
            ///     `promise_batch_create`
            /// - `exec` cost is burned when the receipt is being executed.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/action_receipt_creation_config`.
            public var action_receipt_creation_config: Components.Schemas.RuntimeFeesConfigView.action_receipt_creation_configPayload
            /// Fraction of the burnt gas to reward to the contract account for execution.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/burnt_gas_reward`.
            public var burnt_gas_reward: [Swift.Int32]
            /// Describes the cost of creating a data receipt, `DataReceipt`.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/data_receipt_creation_config`.
            public struct data_receipt_creation_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/data_receipt_creation_config/value1`.
                public var value1: Components.Schemas.DataReceiptCreationConfigView
                /// Creates a new `data_receipt_creation_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.DataReceiptCreationConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Describes the cost of creating a data receipt, `DataReceipt`.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/data_receipt_creation_config`.
            public var data_receipt_creation_config: Components.Schemas.RuntimeFeesConfigView.data_receipt_creation_configPayload
            /// Pessimistic gas price inflation ratio.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/pessimistic_gas_price_inflation_ratio`.
            public var pessimistic_gas_price_inflation_ratio: [Swift.Int32]
            /// Describes fees for storage.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/storage_usage_config`.
            public struct storage_usage_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/storage_usage_config/value1`.
                public var value1: Components.Schemas.StorageUsageConfigView
                /// Creates a new `storage_usage_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StorageUsageConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Describes fees for storage.
            ///
            /// - Remark: Generated from `#/components/schemas/RuntimeFeesConfigView/storage_usage_config`.
            public var storage_usage_config: Components.Schemas.RuntimeFeesConfigView.storage_usage_configPayload
            /// Creates a new `RuntimeFeesConfigView`.
            ///
            /// - Parameters:
            ///   - action_creation_config: Describes the cost of creating a certain action, `Action`. Includes all variants.
            ///   - action_receipt_creation_config: Describes the cost of creating an action receipt, `ActionReceipt`, excluding the actual cost
            ///   - burnt_gas_reward: Fraction of the burnt gas to reward to the contract account for execution.
            ///   - data_receipt_creation_config: Describes the cost of creating a data receipt, `DataReceipt`.
            ///   - pessimistic_gas_price_inflation_ratio: Pessimistic gas price inflation ratio.
            ///   - storage_usage_config: Describes fees for storage.
            public init(
                action_creation_config: Components.Schemas.RuntimeFeesConfigView.action_creation_configPayload,
                action_receipt_creation_config: Components.Schemas.RuntimeFeesConfigView.action_receipt_creation_configPayload,
                burnt_gas_reward: [Swift.Int32],
                data_receipt_creation_config: Components.Schemas.RuntimeFeesConfigView.data_receipt_creation_configPayload,
                pessimistic_gas_price_inflation_ratio: [Swift.Int32],
                storage_usage_config: Components.Schemas.RuntimeFeesConfigView.storage_usage_configPayload
            ) {
                self.action_creation_config = action_creation_config
                self.action_receipt_creation_config = action_receipt_creation_config
                self.burnt_gas_reward = burnt_gas_reward
                self.data_receipt_creation_config = data_receipt_creation_config
                self.pessimistic_gas_price_inflation_ratio = pessimistic_gas_price_inflation_ratio
                self.storage_usage_config = storage_usage_config
            }
            public enum CodingKeys: String, CodingKey {
                case action_creation_config
                case action_receipt_creation_config
                case burnt_gas_reward
                case data_receipt_creation_config
                case pessimistic_gas_price_inflation_ratio
                case storage_usage_config
            }
        }
        /// The shard identifier. It may be an arbitrary number - it does not need to be
        /// a number in the range 0..NUM_SHARDS. The shard ids do not need to be
        /// sequential or contiguous.
        ///
        /// The shard id is wrapped in a new type to prevent the old pattern of using
        /// indices in range 0..NUM_SHARDS and casting to ShardId. Once the transition
        /// if fully complete it potentially may be simplified to a regular type alias.
        ///
        /// - Remark: Generated from `#/components/schemas/ShardId`.
        public typealias ShardId = Swift.Int
        /// A versioned struct that contains all information needed to assign accounts to shards.
        ///
        /// Because of re-sharding, the chain may use different shard layout to split shards at different
        /// times. Currently, `ShardLayout` is stored as part of `EpochConfig`, which is generated each
        /// epoch given the epoch protocol version. In mainnet/testnet, we use two shard layouts since
        /// re-sharding has only happened once. It is stored as part of genesis config, see
        /// default_simple_nightshade_shard_layout() Below is an overview for some important
        /// functionalities of ShardLayout interface.
        ///
        /// - Remark: Generated from `#/components/schemas/ShardLayout`.
        @frozen public enum ShardLayout: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ShardLayout/case1/V0`.
                public var V0: Components.Schemas.ShardLayoutV0
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - V0:
                public init(V0: Components.Schemas.ShardLayoutV0) {
                    self.V0 = V0
                }
                public enum CodingKeys: String, CodingKey {
                    case V0
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.V0 = try container.decode(
                        Components.Schemas.ShardLayoutV0.self,
                        forKey: .V0
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "V0"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case1`.
            case case1(Components.Schemas.ShardLayout.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ShardLayout/case2/V1`.
                public var V1: Components.Schemas.ShardLayoutV1
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - V1:
                public init(V1: Components.Schemas.ShardLayoutV1) {
                    self.V1 = V1
                }
                public enum CodingKeys: String, CodingKey {
                    case V1
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.V1 = try container.decode(
                        Components.Schemas.ShardLayoutV1.self,
                        forKey: .V1
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "V1"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case2`.
            case case2(Components.Schemas.ShardLayout.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ShardLayout/case3/V2`.
                public var V2: Components.Schemas.ShardLayoutV2
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - V2:
                public init(V2: Components.Schemas.ShardLayoutV2) {
                    self.V2 = V2
                }
                public enum CodingKeys: String, CodingKey {
                    case V2
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.V2 = try container.decode(
                        Components.Schemas.ShardLayoutV2.self,
                        forKey: .V2
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "V2"
                    ])
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayout/case3`.
            case case3(Components.Schemas.ShardLayout.Case3Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A shard layout that maps accounts evenly across all shards -- by calculate the hash of account
        /// id and mod number of shards. This is added to capture the old `account_id_to_shard_id` algorithm,
        /// to keep backward compatibility for some existing tests.
        /// `parent_shards` for `ShardLayoutV1` is always `None`, meaning it can only be the first shard layout
        /// a chain uses.
        ///
        /// - Remark: Generated from `#/components/schemas/ShardLayoutV0`.
        public struct ShardLayoutV0: Codable, Hashable, Sendable {
            /// Map accounts evenly across all shards
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV0/num_shards`.
            public var num_shards: Swift.Int
            /// Version of the shard layout, this is useful for uniquely identify the shard layout
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV0/version`.
            public var version: Swift.Int
            /// Creates a new `ShardLayoutV0`.
            ///
            /// - Parameters:
            ///   - num_shards: Map accounts evenly across all shards
            ///   - version: Version of the shard layout, this is useful for uniquely identify the shard layout
            public init(
                num_shards: Swift.Int,
                version: Swift.Int
            ) {
                self.num_shards = num_shards
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case num_shards
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/ShardLayoutV1`.
        public struct ShardLayoutV1: Codable, Hashable, Sendable {
            /// The boundary accounts are the accounts on boundaries between shards.
            /// Each shard contains a range of accounts from one boundary account to
            /// another - or the smallest or largest account possible. The total
            /// number of shards is equal to the number of boundary accounts plus 1.
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV1/boundary_accounts`.
            public var boundary_accounts: [Components.Schemas.AccountId]
            /// Maps shards from the last shard layout to shards that it splits to in this shard layout,
            /// Useful for constructing states for the shards.
            /// None for the genesis shard layout
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV1/shards_split_map`.
            public var shards_split_map: [[Components.Schemas.ShardId]]?
            /// Maps shard in this shard layout to their parent shard
            /// Since shard_ids always range from 0 to num_shards - 1, we use vec instead of a hashmap
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV1/to_parent_shard_map`.
            public var to_parent_shard_map: [Components.Schemas.ShardId]?
            /// Version of the shard layout, this is useful for uniquely identify the shard layout
            ///
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV1/version`.
            public var version: Swift.Int
            /// Creates a new `ShardLayoutV1`.
            ///
            /// - Parameters:
            ///   - boundary_accounts: The boundary accounts are the accounts on boundaries between shards.
            ///   - shards_split_map: Maps shards from the last shard layout to shards that it splits to in this shard layout,
            ///   - to_parent_shard_map: Maps shard in this shard layout to their parent shard
            ///   - version: Version of the shard layout, this is useful for uniquely identify the shard layout
            public init(
                boundary_accounts: [Components.Schemas.AccountId],
                shards_split_map: [[Components.Schemas.ShardId]]? = nil,
                to_parent_shard_map: [Components.Schemas.ShardId]? = nil,
                version: Swift.Int
            ) {
                self.boundary_accounts = boundary_accounts
                self.shards_split_map = shards_split_map
                self.to_parent_shard_map = to_parent_shard_map
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case boundary_accounts
                case shards_split_map
                case to_parent_shard_map
                case version
            }
        }
        /// Counterpart to `ShardLayoutV2` composed of maps with string keys to aid
        /// serde serialization.
        ///
        /// - Remark: Generated from `#/components/schemas/ShardLayoutV2`.
        public struct ShardLayoutV2: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/boundary_accounts`.
            public var boundary_accounts: [Components.Schemas.AccountId]
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/id_to_index_map`.
            public struct id_to_index_mapPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Int]
                /// Creates a new `id_to_index_mapPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Int] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/id_to_index_map`.
            public var id_to_index_map: Components.Schemas.ShardLayoutV2.id_to_index_mapPayload
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/index_to_id_map`.
            public struct index_to_id_mapPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ShardId]
                /// Creates a new `index_to_id_mapPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ShardId] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/index_to_id_map`.
            public var index_to_id_map: Components.Schemas.ShardLayoutV2.index_to_id_mapPayload
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/shard_ids`.
            public var shard_ids: [Components.Schemas.ShardId]
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/shards_parent_map`.
            public struct shards_parent_mapPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Components.Schemas.ShardId]
                /// Creates a new `shards_parent_mapPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Components.Schemas.ShardId] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/shards_parent_map`.
            public var shards_parent_map: Components.Schemas.ShardLayoutV2.shards_parent_mapPayload?
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/shards_split_map`.
            public struct shards_split_mapPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: [Components.Schemas.ShardId]]
                /// Creates a new `shards_split_mapPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: [Components.Schemas.ShardId]] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/shards_split_map`.
            public var shards_split_map: Components.Schemas.ShardLayoutV2.shards_split_mapPayload?
            /// - Remark: Generated from `#/components/schemas/ShardLayoutV2/version`.
            public var version: Swift.Int
            /// Creates a new `ShardLayoutV2`.
            ///
            /// - Parameters:
            ///   - boundary_accounts:
            ///   - id_to_index_map:
            ///   - index_to_id_map:
            ///   - shard_ids:
            ///   - shards_parent_map:
            ///   - shards_split_map:
            ///   - version:
            public init(
                boundary_accounts: [Components.Schemas.AccountId],
                id_to_index_map: Components.Schemas.ShardLayoutV2.id_to_index_mapPayload,
                index_to_id_map: Components.Schemas.ShardLayoutV2.index_to_id_mapPayload,
                shard_ids: [Components.Schemas.ShardId],
                shards_parent_map: Components.Schemas.ShardLayoutV2.shards_parent_mapPayload? = nil,
                shards_split_map: Components.Schemas.ShardLayoutV2.shards_split_mapPayload? = nil,
                version: Swift.Int
            ) {
                self.boundary_accounts = boundary_accounts
                self.id_to_index_map = id_to_index_map
                self.index_to_id_map = index_to_id_map
                self.shard_ids = shard_ids
                self.shards_parent_map = shards_parent_map
                self.shards_split_map = shards_split_map
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case boundary_accounts
                case id_to_index_map
                case index_to_id_map
                case shard_ids
                case shards_parent_map
                case shards_split_map
                case version
            }
        }
        /// `ShardUId` is a unique representation for shards from different shard layouts.
        ///
        /// Comparing to `ShardId`, which is just an ordinal number ranging from 0 to NUM_SHARDS-1,
        /// `ShardUId` provides a way to unique identify shards when shard layouts may change across epochs.
        /// This is important because we store states indexed by shards in our database, so we need a
        /// way to unique identify shard even when shards change across epochs.
        /// Another difference between `ShardUId` and `ShardId` is that `ShardUId` should only exist in
        /// a node's internal state while `ShardId` can be exposed to outside APIs and used in protocol
        /// level information (for example, `ShardChunkHeader` contains `ShardId` instead of `ShardUId`)
        ///
        /// - Remark: Generated from `#/components/schemas/ShardUId`.
        public struct ShardUId: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ShardUId/shard_id`.
            public var shard_id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ShardUId/version`.
            public var version: Swift.Int
            /// Creates a new `ShardUId`.
            ///
            /// - Parameters:
            ///   - shard_id:
            ///   - version:
            public init(
                shard_id: Swift.Int,
                version: Swift.Int
            ) {
                self.shard_id = shard_id
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case shard_id
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/Signature`.
        public typealias Signature = Swift.String
        /// - Remark: Generated from `#/components/schemas/SignedDelegateAction`.
        public struct SignedDelegateAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SignedDelegateAction/delegate_action`.
            public var delegate_action: Components.Schemas.DelegateAction
            /// - Remark: Generated from `#/components/schemas/SignedDelegateAction/signature`.
            public var signature: Components.Schemas.Signature
            /// Creates a new `SignedDelegateAction`.
            ///
            /// - Parameters:
            ///   - delegate_action:
            ///   - signature:
            public init(
                delegate_action: Components.Schemas.DelegateAction,
                signature: Components.Schemas.Signature
            ) {
                self.delegate_action = delegate_action
                self.signature = signature
            }
            public enum CodingKeys: String, CodingKey {
                case delegate_action
                case signature
            }
        }
        /// - Remark: Generated from `#/components/schemas/SignedTransaction`.
        public typealias SignedTransaction = OpenAPIRuntime.Base64EncodedData
        /// - Remark: Generated from `#/components/schemas/SignedTransactionView`.
        public struct SignedTransactionView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/actions`.
            public var actions: [Components.Schemas.ActionView]
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/hash`.
            public var hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/nonce`.
            public var nonce: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/priority_fee`.
            public var priority_fee: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/receiver_id`.
            public var receiver_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/signature`.
            public var signature: Components.Schemas.Signature
            /// - Remark: Generated from `#/components/schemas/SignedTransactionView/signer_id`.
            public var signer_id: Components.Schemas.AccountId
            /// Creates a new `SignedTransactionView`.
            ///
            /// - Parameters:
            ///   - actions:
            ///   - hash:
            ///   - nonce:
            ///   - priority_fee:
            ///   - public_key:
            ///   - receiver_id:
            ///   - signature:
            ///   - signer_id:
            public init(
                actions: [Components.Schemas.ActionView],
                hash: Components.Schemas.CryptoHash,
                nonce: Swift.Int,
                priority_fee: Swift.Int? = nil,
                public_key: Components.Schemas.PublicKey,
                receiver_id: Components.Schemas.AccountId,
                signature: Components.Schemas.Signature,
                signer_id: Components.Schemas.AccountId
            ) {
                self.actions = actions
                self.hash = hash
                self.nonce = nonce
                self.priority_fee = priority_fee
                self.public_key = public_key
                self.receiver_id = receiver_id
                self.signature = signature
                self.signer_id = signer_id
            }
            public enum CodingKeys: String, CodingKey {
                case actions
                case hash
                case nonce
                case priority_fee
                case public_key
                case receiver_id
                case signature
                case signer_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/SlashedValidator`.
        public struct SlashedValidator: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SlashedValidator/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/SlashedValidator/is_double_sign`.
            public var is_double_sign: Swift.Bool
            /// Creates a new `SlashedValidator`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - is_double_sign:
            public init(
                account_id: Components.Schemas.AccountId,
                is_double_sign: Swift.Bool
            ) {
                self.account_id = account_id
                self.is_double_sign = is_double_sign
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case is_double_sign
            }
        }
        /// An action which stakes signer_id tokens and setup's validator public key
        ///
        /// - Remark: Generated from `#/components/schemas/StakeAction`.
        public struct StakeAction: Codable, Hashable, Sendable {
            /// Validator key which will be used to sign transactions on behalf of signer_id
            ///
            /// - Remark: Generated from `#/components/schemas/StakeAction/public_key`.
            public struct public_keyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StakeAction/public_key/value1`.
                public var value1: Components.Schemas.PublicKey
                /// Creates a new `public_keyPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.PublicKey) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Validator key which will be used to sign transactions on behalf of signer_id
            ///
            /// - Remark: Generated from `#/components/schemas/StakeAction/public_key`.
            public var public_key: Components.Schemas.StakeAction.public_keyPayload
            /// Amount of tokens to stake.
            ///
            /// - Remark: Generated from `#/components/schemas/StakeAction/stake`.
            public struct stakePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StakeAction/stake/value1`.
                public var value1: Components.Schemas.NearToken
                /// Creates a new `stakePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.NearToken) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// Amount of tokens to stake.
            ///
            /// - Remark: Generated from `#/components/schemas/StakeAction/stake`.
            public var stake: Components.Schemas.StakeAction.stakePayload
            /// Creates a new `StakeAction`.
            ///
            /// - Parameters:
            ///   - public_key: Validator key which will be used to sign transactions on behalf of signer_id
            ///   - stake: Amount of tokens to stake.
            public init(
                public_key: Components.Schemas.StakeAction.public_keyPayload,
                stake: Components.Schemas.StakeAction.stakePayload
            ) {
                self.public_key = public_key
                self.stake = stake
            }
            public enum CodingKeys: String, CodingKey {
                case public_key
                case stake
            }
        }
        /// See crate::types::StateChangeCause for details.
        ///
        /// - Remark: Generated from `#/components/schemas/StateChangeCauseView`.
        @frozen public enum StateChangeCauseView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case not_writable_to_disk = "not_writable_to_disk"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case1/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case1Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case1`.
            case case1(Components.Schemas.StateChangeCauseView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case initial_state = "initial_state"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case2/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case2Payload._typePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case2Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case2`.
            case case2(Components.Schemas.StateChangeCauseView.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case3/tx_hash`.
                public var tx_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case3/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case transaction_processing = "transaction_processing"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case3/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case3Payload._typePayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - tx_hash:
                ///   - _type:
                public init(
                    tx_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.StateChangeCauseView.Case3Payload._typePayload
                ) {
                    self.tx_hash = tx_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case tx_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case3`.
            case case3(Components.Schemas.StateChangeCauseView.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case4/receipt_hash`.
                public var receipt_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case4/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case action_receipt_processing_started = "action_receipt_processing_started"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case4/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case4Payload._typePayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - receipt_hash:
                ///   - _type:
                public init(
                    receipt_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.StateChangeCauseView.Case4Payload._typePayload
                ) {
                    self.receipt_hash = receipt_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case receipt_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case4`.
            case case4(Components.Schemas.StateChangeCauseView.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case5/receipt_hash`.
                public var receipt_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case5/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case action_receipt_gas_reward = "action_receipt_gas_reward"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case5/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case5Payload._typePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - receipt_hash:
                ///   - _type:
                public init(
                    receipt_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.StateChangeCauseView.Case5Payload._typePayload
                ) {
                    self.receipt_hash = receipt_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case receipt_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case5`.
            case case5(Components.Schemas.StateChangeCauseView.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case6/receipt_hash`.
                public var receipt_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case6/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case receipt_processing = "receipt_processing"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case6/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case6Payload._typePayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - receipt_hash:
                ///   - _type:
                public init(
                    receipt_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.StateChangeCauseView.Case6Payload._typePayload
                ) {
                    self.receipt_hash = receipt_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case receipt_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case6`.
            case case6(Components.Schemas.StateChangeCauseView.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case7/receipt_hash`.
                public var receipt_hash: Components.Schemas.CryptoHash
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case7/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case postponed_receipt = "postponed_receipt"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case7/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case7Payload._typePayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - receipt_hash:
                ///   - _type:
                public init(
                    receipt_hash: Components.Schemas.CryptoHash,
                    _type: Components.Schemas.StateChangeCauseView.Case7Payload._typePayload
                ) {
                    self.receipt_hash = receipt_hash
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case receipt_hash
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case7`.
            case case7(Components.Schemas.StateChangeCauseView.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case8/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case updated_delayed_receipts = "updated_delayed_receipts"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case8/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case8Payload._typePayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case8Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case8`.
            case case8(Components.Schemas.StateChangeCauseView.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case9/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case validator_accounts_update = "validator_accounts_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case9/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case9Payload._typePayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case9Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case9`.
            case case9(Components.Schemas.StateChangeCauseView.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case10/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case migration = "migration"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case10/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case10Payload._typePayload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case10Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case10`.
            case case10(Components.Schemas.StateChangeCauseView.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case11/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case bandwidth_scheduler_state_update = "bandwidth_scheduler_state_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case11/type`.
                public var _type: Components.Schemas.StateChangeCauseView.Case11Payload._typePayload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - _type:
                public init(_type: Components.Schemas.StateChangeCauseView.Case11Payload._typePayload) {
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeCauseView/case11`.
            case case11(Components.Schemas.StateChangeCauseView.Case11Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// It is a [serializable view] of [`StateChangeKind`].
        ///
        /// [serializable view]: ./index.html
        /// [`StateChangeKind`]: ../types/struct.StateChangeKind.html
        ///
        /// - Remark: Generated from `#/components/schemas/StateChangeKindView`.
        @frozen public enum StateChangeKindView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case1/account_id`.
                public var account_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case account_touched = "account_touched"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case1/type`.
                public var _type: Components.Schemas.StateChangeKindView.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - account_id:
                ///   - _type:
                public init(
                    account_id: Components.Schemas.AccountId,
                    _type: Components.Schemas.StateChangeKindView.Case1Payload._typePayload
                ) {
                    self.account_id = account_id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case account_id
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case1`.
            case case1(Components.Schemas.StateChangeKindView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case2/account_id`.
                public var account_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case access_key_touched = "access_key_touched"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case2/type`.
                public var _type: Components.Schemas.StateChangeKindView.Case2Payload._typePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - account_id:
                ///   - _type:
                public init(
                    account_id: Components.Schemas.AccountId,
                    _type: Components.Schemas.StateChangeKindView.Case2Payload._typePayload
                ) {
                    self.account_id = account_id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case account_id
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case2`.
            case case2(Components.Schemas.StateChangeKindView.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case3/account_id`.
                public var account_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case3/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case data_touched = "data_touched"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case3/type`.
                public var _type: Components.Schemas.StateChangeKindView.Case3Payload._typePayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - account_id:
                ///   - _type:
                public init(
                    account_id: Components.Schemas.AccountId,
                    _type: Components.Schemas.StateChangeKindView.Case3Payload._typePayload
                ) {
                    self.account_id = account_id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case account_id
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case3`.
            case case3(Components.Schemas.StateChangeKindView.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case4/account_id`.
                public var account_id: Components.Schemas.AccountId
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case4/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case contract_code_touched = "contract_code_touched"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case4/type`.
                public var _type: Components.Schemas.StateChangeKindView.Case4Payload._typePayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - account_id:
                ///   - _type:
                public init(
                    account_id: Components.Schemas.AccountId,
                    _type: Components.Schemas.StateChangeKindView.Case4Payload._typePayload
                ) {
                    self.account_id = account_id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case account_id
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeKindView/case4`.
            case case4(Components.Schemas.StateChangeKindView.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView`.
        @frozen public enum StateChangeWithCauseView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// A view of the account
                ///
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/amount`.
                    public var amount: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/code_hash`.
                    public var code_hash: Components.Schemas.CryptoHash
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_account_id`.
                    public struct global_contract_account_idPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_account_id/value1`.
                        public var value1: Components.Schemas.AccountId?
                        /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_account_id/value2`.
                        public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                        /// Creates a new `global_contract_account_idPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.AccountId? = nil,
                            value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                            try self.value2?.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_account_id`.
                    public var global_contract_account_id: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload.global_contract_account_idPayload?
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_hash`.
                    public struct global_contract_hashPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_hash/value1`.
                        public var value1: Components.Schemas.CryptoHash?
                        /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_hash/value2`.
                        public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                        /// Creates a new `global_contract_hashPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        public init(
                            value1: Components.Schemas.CryptoHash? = nil,
                            value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self.value1 = try decoder.decodeFromSingleValueContainer()
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self.value2 = try .init(from: decoder)
                            } catch {
                                errors.append(error)
                            }
                            try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                                [
                                    self.value1,
                                    self.value2
                                ],
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            try encoder.encodeFirstNonNilValueToSingleValueContainer([
                                self.value1
                            ])
                            try self.value2?.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/global_contract_hash`.
                    public var global_contract_hash: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload.global_contract_hashPayload?
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/locked`.
                    public var locked: Components.Schemas.NearToken
                    /// TODO(2271): deprecated.
                    ///
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/storage_paid_at`.
                    public var storage_paid_at: Swift.Int?
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change/storage_usage`.
                    public var storage_usage: Swift.Int
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - amount:
                    ///   - code_hash:
                    ///   - global_contract_account_id:
                    ///   - global_contract_hash:
                    ///   - locked:
                    ///   - storage_paid_at: TODO(2271): deprecated.
                    ///   - storage_usage:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        amount: Components.Schemas.NearToken,
                        code_hash: Components.Schemas.CryptoHash,
                        global_contract_account_id: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload.global_contract_account_idPayload? = nil,
                        global_contract_hash: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload.global_contract_hashPayload? = nil,
                        locked: Components.Schemas.NearToken,
                        storage_paid_at: Swift.Int? = nil,
                        storage_usage: Swift.Int
                    ) {
                        self.account_id = account_id
                        self.amount = amount
                        self.code_hash = code_hash
                        self.global_contract_account_id = global_contract_account_id
                        self.global_contract_hash = global_contract_hash
                        self.locked = locked
                        self.storage_paid_at = storage_paid_at
                        self.storage_usage = storage_usage
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case amount
                        case code_hash
                        case global_contract_account_id
                        case global_contract_hash
                        case locked
                        case storage_paid_at
                        case storage_usage
                    }
                }
                /// A view of the account
                ///
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case account_update = "account_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case1Payload._typePayload
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - change: A view of the account
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case1Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case1Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case1`.
            case case1(Components.Schemas.StateChangeWithCauseView.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case2Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case account_deletion = "account_deletion"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case2Payload._typePayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case2Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case2Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case2`.
            case case2(Components.Schemas.StateChangeWithCauseView.Case2Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/change/access_key`.
                    public var access_key: Components.Schemas.AccessKeyView
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/change/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - access_key:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        access_key: Components.Schemas.AccessKeyView,
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.access_key = access_key
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case access_key
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case3Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case access_key_update = "access_key_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case3Payload._typePayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case3Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case3Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case3`.
            case case3(Components.Schemas.StateChangeWithCauseView.Case3Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/change/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case4Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case access_key_deletion = "access_key_deletion"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case4Payload._typePayload
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case4Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case4Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case4`.
            case case4(Components.Schemas.StateChangeWithCauseView.Case4Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/change/gas_key`.
                    public var gas_key: Components.Schemas.GasKeyView
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/change/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - gas_key:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        gas_key: Components.Schemas.GasKeyView,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.gas_key = gas_key
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case gas_key
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case5Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gas_key_update = "gas_key_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case5Payload._typePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case5Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case5Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case5`.
            case case5(Components.Schemas.StateChangeWithCauseView.Case5Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change/index`.
                    public var index: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change/nonce`.
                    public var nonce: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - index:
                    ///   - nonce:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        index: Swift.Int,
                        nonce: Swift.Int,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.index = index
                        self.nonce = nonce
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case index
                        case nonce
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case6Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gas_key_nonce_update = "gas_key_nonce_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case6Payload._typePayload
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case6Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case6Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case6`.
            case case6(Components.Schemas.StateChangeWithCauseView.Case6Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/change/public_key`.
                    public var public_key: Components.Schemas.PublicKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - public_key:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        public_key: Components.Schemas.PublicKey
                    ) {
                        self.account_id = account_id
                        self.public_key = public_key
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case public_key
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case7Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case gas_key_deletion = "gas_key_deletion"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case7Payload._typePayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case7Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case7Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case7`.
            case case7(Components.Schemas.StateChangeWithCauseView.Case7Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/change/key_base64`.
                    public var key_base64: Components.Schemas.StoreKey
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/change/value_base64`.
                    public var value_base64: Components.Schemas.StoreValue
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - key_base64:
                    ///   - value_base64:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        key_base64: Components.Schemas.StoreKey,
                        value_base64: Components.Schemas.StoreValue
                    ) {
                        self.account_id = account_id
                        self.key_base64 = key_base64
                        self.value_base64 = value_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case key_base64
                        case value_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case8Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case data_update = "data_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case8Payload._typePayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case8Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case8Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case8`.
            case case8(Components.Schemas.StateChangeWithCauseView.Case8Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9`.
            public struct Case9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/change/key_base64`.
                    public var key_base64: Components.Schemas.StoreKey
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - key_base64:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        key_base64: Components.Schemas.StoreKey
                    ) {
                        self.account_id = account_id
                        self.key_base64 = key_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case key_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case9Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case data_deletion = "data_deletion"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case9Payload._typePayload
                /// Creates a new `Case9Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case9Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case9Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case9`.
            case case9(Components.Schemas.StateChangeWithCauseView.Case9Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10`.
            public struct Case10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/change/code_base64`.
                    public var code_base64: Swift.String
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    ///   - code_base64:
                    public init(
                        account_id: Components.Schemas.AccountId,
                        code_base64: Swift.String
                    ) {
                        self.account_id = account_id
                        self.code_base64 = code_base64
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                        case code_base64
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case10Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case contract_code_update = "contract_code_update"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case10Payload._typePayload
                /// Creates a new `Case10Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case10Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case10Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case10`.
            case case10(Components.Schemas.StateChangeWithCauseView.Case10Payload)
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11`.
            public struct Case11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11/change`.
                public struct changePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11/change/account_id`.
                    public var account_id: Components.Schemas.AccountId
                    /// Creates a new `changePayload`.
                    ///
                    /// - Parameters:
                    ///   - account_id:
                    public init(account_id: Components.Schemas.AccountId) {
                        self.account_id = account_id
                    }
                    public enum CodingKeys: String, CodingKey {
                        case account_id
                    }
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11/change`.
                public var change: Components.Schemas.StateChangeWithCauseView.Case11Payload.changePayload
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case contract_code_deletion = "contract_code_deletion"
                }
                /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11/type`.
                public var _type: Components.Schemas.StateChangeWithCauseView.Case11Payload._typePayload
                /// Creates a new `Case11Payload`.
                ///
                /// - Parameters:
                ///   - change:
                ///   - _type:
                public init(
                    change: Components.Schemas.StateChangeWithCauseView.Case11Payload.changePayload,
                    _type: Components.Schemas.StateChangeWithCauseView.Case11Payload._typePayload
                ) {
                    self.change = change
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case change
                    case _type = "type"
                }
            }
            /// - Remark: Generated from `#/components/schemas/StateChangeWithCauseView/case11`.
            case case11(Components.Schemas.StateChangeWithCauseView.Case11Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case10(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case11(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                case let .case9(value):
                    try value.encode(to: encoder)
                case let .case10(value):
                    try value.encode(to: encoder)
                case let .case11(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Item of the state, key and value are serialized in base64 and proof for inclusion of given state item.
        ///
        /// - Remark: Generated from `#/components/schemas/StateItem`.
        public struct StateItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateItem/key`.
            public var key: Components.Schemas.StoreKey
            /// - Remark: Generated from `#/components/schemas/StateItem/value`.
            public var value: Components.Schemas.StoreValue
            /// Creates a new `StateItem`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - value:
            public init(
                key: Components.Schemas.StoreKey,
                value: Components.Schemas.StoreValue
            ) {
                self.key = key
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case key
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/StateSyncConfig`.
        public struct StateSyncConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateSyncConfig/concurrency`.
            public var concurrency: Components.Schemas.SyncConcurrency?
            /// `none` value disables state dump to external storage.
            ///
            /// - Remark: Generated from `#/components/schemas/StateSyncConfig/dump`.
            public struct dumpPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StateSyncConfig/dump/value1`.
                public var value1: Components.Schemas.DumpConfig?
                /// - Remark: Generated from `#/components/schemas/StateSyncConfig/dump/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `dumpPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.DumpConfig? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1?.encode(to: encoder)
                    try self.value2?.encode(to: encoder)
                }
            }
            /// `none` value disables state dump to external storage.
            ///
            /// - Remark: Generated from `#/components/schemas/StateSyncConfig/dump`.
            public var dump: Components.Schemas.StateSyncConfig.dumpPayload?
            /// Zstd compression level for state parts.
            ///
            /// - Remark: Generated from `#/components/schemas/StateSyncConfig/parts_compression_lvl`.
            public var parts_compression_lvl: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/StateSyncConfig/sync`.
            public var sync: Components.Schemas.SyncConfig?
            /// Creates a new `StateSyncConfig`.
            ///
            /// - Parameters:
            ///   - concurrency:
            ///   - dump: `none` value disables state dump to external storage.
            ///   - parts_compression_lvl: Zstd compression level for state parts.
            ///   - sync:
            public init(
                concurrency: Components.Schemas.SyncConcurrency? = nil,
                dump: Components.Schemas.StateSyncConfig.dumpPayload? = nil,
                parts_compression_lvl: Swift.Int32? = nil,
                sync: Components.Schemas.SyncConfig? = nil
            ) {
                self.concurrency = concurrency
                self.dump = dump
                self.parts_compression_lvl = parts_compression_lvl
                self.sync = sync
            }
            public enum CodingKeys: String, CodingKey {
                case concurrency
                case dump
                case parts_compression_lvl
                case sync
            }
        }
        /// - Remark: Generated from `#/components/schemas/StatusSyncInfo`.
        public struct StatusSyncInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_hash`.
            public struct earliest_block_hashPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_hash/value1`.
                public var value1: Components.Schemas.CryptoHash?
                /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_hash/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `earliest_block_hashPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.CryptoHash? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_hash`.
            public var earliest_block_hash: Components.Schemas.StatusSyncInfo.earliest_block_hashPayload?
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_height`.
            public var earliest_block_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/earliest_block_time`.
            public var earliest_block_time: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/epoch_id`.
            public struct epoch_idPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/epoch_id/value1`.
                public var value1: Components.Schemas.EpochId?
                /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/epoch_id/value2`.
                public var value2: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `epoch_idPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                public init(
                    value1: Components.Schemas.EpochId? = nil,
                    value2: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self.value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self.value2 = try .init(from: decoder)
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            self.value1,
                            self.value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        self.value1
                    ])
                    try self.value2?.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/epoch_id`.
            public var epoch_id: Components.Schemas.StatusSyncInfo.epoch_idPayload?
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/epoch_start_height`.
            public var epoch_start_height: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/latest_block_hash`.
            public var latest_block_hash: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/latest_block_height`.
            public var latest_block_height: Swift.Int
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/latest_block_time`.
            public var latest_block_time: Swift.String
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/latest_state_root`.
            public var latest_state_root: Components.Schemas.CryptoHash
            /// - Remark: Generated from `#/components/schemas/StatusSyncInfo/syncing`.
            public var syncing: Swift.Bool
            /// Creates a new `StatusSyncInfo`.
            ///
            /// - Parameters:
            ///   - earliest_block_hash:
            ///   - earliest_block_height:
            ///   - earliest_block_time:
            ///   - epoch_id:
            ///   - epoch_start_height:
            ///   - latest_block_hash:
            ///   - latest_block_height:
            ///   - latest_block_time:
            ///   - latest_state_root:
            ///   - syncing:
            public init(
                earliest_block_hash: Components.Schemas.StatusSyncInfo.earliest_block_hashPayload? = nil,
                earliest_block_height: Swift.Int? = nil,
                earliest_block_time: Swift.String? = nil,
                epoch_id: Components.Schemas.StatusSyncInfo.epoch_idPayload? = nil,
                epoch_start_height: Swift.Int? = nil,
                latest_block_hash: Components.Schemas.CryptoHash,
                latest_block_height: Swift.Int,
                latest_block_time: Swift.String,
                latest_state_root: Components.Schemas.CryptoHash,
                syncing: Swift.Bool
            ) {
                self.earliest_block_hash = earliest_block_hash
                self.earliest_block_height = earliest_block_height
                self.earliest_block_time = earliest_block_time
                self.epoch_id = epoch_id
                self.epoch_start_height = epoch_start_height
                self.latest_block_hash = latest_block_hash
                self.latest_block_height = latest_block_height
                self.latest_block_time = latest_block_time
                self.latest_state_root = latest_state_root
                self.syncing = syncing
            }
            public enum CodingKeys: String, CodingKey {
                case earliest_block_hash
                case earliest_block_height
                case earliest_block_time
                case epoch_id
                case epoch_start_height
                case latest_block_hash
                case latest_block_height
                case latest_block_time
                case latest_state_root
                case syncing
            }
        }
        /// Errors which may occur during working with trie storages, storing
        /// trie values (trie nodes and state values) by their hashes.
        ///
        /// - Remark: Generated from `#/components/schemas/StorageError`.
        @frozen public enum StorageError: Codable, Hashable, Sendable {
            /// Key-value db internal failure
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case StorageInternalError = "StorageInternalError"
            }
            /// Key-value db internal failure
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case1`.
            case case1(Components.Schemas.StorageError.Case1Payload)
            /// Requested trie value by its hash which is missing in storage.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StorageError/case2/MissingTrieValue`.
                public var MissingTrieValue: Components.Schemas.MissingTrieValue
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - MissingTrieValue:
                public init(MissingTrieValue: Components.Schemas.MissingTrieValue) {
                    self.MissingTrieValue = MissingTrieValue
                }
                public enum CodingKeys: String, CodingKey {
                    case MissingTrieValue
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.MissingTrieValue = try container.decode(
                        Components.Schemas.MissingTrieValue.self,
                        forKey: .MissingTrieValue
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "MissingTrieValue"
                    ])
                }
            }
            /// Requested trie value by its hash which is missing in storage.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case2`.
            case case2(Components.Schemas.StorageError.Case2Payload)
            /// Found trie node which shouldn't be part of state. Raised during
            /// validation of state sync parts where incorrect node was passed.
            /// TODO (#8997): consider including hash of trie node.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case UnexpectedTrieValue = "UnexpectedTrieValue"
            }
            /// Found trie node which shouldn't be part of state. Raised during
            /// validation of state sync parts where incorrect node was passed.
            /// TODO (#8997): consider including hash of trie node.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case3`.
            case case3(Components.Schemas.StorageError.Case3Payload)
            /// Either invalid state or key-value db is corrupted.
            /// For PartialStorage it cannot be corrupted.
            /// Error message is unreliable and for debugging purposes only. It's also probably ok to
            /// panic in every place that produces this error.
            /// We can check if db is corrupted by verifying everything in the state trie.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StorageError/case4/StorageInconsistentState`.
                public var StorageInconsistentState: Swift.String
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - StorageInconsistentState:
                public init(StorageInconsistentState: Swift.String) {
                    self.StorageInconsistentState = StorageInconsistentState
                }
                public enum CodingKeys: String, CodingKey {
                    case StorageInconsistentState
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.StorageInconsistentState = try container.decode(
                        Swift.String.self,
                        forKey: .StorageInconsistentState
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "StorageInconsistentState"
                    ])
                }
            }
            /// Either invalid state or key-value db is corrupted.
            /// For PartialStorage it cannot be corrupted.
            /// Error message is unreliable and for debugging purposes only. It's also probably ok to
            /// panic in every place that produces this error.
            /// We can check if db is corrupted by verifying everything in the state trie.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case4`.
            case case4(Components.Schemas.StorageError.Case4Payload)
            /// Flat storage error, meaning that it doesn't support some block anymore.
            /// We guarantee that such block cannot become final, thus block processing
            /// must resume normally.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StorageError/case5/FlatStorageBlockNotSupported`.
                public var FlatStorageBlockNotSupported: Swift.String
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - FlatStorageBlockNotSupported:
                public init(FlatStorageBlockNotSupported: Swift.String) {
                    self.FlatStorageBlockNotSupported = FlatStorageBlockNotSupported
                }
                public enum CodingKeys: String, CodingKey {
                    case FlatStorageBlockNotSupported
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.FlatStorageBlockNotSupported = try container.decode(
                        Swift.String.self,
                        forKey: .FlatStorageBlockNotSupported
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "FlatStorageBlockNotSupported"
                    ])
                }
            }
            /// Flat storage error, meaning that it doesn't support some block anymore.
            /// We guarantee that such block cannot become final, thus block processing
            /// must resume normally.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case5`.
            case case5(Components.Schemas.StorageError.Case5Payload)
            /// In-memory trie could not be loaded for some reason.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/StorageError/case6/MemTrieLoadingError`.
                public var MemTrieLoadingError: Swift.String
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - MemTrieLoadingError:
                public init(MemTrieLoadingError: Swift.String) {
                    self.MemTrieLoadingError = MemTrieLoadingError
                }
                public enum CodingKeys: String, CodingKey {
                    case MemTrieLoadingError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.MemTrieLoadingError = try container.decode(
                        Swift.String.self,
                        forKey: .MemTrieLoadingError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "MemTrieLoadingError"
                    ])
                }
            }
            /// In-memory trie could not be loaded for some reason.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageError/case6`.
            case case6(Components.Schemas.StorageError.Case6Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// This enum represents if a storage_get call will be performed through flat storage or trie
        ///
        /// - Remark: Generated from `#/components/schemas/StorageGetMode`.
        @frozen public enum StorageGetMode: String, Codable, Hashable, Sendable, CaseIterable {
            case FlatStorage = "FlatStorage"
            case Trie = "Trie"
        }
        /// Describes cost of storage per block
        ///
        /// - Remark: Generated from `#/components/schemas/StorageUsageConfigView`.
        public struct StorageUsageConfigView: Codable, Hashable, Sendable {
            /// Number of bytes for an account record, including rounding up for account id.
            ///
            /// - Remark: Generated from `#/components/schemas/StorageUsageConfigView/num_bytes_account`.
            public var num_bytes_account: Swift.Int
            /// Additional number of bytes for a k/v record
            ///
            /// - Remark: Generated from `#/components/schemas/StorageUsageConfigView/num_extra_bytes_record`.
            public var num_extra_bytes_record: Swift.Int
            /// Creates a new `StorageUsageConfigView`.
            ///
            /// - Parameters:
            ///   - num_bytes_account: Number of bytes for an account record, including rounding up for account id.
            ///   - num_extra_bytes_record: Additional number of bytes for a k/v record
            public init(
                num_bytes_account: Swift.Int,
                num_extra_bytes_record: Swift.Int
            ) {
                self.num_bytes_account = num_bytes_account
                self.num_extra_bytes_record = num_extra_bytes_record
            }
            public enum CodingKeys: String, CodingKey {
                case num_bytes_account
                case num_extra_bytes_record
            }
        }
        /// This type is used to mark keys (arrays of bytes) that are queried from store.
        ///
        /// NOTE: Currently, this type is only used in the view_client and RPC to be able to transparently
        /// pretty-serialize the bytes arrays as base64-encoded strings (see `serialize.rs`).
        ///
        /// - Remark: Generated from `#/components/schemas/StoreKey`.
        public typealias StoreKey = Swift.String
        /// This type is used to mark values returned from store (arrays of bytes).
        ///
        /// NOTE: Currently, this type is only used in the view_client and RPC to be able to transparently
        /// pretty-serialize the bytes arrays as base64-encoded strings (see `serialize.rs`).
        ///
        /// - Remark: Generated from `#/components/schemas/StoreValue`.
        public typealias StoreValue = Swift.String
        /// - Remark: Generated from `#/components/schemas/SyncCheckpoint`.
        @frozen public enum SyncCheckpoint: String, Codable, Hashable, Sendable, CaseIterable {
            case genesis = "genesis"
            case earliest_available = "earliest_available"
        }
        /// - Remark: Generated from `#/components/schemas/SyncConcurrency`.
        public struct SyncConcurrency: Codable, Hashable, Sendable {
            /// Maximum number of "apply parts" tasks that can be performed in parallel.
            /// This is a very disk-heavy task and therefore we set this to a low limit,
            /// or else the rocksdb contention makes the whole server freeze up.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConcurrency/apply`.
            public var apply: Swift.Int
            /// Maximum number of "apply parts" tasks that can be performed in parallel
            /// during catchup. We set this to a very low value to avoid overloading the
            /// node while it is still performing normal tasks.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConcurrency/apply_during_catchup`.
            public var apply_during_catchup: Swift.Int
            /// Maximum number of outstanding requests for decentralized state sync.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConcurrency/peer_downloads`.
            public var peer_downloads: Swift.Int
            /// The maximum parallelism to use per shard. This is mostly for fairness, because
            /// the actual rate limiting is done by the TaskTrackers, but this is useful for
            /// balancing the shards a little.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConcurrency/per_shard`.
            public var per_shard: Swift.Int
            /// Creates a new `SyncConcurrency`.
            ///
            /// - Parameters:
            ///   - apply: Maximum number of "apply parts" tasks that can be performed in parallel.
            ///   - apply_during_catchup: Maximum number of "apply parts" tasks that can be performed in parallel
            ///   - peer_downloads: Maximum number of outstanding requests for decentralized state sync.
            ///   - per_shard: The maximum parallelism to use per shard. This is mostly for fairness, because
            public init(
                apply: Swift.Int,
                apply_during_catchup: Swift.Int,
                peer_downloads: Swift.Int,
                per_shard: Swift.Int
            ) {
                self.apply = apply
                self.apply_during_catchup = apply_during_catchup
                self.peer_downloads = peer_downloads
                self.per_shard = per_shard
            }
            public enum CodingKeys: String, CodingKey {
                case apply
                case apply_during_catchup
                case peer_downloads
                case per_shard
            }
        }
        /// Configures how to fetch state parts during state sync.
        ///
        /// - Remark: Generated from `#/components/schemas/SyncConfig`.
        @frozen public enum SyncConfig: Codable, Hashable, Sendable {
            /// Syncs state from the peers without reading anything from external storage.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConfig/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Peers = "Peers"
            }
            /// Syncs state from the peers without reading anything from external storage.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConfig/case1`.
            case case1(Components.Schemas.SyncConfig.Case1Payload)
            /// Expects parts to be available in external storage.
            ///
            /// Usually as a fallback after some number of attempts to use peers.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConfig/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SyncConfig/case2/ExternalStorage`.
                public var ExternalStorage: Components.Schemas.ExternalStorageConfig
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - ExternalStorage:
                public init(ExternalStorage: Components.Schemas.ExternalStorageConfig) {
                    self.ExternalStorage = ExternalStorage
                }
                public enum CodingKeys: String, CodingKey {
                    case ExternalStorage
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ExternalStorage = try container.decode(
                        Components.Schemas.ExternalStorageConfig.self,
                        forKey: .ExternalStorage
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ExternalStorage"
                    ])
                }
            }
            /// Expects parts to be available in external storage.
            ///
            /// Usually as a fallback after some number of attempts to use peers.
            ///
            /// - Remark: Generated from `#/components/schemas/SyncConfig/case2`.
            case case2(Components.Schemas.SyncConfig.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/Tier1ProxyView`.
        public struct Tier1ProxyView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Tier1ProxyView/addr`.
            public var addr: Swift.String
            /// - Remark: Generated from `#/components/schemas/Tier1ProxyView/peer_id`.
            public var peer_id: Components.Schemas.PublicKey
            /// Creates a new `Tier1ProxyView`.
            ///
            /// - Parameters:
            ///   - addr:
            ///   - peer_id:
            public init(
                addr: Swift.String,
                peer_id: Components.Schemas.PublicKey
            ) {
                self.addr = addr
                self.peer_id = peer_id
            }
            public enum CodingKeys: String, CodingKey {
                case addr
                case peer_id
            }
        }
        /// Describes the expected behavior of the node regarding shard tracking.
        /// If the node is an active validator, it will also track the shards it is responsible for as a validator.
        ///
        /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig`.
        @frozen public enum TrackedShardsConfig: Codable, Hashable, Sendable {
            /// Tracks no shards (light client).
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case NoShards = "NoShards"
            }
            /// Tracks no shards (light client).
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case1`.
            case case1(Components.Schemas.TrackedShardsConfig.Case1Payload)
            /// Tracks arbitrary shards.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case2/Shards`.
                public var Shards: [Components.Schemas.ShardUId]
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - Shards:
                public init(Shards: [Components.Schemas.ShardUId]) {
                    self.Shards = Shards
                }
                public enum CodingKeys: String, CodingKey {
                    case Shards
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Shards = try container.decode(
                        [Components.Schemas.ShardUId].self,
                        forKey: .Shards
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Shards"
                    ])
                }
            }
            /// Tracks arbitrary shards.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case2`.
            case case2(Components.Schemas.TrackedShardsConfig.Case2Payload)
            /// Tracks all shards.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case AllShards = "AllShards"
            }
            /// Tracks all shards.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case3`.
            case case3(Components.Schemas.TrackedShardsConfig.Case3Payload)
            /// Tracks shards that are assigned to given validator account.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case4`.
            public struct Case4Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case4/ShadowValidator`.
                public var ShadowValidator: Components.Schemas.AccountId
                /// Creates a new `Case4Payload`.
                ///
                /// - Parameters:
                ///   - ShadowValidator:
                public init(ShadowValidator: Components.Schemas.AccountId) {
                    self.ShadowValidator = ShadowValidator
                }
                public enum CodingKeys: String, CodingKey {
                    case ShadowValidator
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ShadowValidator = try container.decode(
                        Components.Schemas.AccountId.self,
                        forKey: .ShadowValidator
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ShadowValidator"
                    ])
                }
            }
            /// Tracks shards that are assigned to given validator account.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case4`.
            case case4(Components.Schemas.TrackedShardsConfig.Case4Payload)
            /// Rotate between these sets of tracked shards.
            /// Used to simulate the behavior of chunk only producers without staking tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case5/Schedule`.
                public var Schedule: [[Components.Schemas.ShardId]]
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - Schedule:
                public init(Schedule: [[Components.Schemas.ShardId]]) {
                    self.Schedule = Schedule
                }
                public enum CodingKeys: String, CodingKey {
                    case Schedule
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Schedule = try container.decode(
                        [[Components.Schemas.ShardId]].self,
                        forKey: .Schedule
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Schedule"
                    ])
                }
            }
            /// Rotate between these sets of tracked shards.
            /// Used to simulate the behavior of chunk only producers without staking tokens.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case5`.
            case case5(Components.Schemas.TrackedShardsConfig.Case5Payload)
            /// Tracks shards that contain one of the given account.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case6`.
            public struct Case6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case6/Accounts`.
                public var Accounts: [Components.Schemas.AccountId]
                /// Creates a new `Case6Payload`.
                ///
                /// - Parameters:
                ///   - Accounts:
                public init(Accounts: [Components.Schemas.AccountId]) {
                    self.Accounts = Accounts
                }
                public enum CodingKeys: String, CodingKey {
                    case Accounts
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.Accounts = try container.decode(
                        [Components.Schemas.AccountId].self,
                        forKey: .Accounts
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "Accounts"
                    ])
                }
            }
            /// Tracks shards that contain one of the given account.
            ///
            /// - Remark: Generated from `#/components/schemas/TrackedShardsConfig/case6`.
            case case6(Components.Schemas.TrackedShardsConfig.Case6Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try value.encode(to: encoder)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransferAction`.
        public struct TransferAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TransferAction/deposit`.
            public var deposit: Components.Schemas.NearToken
            /// Creates a new `TransferAction`.
            ///
            /// - Parameters:
            ///   - deposit:
            public init(deposit: Components.Schemas.NearToken) {
                self.deposit = deposit
            }
            public enum CodingKeys: String, CodingKey {
                case deposit
            }
        }
        /// Error returned in the ExecutionOutcome in case of failure
        ///
        /// - Remark: Generated from `#/components/schemas/TxExecutionError`.
        @frozen public enum TxExecutionError: Codable, Hashable, Sendable {
            /// An error happened during Action execution
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionError/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TxExecutionError/case1/ActionError`.
                public var ActionError: Components.Schemas.ActionError
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - ActionError:
                public init(ActionError: Components.Schemas.ActionError) {
                    self.ActionError = ActionError
                }
                public enum CodingKeys: String, CodingKey {
                    case ActionError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ActionError = try container.decode(
                        Components.Schemas.ActionError.self,
                        forKey: .ActionError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ActionError"
                    ])
                }
            }
            /// An error happened during Action execution
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionError/case1`.
            case case1(Components.Schemas.TxExecutionError.Case1Payload)
            /// An error happened during Transaction execution
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionError/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TxExecutionError/case2/InvalidTxError`.
                public var InvalidTxError: Components.Schemas.InvalidTxError
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - InvalidTxError:
                public init(InvalidTxError: Components.Schemas.InvalidTxError) {
                    self.InvalidTxError = InvalidTxError
                }
                public enum CodingKeys: String, CodingKey {
                    case InvalidTxError
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.InvalidTxError = try container.decode(
                        Components.Schemas.InvalidTxError.self,
                        forKey: .InvalidTxError
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "InvalidTxError"
                    ])
                }
            }
            /// An error happened during Transaction execution
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionError/case2`.
            case case2(Components.Schemas.TxExecutionError.Case2Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                case let .case2(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/TxExecutionStatus`.
        @frozen public enum TxExecutionStatus: Codable, Hashable, Sendable {
            /// Transaction is waiting to be included into the block
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case NONE = "NONE"
            }
            /// Transaction is waiting to be included into the block
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case1`.
            case case1(Components.Schemas.TxExecutionStatus.Case1Payload)
            /// Transaction is included into the block. The block may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case INCLUDED = "INCLUDED"
            }
            /// Transaction is included into the block. The block may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case2`.
            case case2(Components.Schemas.TxExecutionStatus.Case2Payload)
            /// Transaction is included into the block +
            /// All non-refund transaction receipts finished their execution.
            /// The corresponding blocks for tx and each receipt may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXECUTED_OPTIMISTIC = "EXECUTED_OPTIMISTIC"
            }
            /// Transaction is included into the block +
            /// All non-refund transaction receipts finished their execution.
            /// The corresponding blocks for tx and each receipt may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case3`.
            case case3(Components.Schemas.TxExecutionStatus.Case3Payload)
            /// Transaction is included into finalized block
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case INCLUDED_FINAL = "INCLUDED_FINAL"
            }
            /// Transaction is included into finalized block
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case4`.
            case case4(Components.Schemas.TxExecutionStatus.Case4Payload)
            /// Transaction is included into finalized block +
            /// All non-refund transaction receipts finished their execution.
            /// The corresponding blocks for each receipt may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case5`.
            @frozen public enum Case5Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case EXECUTED = "EXECUTED"
            }
            /// Transaction is included into finalized block +
            /// All non-refund transaction receipts finished their execution.
            /// The corresponding blocks for each receipt may be not finalized yet
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case5`.
            case case5(Components.Schemas.TxExecutionStatus.Case5Payload)
            /// Transaction is included into finalized block +
            /// Execution of all transaction receipts is finalized, including refund receipts
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case FINAL = "FINAL"
            }
            /// Transaction is included into finalized block +
            /// Execution of all transaction receipts is finalized, including refund receipts
            ///
            /// - Remark: Generated from `#/components/schemas/TxExecutionStatus/case6`.
            case case6(Components.Schemas.TxExecutionStatus.Case6Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Use global contract action
        ///
        /// - Remark: Generated from `#/components/schemas/UseGlobalContractAction`.
        public struct UseGlobalContractAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UseGlobalContractAction/contract_identifier`.
            public var contract_identifier: Components.Schemas.GlobalContractIdentifier
            /// Creates a new `UseGlobalContractAction`.
            ///
            /// - Parameters:
            ///   - contract_identifier:
            public init(contract_identifier: Components.Schemas.GlobalContractIdentifier) {
                self.contract_identifier = contract_identifier
            }
            public enum CodingKeys: String, CodingKey {
                case contract_identifier
            }
        }
        /// - Remark: Generated from `#/components/schemas/VMConfigView`.
        public struct VMConfigView: Codable, Hashable, Sendable {
            /// See [VMConfig::deterministic_account_ids](crate::vm::Config::deterministic_account_ids).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/deterministic_account_ids`.
            public var deterministic_account_ids: Swift.Bool
            /// See [VMConfig::discard_custom_sections](crate::vm::Config::discard_custom_sections).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/discard_custom_sections`.
            public var discard_custom_sections: Swift.Bool
            /// See [VMConfig::eth_implicit_accounts](crate::vm::Config::eth_implicit_accounts).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/eth_implicit_accounts`.
            public var eth_implicit_accounts: Swift.Bool
            /// Costs for runtime externals
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/ext_costs`.
            public struct ext_costsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VMConfigView/ext_costs/value1`.
                public var value1: Components.Schemas.ExtCostsConfigView
                /// Creates a new `ext_costsPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ExtCostsConfigView) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Costs for runtime externals
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/ext_costs`.
            public var ext_costs: Components.Schemas.VMConfigView.ext_costsPayload
            /// See [VMConfig::fix_contract_loading_cost](crate::vm::Config::fix_contract_loading_cost).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/fix_contract_loading_cost`.
            public var fix_contract_loading_cost: Swift.Bool
            /// See [VMConfig::global_contract_host_fns](crate::vm::Config::global_contract_host_fns).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/global_contract_host_fns`.
            public var global_contract_host_fns: Swift.Bool
            /// Gas cost of a growing memory by single page.
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/grow_mem_cost`.
            public var grow_mem_cost: Swift.Int
            /// See [VMConfig::implicit_account_creation](crate::vm::Config::implicit_account_creation).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/implicit_account_creation`.
            public var implicit_account_creation: Swift.Bool
            /// Describes limits for VM and Runtime.
            ///
            /// TODO: Consider changing this to `VMLimitConfigView` to avoid dependency
            /// on runtime.
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/limit_config`.
            public struct limit_configPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VMConfigView/limit_config/value1`.
                public var value1: Components.Schemas.LimitConfig
                /// Creates a new `limit_configPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.LimitConfig) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// Describes limits for VM and Runtime.
            ///
            /// TODO: Consider changing this to `VMLimitConfigView` to avoid dependency
            /// on runtime.
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/limit_config`.
            public var limit_config: Components.Schemas.VMConfigView.limit_configPayload
            /// Base gas cost of a linear operation
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/linear_op_base_cost`.
            public var linear_op_base_cost: Swift.Int
            /// Unit gas cost of a linear operation
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/linear_op_unit_cost`.
            public var linear_op_unit_cost: Swift.Int
            /// See [VMConfig::reftypes_bulk_memory](crate::vm::Config::reftypes_bulk_memory).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/reftypes_bulk_memory`.
            public var reftypes_bulk_memory: Swift.Bool
            /// Gas cost of a regular operation.
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/regular_op_cost`.
            public var regular_op_cost: Swift.Int
            /// See [VMConfig::saturating_float_to_int](crate::vm::Config::saturating_float_to_int).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/saturating_float_to_int`.
            public var saturating_float_to_int: Swift.Bool
            /// See [VMConfig::storage_get_mode](crate::vm::Config::storage_get_mode).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/storage_get_mode`.
            public struct storage_get_modePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VMConfigView/storage_get_mode/value1`.
                public var value1: Components.Schemas.StorageGetMode
                /// Creates a new `storage_get_modePayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.StorageGetMode) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// See [VMConfig::storage_get_mode](crate::vm::Config::storage_get_mode).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/storage_get_mode`.
            public var storage_get_mode: Components.Schemas.VMConfigView.storage_get_modePayload
            /// See [VMConfig::vm_kind](crate::vm::Config::vm_kind).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/vm_kind`.
            public struct vm_kindPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/VMConfigView/vm_kind/value1`.
                public var value1: Components.Schemas.VMKind
                /// Creates a new `vm_kindPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.VMKind) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try decoder.decodeFromSingleValueContainer()
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeToSingleValueContainer(self.value1)
                }
            }
            /// See [VMConfig::vm_kind](crate::vm::Config::vm_kind).
            ///
            /// - Remark: Generated from `#/components/schemas/VMConfigView/vm_kind`.
            public var vm_kind: Components.Schemas.VMConfigView.vm_kindPayload
            /// Creates a new `VMConfigView`.
            ///
            /// - Parameters:
            ///   - deterministic_account_ids: See [VMConfig::deterministic_account_ids](crate::vm::Config::deterministic_account_ids).
            ///   - discard_custom_sections: See [VMConfig::discard_custom_sections](crate::vm::Config::discard_custom_sections).
            ///   - eth_implicit_accounts: See [VMConfig::eth_implicit_accounts](crate::vm::Config::eth_implicit_accounts).
            ///   - ext_costs: Costs for runtime externals
            ///   - fix_contract_loading_cost: See [VMConfig::fix_contract_loading_cost](crate::vm::Config::fix_contract_loading_cost).
            ///   - global_contract_host_fns: See [VMConfig::global_contract_host_fns](crate::vm::Config::global_contract_host_fns).
            ///   - grow_mem_cost: Gas cost of a growing memory by single page.
            ///   - implicit_account_creation: See [VMConfig::implicit_account_creation](crate::vm::Config::implicit_account_creation).
            ///   - limit_config: Describes limits for VM and Runtime.
            ///   - linear_op_base_cost: Base gas cost of a linear operation
            ///   - linear_op_unit_cost: Unit gas cost of a linear operation
            ///   - reftypes_bulk_memory: See [VMConfig::reftypes_bulk_memory](crate::vm::Config::reftypes_bulk_memory).
            ///   - regular_op_cost: Gas cost of a regular operation.
            ///   - saturating_float_to_int: See [VMConfig::saturating_float_to_int](crate::vm::Config::saturating_float_to_int).
            ///   - storage_get_mode: See [VMConfig::storage_get_mode](crate::vm::Config::storage_get_mode).
            ///   - vm_kind: See [VMConfig::vm_kind](crate::vm::Config::vm_kind).
            public init(
                deterministic_account_ids: Swift.Bool,
                discard_custom_sections: Swift.Bool,
                eth_implicit_accounts: Swift.Bool,
                ext_costs: Components.Schemas.VMConfigView.ext_costsPayload,
                fix_contract_loading_cost: Swift.Bool,
                global_contract_host_fns: Swift.Bool,
                grow_mem_cost: Swift.Int,
                implicit_account_creation: Swift.Bool,
                limit_config: Components.Schemas.VMConfigView.limit_configPayload,
                linear_op_base_cost: Swift.Int,
                linear_op_unit_cost: Swift.Int,
                reftypes_bulk_memory: Swift.Bool,
                regular_op_cost: Swift.Int,
                saturating_float_to_int: Swift.Bool,
                storage_get_mode: Components.Schemas.VMConfigView.storage_get_modePayload,
                vm_kind: Components.Schemas.VMConfigView.vm_kindPayload
            ) {
                self.deterministic_account_ids = deterministic_account_ids
                self.discard_custom_sections = discard_custom_sections
                self.eth_implicit_accounts = eth_implicit_accounts
                self.ext_costs = ext_costs
                self.fix_contract_loading_cost = fix_contract_loading_cost
                self.global_contract_host_fns = global_contract_host_fns
                self.grow_mem_cost = grow_mem_cost
                self.implicit_account_creation = implicit_account_creation
                self.limit_config = limit_config
                self.linear_op_base_cost = linear_op_base_cost
                self.linear_op_unit_cost = linear_op_unit_cost
                self.reftypes_bulk_memory = reftypes_bulk_memory
                self.regular_op_cost = regular_op_cost
                self.saturating_float_to_int = saturating_float_to_int
                self.storage_get_mode = storage_get_mode
                self.vm_kind = vm_kind
            }
            public enum CodingKeys: String, CodingKey {
                case deterministic_account_ids
                case discard_custom_sections
                case eth_implicit_accounts
                case ext_costs
                case fix_contract_loading_cost
                case global_contract_host_fns
                case grow_mem_cost
                case implicit_account_creation
                case limit_config
                case linear_op_base_cost
                case linear_op_unit_cost
                case reftypes_bulk_memory
                case regular_op_cost
                case saturating_float_to_int
                case storage_get_mode
                case vm_kind
            }
        }
        /// - Remark: Generated from `#/components/schemas/VMKind`.
        @frozen public enum VMKind: Codable, Hashable, Sendable {
            /// Wasmer 0.17.x VM. Gone now.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Wasmer0 = "Wasmer0"
            }
            /// Wasmer 0.17.x VM. Gone now.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case1`.
            case case1(Components.Schemas.VMKind.Case1Payload)
            /// Wasmtime VM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Wasmtime = "Wasmtime"
            }
            /// Wasmtime VM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case2`.
            case case2(Components.Schemas.VMKind.Case2Payload)
            /// Wasmer 2.x VM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Wasmer2 = "Wasmer2"
            }
            /// Wasmer 2.x VM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case3`.
            case case3(Components.Schemas.VMKind.Case3Payload)
            /// NearVM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case NearVm = "NearVm"
            }
            /// NearVM.
            ///
            /// - Remark: Generated from `#/components/schemas/VMKind/case4`.
            case case4(Components.Schemas.VMKind.Case4Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValidatorInfo`.
        public struct ValidatorInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValidatorInfo/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// Creates a new `ValidatorInfo`.
            ///
            /// - Parameters:
            ///   - account_id:
            public init(account_id: Components.Schemas.AccountId) {
                self.account_id = account_id
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
            }
        }
        /// Reasons for removing a validator from the validator set.
        ///
        /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason`.
        @frozen public enum ValidatorKickoutReason: Codable, Hashable, Sendable {
            /// Deprecated
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case _UnusedSlashed = "_UnusedSlashed"
            }
            /// Deprecated
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case1`.
            case case1(Components.Schemas.ValidatorKickoutReason.Case1Payload)
            /// Validator didn't produce enough blocks.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2`.
            public struct Case2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2/NotEnoughBlocks`.
                public struct NotEnoughBlocksPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2/NotEnoughBlocks/expected`.
                    public var expected: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2/NotEnoughBlocks/produced`.
                    public var produced: Swift.Int
                    /// Creates a new `NotEnoughBlocksPayload`.
                    ///
                    /// - Parameters:
                    ///   - expected:
                    ///   - produced:
                    public init(
                        expected: Swift.Int,
                        produced: Swift.Int
                    ) {
                        self.expected = expected
                        self.produced = produced
                    }
                    public enum CodingKeys: String, CodingKey {
                        case expected
                        case produced
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2/NotEnoughBlocks`.
                public var NotEnoughBlocks: Components.Schemas.ValidatorKickoutReason.Case2Payload.NotEnoughBlocksPayload
                /// Creates a new `Case2Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughBlocks:
                public init(NotEnoughBlocks: Components.Schemas.ValidatorKickoutReason.Case2Payload.NotEnoughBlocksPayload) {
                    self.NotEnoughBlocks = NotEnoughBlocks
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughBlocks
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughBlocks = try container.decode(
                        Components.Schemas.ValidatorKickoutReason.Case2Payload.NotEnoughBlocksPayload.self,
                        forKey: .NotEnoughBlocks
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughBlocks"
                    ])
                }
            }
            /// Validator didn't produce enough blocks.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case2`.
            case case2(Components.Schemas.ValidatorKickoutReason.Case2Payload)
            /// Validator didn't produce enough chunks.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3`.
            public struct Case3Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3/NotEnoughChunks`.
                public struct NotEnoughChunksPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3/NotEnoughChunks/expected`.
                    public var expected: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3/NotEnoughChunks/produced`.
                    public var produced: Swift.Int
                    /// Creates a new `NotEnoughChunksPayload`.
                    ///
                    /// - Parameters:
                    ///   - expected:
                    ///   - produced:
                    public init(
                        expected: Swift.Int,
                        produced: Swift.Int
                    ) {
                        self.expected = expected
                        self.produced = produced
                    }
                    public enum CodingKeys: String, CodingKey {
                        case expected
                        case produced
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3/NotEnoughChunks`.
                public var NotEnoughChunks: Components.Schemas.ValidatorKickoutReason.Case3Payload.NotEnoughChunksPayload
                /// Creates a new `Case3Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughChunks:
                public init(NotEnoughChunks: Components.Schemas.ValidatorKickoutReason.Case3Payload.NotEnoughChunksPayload) {
                    self.NotEnoughChunks = NotEnoughChunks
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughChunks
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughChunks = try container.decode(
                        Components.Schemas.ValidatorKickoutReason.Case3Payload.NotEnoughChunksPayload.self,
                        forKey: .NotEnoughChunks
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughChunks"
                    ])
                }
            }
            /// Validator didn't produce enough chunks.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case3`.
            case case3(Components.Schemas.ValidatorKickoutReason.Case3Payload)
            /// Validator unstaked themselves.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Unstaked = "Unstaked"
            }
            /// Validator unstaked themselves.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case4`.
            case case4(Components.Schemas.ValidatorKickoutReason.Case4Payload)
            /// Validator stake is now below threshold
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5`.
            public struct Case5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5/NotEnoughStake`.
                public struct NotEnoughStakePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5/NotEnoughStake/stake_u128`.
                    public var stake_u128: Components.Schemas.NearToken
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5/NotEnoughStake/threshold_u128`.
                    public var threshold_u128: Components.Schemas.NearToken
                    /// Creates a new `NotEnoughStakePayload`.
                    ///
                    /// - Parameters:
                    ///   - stake_u128:
                    ///   - threshold_u128:
                    public init(
                        stake_u128: Components.Schemas.NearToken,
                        threshold_u128: Components.Schemas.NearToken
                    ) {
                        self.stake_u128 = stake_u128
                        self.threshold_u128 = threshold_u128
                    }
                    public enum CodingKeys: String, CodingKey {
                        case stake_u128
                        case threshold_u128
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5/NotEnoughStake`.
                public var NotEnoughStake: Components.Schemas.ValidatorKickoutReason.Case5Payload.NotEnoughStakePayload
                /// Creates a new `Case5Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughStake:
                public init(NotEnoughStake: Components.Schemas.ValidatorKickoutReason.Case5Payload.NotEnoughStakePayload) {
                    self.NotEnoughStake = NotEnoughStake
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughStake
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughStake = try container.decode(
                        Components.Schemas.ValidatorKickoutReason.Case5Payload.NotEnoughStakePayload.self,
                        forKey: .NotEnoughStake
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughStake"
                    ])
                }
            }
            /// Validator stake is now below threshold
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case5`.
            case case5(Components.Schemas.ValidatorKickoutReason.Case5Payload)
            /// Enough stake but is not chosen because of seat limits.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case DidNotGetASeat = "DidNotGetASeat"
            }
            /// Enough stake but is not chosen because of seat limits.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case6`.
            case case6(Components.Schemas.ValidatorKickoutReason.Case6Payload)
            /// Validator didn't produce enough chunk endorsements.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7`.
            public struct Case7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7/NotEnoughChunkEndorsements`.
                public struct NotEnoughChunkEndorsementsPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7/NotEnoughChunkEndorsements/expected`.
                    public var expected: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7/NotEnoughChunkEndorsements/produced`.
                    public var produced: Swift.Int
                    /// Creates a new `NotEnoughChunkEndorsementsPayload`.
                    ///
                    /// - Parameters:
                    ///   - expected:
                    ///   - produced:
                    public init(
                        expected: Swift.Int,
                        produced: Swift.Int
                    ) {
                        self.expected = expected
                        self.produced = produced
                    }
                    public enum CodingKeys: String, CodingKey {
                        case expected
                        case produced
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7/NotEnoughChunkEndorsements`.
                public var NotEnoughChunkEndorsements: Components.Schemas.ValidatorKickoutReason.Case7Payload.NotEnoughChunkEndorsementsPayload
                /// Creates a new `Case7Payload`.
                ///
                /// - Parameters:
                ///   - NotEnoughChunkEndorsements:
                public init(NotEnoughChunkEndorsements: Components.Schemas.ValidatorKickoutReason.Case7Payload.NotEnoughChunkEndorsementsPayload) {
                    self.NotEnoughChunkEndorsements = NotEnoughChunkEndorsements
                }
                public enum CodingKeys: String, CodingKey {
                    case NotEnoughChunkEndorsements
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.NotEnoughChunkEndorsements = try container.decode(
                        Components.Schemas.ValidatorKickoutReason.Case7Payload.NotEnoughChunkEndorsementsPayload.self,
                        forKey: .NotEnoughChunkEndorsements
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "NotEnoughChunkEndorsements"
                    ])
                }
            }
            /// Validator didn't produce enough chunk endorsements.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case7`.
            case case7(Components.Schemas.ValidatorKickoutReason.Case7Payload)
            /// Validator's last block proposal was for a protocol version older than
            /// the network's voted protocol version.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8`.
            public struct Case8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8/ProtocolVersionTooOld`.
                public struct ProtocolVersionTooOldPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8/ProtocolVersionTooOld/network_version`.
                    public var network_version: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8/ProtocolVersionTooOld/version`.
                    public var version: Swift.Int
                    /// Creates a new `ProtocolVersionTooOldPayload`.
                    ///
                    /// - Parameters:
                    ///   - network_version:
                    ///   - version:
                    public init(
                        network_version: Swift.Int,
                        version: Swift.Int
                    ) {
                        self.network_version = network_version
                        self.version = version
                    }
                    public enum CodingKeys: String, CodingKey {
                        case network_version
                        case version
                    }
                }
                /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8/ProtocolVersionTooOld`.
                public var ProtocolVersionTooOld: Components.Schemas.ValidatorKickoutReason.Case8Payload.ProtocolVersionTooOldPayload
                /// Creates a new `Case8Payload`.
                ///
                /// - Parameters:
                ///   - ProtocolVersionTooOld:
                public init(ProtocolVersionTooOld: Components.Schemas.ValidatorKickoutReason.Case8Payload.ProtocolVersionTooOldPayload) {
                    self.ProtocolVersionTooOld = ProtocolVersionTooOld
                }
                public enum CodingKeys: String, CodingKey {
                    case ProtocolVersionTooOld
                }
                public init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.ProtocolVersionTooOld = try container.decode(
                        Components.Schemas.ValidatorKickoutReason.Case8Payload.ProtocolVersionTooOldPayload.self,
                        forKey: .ProtocolVersionTooOld
                    )
                    try decoder.ensureNoAdditionalProperties(knownKeys: [
                        "ProtocolVersionTooOld"
                    ])
                }
            }
            /// Validator's last block proposal was for a protocol version older than
            /// the network's voted protocol version.
            ///
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutReason/case8`.
            case case8(Components.Schemas.ValidatorKickoutReason.Case8Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try value.encode(to: encoder)
                case let .case3(value):
                    try value.encode(to: encoder)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try value.encode(to: encoder)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case7(value):
                    try value.encode(to: encoder)
                case let .case8(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValidatorKickoutView`.
        public struct ValidatorKickoutView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutView/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/ValidatorKickoutView/reason`.
            public var reason: Components.Schemas.ValidatorKickoutReason
            /// Creates a new `ValidatorKickoutView`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - reason:
            public init(
                account_id: Components.Schemas.AccountId,
                reason: Components.Schemas.ValidatorKickoutReason
            ) {
                self.account_id = account_id
                self.reason = reason
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case reason
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValidatorStakeView`.
        @frozen public enum ValidatorStakeView: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValidatorStakeView/case1`.
            public struct Case1Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorStakeView/case1/value1`.
                public var value1: Components.Schemas.ValidatorStakeViewV1
                /// Creates a new `Case1Payload`.
                ///
                /// - Parameters:
                ///   - value1:
                public init(value1: Components.Schemas.ValidatorStakeViewV1) {
                    self.value1 = value1
                }
                public init(from decoder: any Decoder) throws {
                    self.value1 = try .init(from: decoder)
                }
                public func encode(to encoder: any Encoder) throws {
                    try self.value1.encode(to: encoder)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ValidatorStakeView/case1`.
            case case1(Components.Schemas.ValidatorStakeView.Case1Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValidatorStakeViewV1`.
        public struct ValidatorStakeViewV1: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValidatorStakeViewV1/account_id`.
            public var account_id: Components.Schemas.AccountId
            /// - Remark: Generated from `#/components/schemas/ValidatorStakeViewV1/public_key`.
            public var public_key: Components.Schemas.PublicKey
            /// - Remark: Generated from `#/components/schemas/ValidatorStakeViewV1/stake`.
            public var stake: Components.Schemas.NearToken
            /// Creates a new `ValidatorStakeViewV1`.
            ///
            /// - Parameters:
            ///   - account_id:
            ///   - public_key:
            ///   - stake:
            public init(
                account_id: Components.Schemas.AccountId,
                public_key: Components.Schemas.PublicKey,
                stake: Components.Schemas.NearToken
            ) {
                self.account_id = account_id
                self.public_key = public_key
                self.stake = stake
            }
            public enum CodingKeys: String, CodingKey {
                case account_id
                case public_key
                case stake
            }
        }
        /// Data structure for semver version and github tag or commit.
        ///
        /// - Remark: Generated from `#/components/schemas/Version`.
        public struct Version: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Version/build`.
            public var build: Swift.String
            /// - Remark: Generated from `#/components/schemas/Version/commit`.
            public var commit: Swift.String
            /// - Remark: Generated from `#/components/schemas/Version/rustc_version`.
            public var rustc_version: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Version/version`.
            public var version: Swift.String
            /// Creates a new `Version`.
            ///
            /// - Parameters:
            ///   - build:
            ///   - commit:
            ///   - rustc_version:
            ///   - version:
            public init(
                build: Swift.String,
                commit: Swift.String,
                rustc_version: Swift.String? = nil,
                version: Swift.String
            ) {
                self.build = build
                self.commit = commit
                self.rustc_version = rustc_version
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case build
                case commit
                case rustc_version
                case version
            }
        }
        /// Resulting state values for a view state query request
        ///
        /// - Remark: Generated from `#/components/schemas/ViewStateResult`.
        public struct ViewStateResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ViewStateResult/proof`.
            public var proof: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/ViewStateResult/values`.
            public var values: [Components.Schemas.StateItem]
            /// Creates a new `ViewStateResult`.
            ///
            /// - Parameters:
            ///   - proof:
            ///   - values:
            public init(
                proof: [Swift.String]? = nil,
                values: [Components.Schemas.StateItem]
            ) {
                self.proof = proof
                self.values = values
            }
            public enum CodingKeys: String, CodingKey {
                case proof
                case values
            }
        }
        /// A kind of a trap happened during execution of a binary
        ///
        /// - Remark: Generated from `#/components/schemas/WasmTrap`.
        @frozen public enum WasmTrap: Codable, Hashable, Sendable {
            /// An `unreachable` opcode was executed.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case1`.
            @frozen public enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case Unreachable = "Unreachable"
            }
            /// An `unreachable` opcode was executed.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case1`.
            case case1(Components.Schemas.WasmTrap.Case1Payload)
            /// Call indirect incorrect signature trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case2`.
            @frozen public enum Case2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case IncorrectCallIndirectSignature = "IncorrectCallIndirectSignature"
            }
            /// Call indirect incorrect signature trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case2`.
            case case2(Components.Schemas.WasmTrap.Case2Payload)
            /// Memory out of bounds trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case3`.
            @frozen public enum Case3Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case MemoryOutOfBounds = "MemoryOutOfBounds"
            }
            /// Memory out of bounds trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case3`.
            case case3(Components.Schemas.WasmTrap.Case3Payload)
            /// Call indirect out of bounds trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case4`.
            @frozen public enum Case4Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case CallIndirectOOB = "CallIndirectOOB"
            }
            /// Call indirect out of bounds trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case4`.
            case case4(Components.Schemas.WasmTrap.Case4Payload)
            /// An arithmetic exception, e.g. divided by zero.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case5`.
            @frozen public enum Case5Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case IllegalArithmetic = "IllegalArithmetic"
            }
            /// An arithmetic exception, e.g. divided by zero.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case5`.
            case case5(Components.Schemas.WasmTrap.Case5Payload)
            /// Misaligned atomic access trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case6`.
            @frozen public enum Case6Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case MisalignedAtomicAccess = "MisalignedAtomicAccess"
            }
            /// Misaligned atomic access trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case6`.
            case case6(Components.Schemas.WasmTrap.Case6Payload)
            /// Indirect call to null.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case7`.
            @frozen public enum Case7Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case IndirectCallToNull = "IndirectCallToNull"
            }
            /// Indirect call to null.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case7`.
            case case7(Components.Schemas.WasmTrap.Case7Payload)
            /// Stack overflow.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case8`.
            @frozen public enum Case8Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case StackOverflow = "StackOverflow"
            }
            /// Stack overflow.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case8`.
            case case8(Components.Schemas.WasmTrap.Case8Payload)
            /// Generic trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case9`.
            @frozen public enum Case9Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case GenericTrap = "GenericTrap"
            }
            /// Generic trap.
            ///
            /// - Remark: Generated from `#/components/schemas/WasmTrap/case9`.
            case case9(Components.Schemas.WasmTrap.Case9Payload)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case2(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case3(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case4(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case5(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case6(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case7(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case8(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .case9(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case2(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case3(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case4(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case5(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case6(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case7(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case8(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .case9(value):
                    try encoder.encodeToSingleValueContainer(value)
                }
            }
        }
        /// Configuration specific to ChunkStateWitness.
        ///
        /// - Remark: Generated from `#/components/schemas/WitnessConfigView`.
        public struct WitnessConfigView: Codable, Hashable, Sendable {
            /// Maximum size of transactions contained inside ChunkStateWitness.
            ///
            /// A witness contains transactions from both the previous chunk and the current one.
            /// This parameter limits the sum of sizes of transactions from both of those chunks.
            ///
            /// - Remark: Generated from `#/components/schemas/WitnessConfigView/combined_transactions_size_limit`.
            public var combined_transactions_size_limit: Swift.Int
            /// Size limit for storage proof generated while executing receipts in a chunk.
            /// After this limit is reached we defer execution of any new receipts.
            ///
            /// - Remark: Generated from `#/components/schemas/WitnessConfigView/main_storage_proof_size_soft_limit`.
            public var main_storage_proof_size_soft_limit: Swift.Int
            /// Soft size limit of storage proof used to validate new transactions in ChunkStateWitness.
            ///
            /// - Remark: Generated from `#/components/schemas/WitnessConfigView/new_transactions_validation_state_size_soft_limit`.
            public var new_transactions_validation_state_size_soft_limit: Swift.Int
            /// Creates a new `WitnessConfigView`.
            ///
            /// - Parameters:
            ///   - combined_transactions_size_limit: Maximum size of transactions contained inside ChunkStateWitness.
            ///   - main_storage_proof_size_soft_limit: Size limit for storage proof generated while executing receipts in a chunk.
            ///   - new_transactions_validation_state_size_soft_limit: Soft size limit of storage proof used to validate new transactions in ChunkStateWitness.
            public init(
                combined_transactions_size_limit: Swift.Int,
                main_storage_proof_size_soft_limit: Swift.Int,
                new_transactions_validation_state_size_soft_limit: Swift.Int
            ) {
                self.combined_transactions_size_limit = combined_transactions_size_limit
                self.main_storage_proof_size_soft_limit = main_storage_proof_size_soft_limit
                self.new_transactions_validation_state_size_soft_limit = new_transactions_validation_state_size_soft_limit
            }
            public enum CodingKeys: String, CodingKey {
                case combined_transactions_size_limit
                case main_storage_proof_size_soft_limit
                case new_transactions_validation_state_size_soft_limit
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// [Deprecated] Returns changes for a given account, contract or contract code for given block height or hash. Consider using changes instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes/post(EXPERIMENTAL_changes)`.
    public enum EXPERIMENTAL_changes {
        public static let id: Swift.String = "EXPERIMENTAL_changes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_changes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_changes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_changes.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes)
            }
            public var body: Operations.EXPERIMENTAL_changes.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_changes.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_changes.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_changes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_changes.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes/post(EXPERIMENTAL_changes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_changes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_changes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [Deprecated] Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched. Consider using block_effects instead
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_changes_in_block`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes_in_block/post(EXPERIMENTAL_changes_in_block)`.
    public enum EXPERIMENTAL_changes_in_block {
        public static let id: Swift.String = "EXPERIMENTAL_changes_in_block"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes_in_block/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_changes_in_block.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_changes_in_block.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_changes_in_block.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes_in_block/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes_in_block/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_changes_in_block)
            }
            public var body: Operations.EXPERIMENTAL_changes_in_block.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_changes_in_block.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_changes_in_block.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes_in_block/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_changes_in_block/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_changes_in_block.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_changes_in_block.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_changes_in_block/post(EXPERIMENTAL_changes_in_block)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_changes_in_block.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_changes_in_block.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries the congestion level of a shard. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_congestion_level`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_congestion_level/post(EXPERIMENTAL_congestion_level)`.
    public enum EXPERIMENTAL_congestion_level {
        public static let id: Swift.String = "EXPERIMENTAL_congestion_level"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_congestion_level/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_congestion_level.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_congestion_level.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_congestion_level.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_congestion_level/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_congestion_level/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_congestion_level)
            }
            public var body: Operations.EXPERIMENTAL_congestion_level.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_congestion_level.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_congestion_level.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_congestion_level/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_congestion_level/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcCongestionLevelResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_congestion_level.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_congestion_level.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_congestion_level/post(EXPERIMENTAL_congestion_level)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_congestion_level.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_congestion_level.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [Deprecated] Get initial state and parameters for the genesis block. Consider genesis_config instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_genesis_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_genesis_config/post(EXPERIMENTAL_genesis_config)`.
    public enum EXPERIMENTAL_genesis_config {
        public static let id: Swift.String = "EXPERIMENTAL_genesis_config"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_genesis_config/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_genesis_config.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_genesis_config.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_genesis_config.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_genesis_config/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_genesis_config/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_genesis_config)
            }
            public var body: Operations.EXPERIMENTAL_genesis_config.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_genesis_config.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_genesis_config.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_genesis_config/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_genesis_config/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_genesis_config.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_genesis_config.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_genesis_config/post(EXPERIMENTAL_genesis_config)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_genesis_config.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_genesis_config.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_block_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_block_proof/post(EXPERIMENTAL_light_client_block_proof)`.
    public enum EXPERIMENTAL_light_client_block_proof {
        public static let id: Swift.String = "EXPERIMENTAL_light_client_block_proof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_block_proof/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_light_client_block_proof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_light_client_block_proof.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_light_client_block_proof.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_block_proof/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_block_proof/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_block_proof)
            }
            public var body: Operations.EXPERIMENTAL_light_client_block_proof.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_light_client_block_proof.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_light_client_block_proof.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_block_proof/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_block_proof/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcLightClientBlockProofResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_light_client_block_proof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_light_client_block_proof.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_block_proof/post(EXPERIMENTAL_light_client_block_proof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_light_client_block_proof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_light_client_block_proof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_light_client_proof`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_proof/post(EXPERIMENTAL_light_client_proof)`.
    public enum EXPERIMENTAL_light_client_proof {
        public static let id: Swift.String = "EXPERIMENTAL_light_client_proof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_proof/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_light_client_proof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_light_client_proof.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_light_client_proof.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_proof/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_proof/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_light_client_proof)
            }
            public var body: Operations.EXPERIMENTAL_light_client_proof.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_light_client_proof.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_light_client_proof.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_proof/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_light_client_proof/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_light_client_proof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_light_client_proof.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_light_client_proof/post(EXPERIMENTAL_light_client_proof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_light_client_proof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_light_client_proof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [Deprecated] Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer. Consider using maintenance_windows instead.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_maintenance_windows`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_maintenance_windows/post(EXPERIMENTAL_maintenance_windows)`.
    public enum EXPERIMENTAL_maintenance_windows {
        public static let id: Swift.String = "EXPERIMENTAL_maintenance_windows"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_maintenance_windows/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_maintenance_windows.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_maintenance_windows.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_maintenance_windows.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_maintenance_windows/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_maintenance_windows/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_maintenance_windows)
            }
            public var body: Operations.EXPERIMENTAL_maintenance_windows.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_maintenance_windows.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_maintenance_windows.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_maintenance_windows/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_maintenance_windows/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_maintenance_windows.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_maintenance_windows.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_maintenance_windows/post(EXPERIMENTAL_maintenance_windows)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_maintenance_windows.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_maintenance_windows.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// A configuration that defines the protocol-level parameters such as gas/storage costs, limits, feature flags, other settings
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_protocol_config`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_protocol_config/post(EXPERIMENTAL_protocol_config)`.
    public enum EXPERIMENTAL_protocol_config {
        public static let id: Swift.String = "EXPERIMENTAL_protocol_config"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_protocol_config/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_protocol_config.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_protocol_config.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_protocol_config.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_protocol_config/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_protocol_config/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_protocol_config)
            }
            public var body: Operations.EXPERIMENTAL_protocol_config.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_protocol_config.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_protocol_config.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_protocol_config/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_protocol_config/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcProtocolConfigResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_protocol_config.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_protocol_config.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_protocol_config/post(EXPERIMENTAL_protocol_config)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_protocol_config.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_protocol_config.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetches a receipt by its ID (as is, without a status or execution outcome)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_receipt`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_receipt/post(EXPERIMENTAL_receipt)`.
    public enum EXPERIMENTAL_receipt {
        public static let id: Swift.String = "EXPERIMENTAL_receipt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_receipt/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_receipt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_receipt.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_receipt.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_receipt/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_receipt/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_receipt)
            }
            public var body: Operations.EXPERIMENTAL_receipt.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_receipt.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_receipt.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_receipt/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_receipt/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcReceiptResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcReceiptResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_receipt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_receipt.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_receipt/post(EXPERIMENTAL_receipt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_receipt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_receipt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Contains the split storage information. More info on split storage [here](https://near-nodes.io/archival/split-storage-archival)
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_split_storage_info`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_split_storage_info/post(EXPERIMENTAL_split_storage_info)`.
    public enum EXPERIMENTAL_split_storage_info {
        public static let id: Swift.String = "EXPERIMENTAL_split_storage_info"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_split_storage_info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_split_storage_info.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_split_storage_info.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_split_storage_info.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_split_storage_info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_split_storage_info/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_split_storage_info)
            }
            public var body: Operations.EXPERIMENTAL_split_storage_info.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_split_storage_info.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_split_storage_info.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_split_storage_info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_split_storage_info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcSplitStorageInfoResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_split_storage_info.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_split_storage_info.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_split_storage_info/post(EXPERIMENTAL_split_storage_info)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_split_storage_info.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_split_storage_info.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries status of a transaction by hash, returning the final transaction result and details of all receipts.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_tx_status`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_tx_status/post(EXPERIMENTAL_tx_status)`.
    public enum EXPERIMENTAL_tx_status {
        public static let id: Swift.String = "EXPERIMENTAL_tx_status"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_tx_status/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_tx_status.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_tx_status.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_tx_status.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_tx_status/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_tx_status/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_tx_status)
            }
            public var body: Operations.EXPERIMENTAL_tx_status.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_tx_status.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_tx_status.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_tx_status/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_tx_status/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_tx_status.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_tx_status.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_tx_status/post(EXPERIMENTAL_tx_status)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_tx_status.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_tx_status.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the current epoch validators ordered in the block producer order with repetition. This endpoint is solely used for bridge currently and is not intended for other external use cases.
    ///
    /// - Remark: HTTP `POST /EXPERIMENTAL_validators_ordered`.
    /// - Remark: Generated from `#/paths//EXPERIMENTAL_validators_ordered/post(EXPERIMENTAL_validators_ordered)`.
    public enum EXPERIMENTAL_validators_ordered {
        public static let id: Swift.String = "EXPERIMENTAL_validators_ordered"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_validators_ordered/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_validators_ordered.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.EXPERIMENTAL_validators_ordered.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.EXPERIMENTAL_validators_ordered.Input.Headers
            /// - Remark: Generated from `#/paths/EXPERIMENTAL_validators_ordered/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_validators_ordered/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_EXPERIMENTAL_validators_ordered)
            }
            public var body: Operations.EXPERIMENTAL_validators_ordered.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.EXPERIMENTAL_validators_ordered.Input.Headers = .init(),
                body: Operations.EXPERIMENTAL_validators_ordered.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/EXPERIMENTAL_validators_ordered/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/EXPERIMENTAL_validators_ordered/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_Array_of_ValidatorStakeView_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.EXPERIMENTAL_validators_ordered.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.EXPERIMENTAL_validators_ordered.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//EXPERIMENTAL_validators_ordered/post(EXPERIMENTAL_validators_ordered)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.EXPERIMENTAL_validators_ordered.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.EXPERIMENTAL_validators_ordered.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns block details for given height or hash
    ///
    /// - Remark: HTTP `POST /block`.
    /// - Remark: Generated from `#/paths//block/post(block)`.
    public enum block {
        public static let id: Swift.String = "block"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/block/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.block.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.block.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.block.Input.Headers
            /// - Remark: Generated from `#/paths/block/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/block/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_block)
            }
            public var body: Operations.block.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.block.Input.Headers = .init(),
                body: Operations.block.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/block/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/block/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcBlockResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcBlockResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.block.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.block.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//block/post(block)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.block.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.block.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched.
    ///
    /// - Remark: HTTP `POST /block_effects`.
    /// - Remark: Generated from `#/paths//block_effects/post(block_effects)`.
    public enum block_effects {
        public static let id: Swift.String = "block_effects"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/block_effects/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.block_effects.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.block_effects.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.block_effects.Input.Headers
            /// - Remark: Generated from `#/paths/block_effects/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/block_effects/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_block_effects)
            }
            public var body: Operations.block_effects.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.block_effects.Input.Headers = .init(),
                body: Operations.block_effects.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/block_effects/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/block_effects/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockByTypeResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.block_effects.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.block_effects.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//block_effects/post(block_effects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.block_effects.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.block_effects.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [Deprecated] Sends a transaction and immediately returns transaction hash. Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_async`.
    /// - Remark: Generated from `#/paths//broadcast_tx_async/post(broadcast_tx_async)`.
    public enum broadcast_tx_async {
        public static let id: Swift.String = "broadcast_tx_async"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast_tx_async/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcast_tx_async.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcast_tx_async.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.broadcast_tx_async.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast_tx_async/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast_tx_async/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_broadcast_tx_async)
            }
            public var body: Operations.broadcast_tx_async.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.broadcast_tx_async.Input.Headers = .init(),
                body: Operations.broadcast_tx_async.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast_tx_async/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast_tx_async/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_CryptoHash_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_CryptoHash_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.broadcast_tx_async.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.broadcast_tx_async.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//broadcast_tx_async/post(broadcast_tx_async)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcast_tx_async.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.broadcast_tx_async.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [Deprecated] Sends a transaction and waits until transaction is fully complete. (Has a 10 second timeout). Consider using send_tx instead.
    ///
    /// - Remark: HTTP `POST /broadcast_tx_commit`.
    /// - Remark: Generated from `#/paths//broadcast_tx_commit/post(broadcast_tx_commit)`.
    public enum broadcast_tx_commit {
        public static let id: Swift.String = "broadcast_tx_commit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/broadcast_tx_commit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcast_tx_commit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.broadcast_tx_commit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.broadcast_tx_commit.Input.Headers
            /// - Remark: Generated from `#/paths/broadcast_tx_commit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast_tx_commit/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_broadcast_tx_commit)
            }
            public var body: Operations.broadcast_tx_commit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.broadcast_tx_commit.Input.Headers = .init(),
                body: Operations.broadcast_tx_commit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/broadcast_tx_commit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/broadcast_tx_commit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.broadcast_tx_commit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.broadcast_tx_commit.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//broadcast_tx_commit/post(broadcast_tx_commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.broadcast_tx_commit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.broadcast_tx_commit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns changes for a given account, contract or contract code for given block height or hash.
    ///
    /// - Remark: HTTP `POST /changes`.
    /// - Remark: Generated from `#/paths//changes/post(changes)`.
    public enum changes {
        public static let id: Swift.String = "changes"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/changes/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changes.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changes.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.changes.Input.Headers
            /// - Remark: Generated from `#/paths/changes/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/changes/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_changes)
            }
            public var body: Operations.changes.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.changes.Input.Headers = .init(),
                body: Operations.changes.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/changes/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/changes/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcStateChangesInBlockResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changes.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changes.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//changes/post(changes)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.changes.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.changes.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns details of a specific chunk. You can run a block details query to get a valid chunk hash.
    ///
    /// - Remark: HTTP `POST /chunk`.
    /// - Remark: Generated from `#/paths//chunk/post(chunk)`.
    public enum chunk {
        public static let id: Swift.String = "chunk"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chunk/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chunk.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chunk.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chunk.Input.Headers
            /// - Remark: Generated from `#/paths/chunk/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chunk/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_chunk)
            }
            public var body: Operations.chunk.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.chunk.Input.Headers = .init(),
                body: Operations.chunk.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chunk/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chunk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcChunkResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcChunkResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chunk.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chunk.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//chunk/post(chunk)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chunk.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chunk.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries client node configuration
    ///
    /// - Remark: HTTP `POST /client_config`.
    /// - Remark: Generated from `#/paths//client_config/post(client_config)`.
    public enum client_config {
        public static let id: Swift.String = "client_config"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/client_config/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.client_config.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.client_config.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.client_config.Input.Headers
            /// - Remark: Generated from `#/paths/client_config/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/client_config/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_client_config)
            }
            public var body: Operations.client_config.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.client_config.Input.Headers = .init(),
                body: Operations.client_config.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/client_config/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/client_config/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.client_config.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.client_config.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//client_config/post(client_config)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.client_config.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.client_config.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns gas price for a specific block_height or block_hash. Using [null] will return the most recent block's gas price.
    ///
    /// - Remark: HTTP `POST /gas_price`.
    /// - Remark: Generated from `#/paths//gas_price/post(gas_price)`.
    public enum gas_price {
        public static let id: Swift.String = "gas_price"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/gas_price/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gas_price.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.gas_price.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.gas_price.Input.Headers
            /// - Remark: Generated from `#/paths/gas_price/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gas_price/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_gas_price)
            }
            public var body: Operations.gas_price.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.gas_price.Input.Headers = .init(),
                body: Operations.gas_price.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/gas_price/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/gas_price/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.gas_price.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.gas_price.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//gas_price/post(gas_price)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.gas_price.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.gas_price.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get initial state and parameters for the genesis block
    ///
    /// - Remark: HTTP `POST /genesis_config`.
    /// - Remark: Generated from `#/paths//genesis_config/post(genesis_config)`.
    public enum genesis_config {
        public static let id: Swift.String = "genesis_config"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/genesis_config/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.genesis_config.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.genesis_config.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.genesis_config.Input.Headers
            /// - Remark: Generated from `#/paths/genesis_config/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/genesis_config/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_genesis_config)
            }
            public var body: Operations.genesis_config.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.genesis_config.Input.Headers = .init(),
                body: Operations.genesis_config.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/genesis_config/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/genesis_config/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_GenesisConfig_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.genesis_config.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.genesis_config.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//genesis_config/post(genesis_config)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.genesis_config.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.genesis_config.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the current health status of the RPC node the client connects to.
    ///
    /// - Remark: HTTP `POST /health`.
    /// - Remark: Generated from `#/paths//health/post(health)`.
    public enum health {
        public static let id: Swift.String = "health"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/health/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.health.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.health.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.health.Input.Headers
            /// - Remark: Generated from `#/paths/health/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/health/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_health)
            }
            public var body: Operations.health.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.health.Input.Headers = .init(),
                body: Operations.health.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/health/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/health/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_Nullable_RpcHealthResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.health.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.health.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//health/post(health)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.health.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.health.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the proofs for a transaction execution.
    ///
    /// - Remark: HTTP `POST /light_client_proof`.
    /// - Remark: Generated from `#/paths//light_client_proof/post(light_client_proof)`.
    public enum light_client_proof {
        public static let id: Swift.String = "light_client_proof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/light_client_proof/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.light_client_proof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.light_client_proof.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.light_client_proof.Input.Headers
            /// - Remark: Generated from `#/paths/light_client_proof/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/light_client_proof/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_light_client_proof)
            }
            public var body: Operations.light_client_proof.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.light_client_proof.Input.Headers = .init(),
                body: Operations.light_client_proof.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/light_client_proof/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/light_client_proof/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.light_client_proof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.light_client_proof.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//light_client_proof/post(light_client_proof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.light_client_proof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.light_client_proof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer.
    ///
    /// - Remark: HTTP `POST /maintenance_windows`.
    /// - Remark: Generated from `#/paths//maintenance_windows/post(maintenance_windows)`.
    public enum maintenance_windows {
        public static let id: Swift.String = "maintenance_windows"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/maintenance_windows/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.maintenance_windows.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.maintenance_windows.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.maintenance_windows.Input.Headers
            /// - Remark: Generated from `#/paths/maintenance_windows/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/maintenance_windows/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_maintenance_windows)
            }
            public var body: Operations.maintenance_windows.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.maintenance_windows.Input.Headers = .init(),
                body: Operations.maintenance_windows.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/maintenance_windows/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/maintenance_windows/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_Array_of_Range_of_uint64_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.maintenance_windows.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.maintenance_windows.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//maintenance_windows/post(maintenance_windows)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.maintenance_windows.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.maintenance_windows.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries the current state of node network connections. This includes information about active peers, transmitted data, known producers, etc.
    ///
    /// - Remark: HTTP `POST /network_info`.
    /// - Remark: Generated from `#/paths//network_info/post(network_info)`.
    public enum network_info {
        public static let id: Swift.String = "network_info"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/network_info/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.network_info.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.network_info.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.network_info.Input.Headers
            /// - Remark: Generated from `#/paths/network_info/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/network_info/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_network_info)
            }
            public var body: Operations.network_info.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.network_info.Input.Headers = .init(),
                body: Operations.network_info.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/network_info/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/network_info/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.network_info.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.network_info.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//network_info/post(network_info)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.network_info.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.network_info.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the next light client block.
    ///
    /// - Remark: HTTP `POST /next_light_client_block`.
    /// - Remark: Generated from `#/paths//next_light_client_block/post(next_light_client_block)`.
    public enum next_light_client_block {
        public static let id: Swift.String = "next_light_client_block"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/next_light_client_block/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.next_light_client_block.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.next_light_client_block.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.next_light_client_block.Input.Headers
            /// - Remark: Generated from `#/paths/next_light_client_block/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/next_light_client_block/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_next_light_client_block)
            }
            public var body: Operations.next_light_client_block.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.next_light_client_block.Input.Headers = .init(),
                body: Operations.next_light_client_block.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/next_light_client_block/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/next_light_client_block/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.next_light_client_block.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.next_light_client_block.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//next_light_client_block/post(next_light_client_block)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.next_light_client_block.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.next_light_client_block.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// This module allows you to make generic requests to the network.
    ///
    /// The `RpcQueryRequest` struct takes in a [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html) and a [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
    ///
    /// The `BlockReference` enum allows you to specify a block by `Finality`, `BlockId` or `SyncCheckpoint`.
    ///
    /// The `QueryRequest` enum provides multiple variants for performing the following actions:
    ///  - View an account's details
    ///  - View a contract's code
    ///  - View the state of an account
    ///  - View the `AccessKey` of an account
    ///  - View the `AccessKeyList` of an account
    ///  - Call a function in a contract deployed on the network.
    ///
    /// - Remark: HTTP `POST /query`.
    /// - Remark: Generated from `#/paths//query/post(query)`.
    public enum query {
        public static let id: Swift.String = "query"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/query/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.query.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.query.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.query.Input.Headers
            /// - Remark: Generated from `#/paths/query/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/query/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_query)
            }
            public var body: Operations.query.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.query.Input.Headers = .init(),
                body: Operations.query.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/query/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/query/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcQueryResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcQueryResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.query.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.query.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//query/post(query)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.query.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.query.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Sends transaction. Returns the guaranteed execution status and the results the blockchain can provide at the moment.
    ///
    /// - Remark: HTTP `POST /send_tx`.
    /// - Remark: Generated from `#/paths//send_tx/post(send_tx)`.
    public enum send_tx {
        public static let id: Swift.String = "send_tx"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/send_tx/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.send_tx.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.send_tx.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.send_tx.Input.Headers
            /// - Remark: Generated from `#/paths/send_tx/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/send_tx/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_send_tx)
            }
            public var body: Operations.send_tx.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.send_tx.Input.Headers = .init(),
                body: Operations.send_tx.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/send_tx/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/send_tx/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.send_tx.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.send_tx.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//send_tx/post(send_tx)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.send_tx.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.send_tx.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Requests the status of the connected RPC node. This includes information about sync status, nearcore node version, protocol version, the current set of validators, etc.
    ///
    /// - Remark: HTTP `POST /status`.
    /// - Remark: Generated from `#/paths//status/post(status)`.
    public enum status {
        public static let id: Swift.String = "status"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/status/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.status.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.status.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.status.Input.Headers
            /// - Remark: Generated from `#/paths/status/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/status/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_status)
            }
            public var body: Operations.status.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.status.Input.Headers = .init(),
                body: Operations.status.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/status/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/status/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcStatusResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcStatusResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.status.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.status.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//status/post(status)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.status.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.status.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries status of a transaction by hash and returns the final transaction result.
    ///
    /// - Remark: HTTP `POST /tx`.
    /// - Remark: Generated from `#/paths//tx/post(tx)`.
    public enum tx {
        public static let id: Swift.String = "tx"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tx/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tx.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tx.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tx.Input.Headers
            /// - Remark: Generated from `#/paths/tx/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tx/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_tx)
            }
            public var body: Operations.tx.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.tx.Input.Headers = .init(),
                body: Operations.tx.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tx/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tx/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcTransactionResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tx.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tx.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//tx/post(tx)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tx.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tx.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Queries active validators on the network. Returns details and the state of validation on the blockchain.
    ///
    /// - Remark: HTTP `POST /validators`.
    /// - Remark: Generated from `#/paths//validators/post(validators)`.
    public enum validators {
        public static let id: Swift.String = "validators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/validators/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.validators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.validators.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.validators.Input.Headers
            /// - Remark: Generated from `#/paths/validators/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/validators/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.JsonRpcRequest_for_validators)
            }
            public var body: Operations.validators.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.validators.Input.Headers = .init(),
                body: Operations.validators.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/validators/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/validators/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.JsonRpcResponse_for_RpcValidatorResponse_and_RpcError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JsonRpcResponse_for_RpcValidatorResponse_and_RpcError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.validators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.validators.Output.Ok.Body) {
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//validators/post(validators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.validators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.validators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
